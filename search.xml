<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/10/01/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/"/>
      <url>/2023/10/01/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-公开赛道-MISC"><a href="#NewStarCTF-2023-公开赛道-MISC" class="headerlink" title="NewStarCTF 2023 公开赛道 MISC"></a>NewStarCTF 2023 公开赛道 MISC</h1><h2 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h2><p>题目如下所示：</p><pre class="line-numbers language-none"><code class="language-none">来签到吧！下面这个就是flag，不过它看起来好像怪怪的:-)M5YHEUTEKFBW6YJWKZGU44CXIEYUWMLSNJLTOZCXIJTWCZD2IZRVG4TJPBSGGWBWHFMXQTDFJNXDQTA&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本题使用CyberChef 即可得知答案：</p><p><img src="image-20231001202517937.png" alt="image-20231001202517937"></p><p>所以flag 为 <code>flag&#123;Base_15_S0_Easy_^_^&#125;</code></p><h2 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h2><p>题目给出了一个二维码如下所示：</p><p><img src="secret.png" alt="secret"></p><p>扫描之后只有一串文字，考虑到题目提示，该图片一定隐写了相关信息。使用 Stegsolve 工具进行解析：</p><p><img src="image-20231002144642640.png" alt="image-20231002144642640"></p><p>选择 Analyse，Data Extract ，RGB选择0，其余默认，点击 Preview 进行提取信息，将页面拉到最低位即可得到flag：</p><p><img src="image-20231002144844339.png" alt="image-20231002144844339"></p><p><code>flag&#123;W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece&#125;</code></p><h2 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h2><p><strong>本题目给出了一个 pcap文件，考察对 WireShark的使用，以及HTTP流量分析</strong></p><p>使用wireshark进行处理如下，含有大量的目录扫描爆破流量</p><p><img src="image-20231002145711916.png" alt="image-20231002145711916"></p><pre class="line-numbers language-none"><code class="language-none">使用Wireshark的过滤器来过滤掉干扰的流量http &amp;&amp; http.response.code &#x3D;&#x3D; 200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20231002150023999.png" alt="image-20231002150023999"></p><p>提取出HTTP相应数据：</p><pre class="line-numbers language-none"><code class="language-none">Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用 cyberchef 得到最终的结果（两次Base64加密）</p><p><img src="image-20231002150204398.png" alt="image-20231002150204398"></p><p><code>flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</code></p><h2 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h2><p>题目给了一个没有文件格式的文件，task_1，</p><p><strong>考点：Zip文件头修复、Zip压缩包爆破</strong></p><p>一个 Zip文件由三个部分组成：<strong>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</strong> </p><p>压缩源文件数据区： </p><pre class="line-numbers language-none"><code class="language-none">50 4B 03 04：这是头文件标记（0x04034b50） 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 00 00：扩展记录长度 6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 压缩源文件目录区： 50 4B 01 02：目录中文件文件头标记(0x02014b50) 3F 00：压缩使用的 pkware 版本 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 24 00：扩展字段长度 00 00：文件注释长度 00 00：磁盘开始号 00 00：内部文件属性 20 00 00 00：外部文件属性 00 00 00 00：局部头部偏移量 6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩源文件目录结束标志： </p><pre class="line-numbers language-none"><code class="language-none">50 4B 05 06：目录结束标记 00 00：当前磁盘编号 00 00：目录区开始磁盘编号 01 00：本磁盘上纪录总数 01 00：目录区中纪录总数 59 00 00 00：目录区尺寸大小 3E 00 00 00：目录区对第一张磁盘的偏移量 00 00：ZIP 文件注释长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 010editor 打开文件如下所示：</p><p><img src="image-20231002153058559.png" alt="image-20231002153058559"></p><p>将前4位更改为如下所示，并将文件更改为zip文件。</p><pre class="line-numbers language-none"><code class="language-none">50 4B 03 04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将文件解压缩后得到 flag.zip文件，flag.zip文件解压需要密码，通过binwalk发现存在文件注释：</p><p><img src="image-20231002153942872.png" alt="image-20231002153942872"></p><pre class="line-numbers language-none"><code class="language-none">SSBsaWtlIHNpeC1kaWdpdCBudW1iZXJzIGJlY2F1c2UgdGhleSBhcmUgdmVyeSBjb25jaXNlIGFuZCBlYXN5IHRvIHJlbWVtYmVyLg&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用Base64解码得到：<code>I like six-digit numbers because they are very concise and easy to remember.</code>，说明密码位数为6，可以利用爆破进行破解。我们使用 <strong>john</strong> 进行破解（fcrackzip解不开，都说不是加密对象）：</p><p>首先使用以下命令，获得zip的中间Hash文件 flag.hash</p><pre class="line-numbers language-none"><code class="language-none">zip2john flag.zip &gt; flag.hash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再利用 <code>john flag.hash</code>  进行破解得到如下：</p><p><img src="image-20231002160943962.png" alt="image-20231002160943962"></p><p>因而密码为 <code>232311</code>，解压缩flag.zip文件得到 flag文件：<code>flag&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</code></p><h2 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h2><p>题目给出了一个 white.zip 文件</p><p><strong>考点：WhiteSpace语言</strong></p><p>解压后是一个txt文件，里面没有任何内容：</p><p><img src="image-20231002161317063.png" alt="image-20231002161317063"></p><p>该题考察的是 WhiteSpace 语言，将txt中的内容全选复制，利用<a href="https://vii5ard.github.io/whitespace/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTYyMTI3ODgsImZpbGVHVUlEIjoiWEtxNDIxRUJLekZ5UnpBTiIsImlhdCI6MTY5NjIxMjQ4OCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODI4Njg3OTQ5NX0.mrKn9R-1-s9n8mhBqW7mb2GtCkzv7XY229TYODZTWK4">在线网站</a>在线运行：</p><p><img src="image-20231002161549733.png" alt="image-20231002161549733"></p><p>得到flag为 <code>flag&#123;w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04&#125;</code></p><h2 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h2><p>题目给出了一个压缩文件，其中有眼睛图片。</p><p><strong>考点：SlientEye隐写</strong></p><p>使用SlientEye工具进行Decode即可获得flag：</p><p><img src="image-20231002164212579.png" alt="image-20231002164212579"></p><p>flag为：<code>flag&#123;R0ck1ng_y0u_63b0dc13a591&#125;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF 2023 公开赛道 Crypto题目</title>
      <link href="/2023/10/01/BUUCTF%E2%80%94BABYRSA/"/>
      <url>/2023/10/01/BUUCTF%E2%80%94BABYRSA/</url>
      
        <content type="html"><![CDATA[<h2 id="BUUCTF-Crypto-babyrsa-task-4"><a href="#BUUCTF-Crypto-babyrsa-task-4" class="headerlink" title="BUUCTF - Crypto babyrsa task_4"></a>BUUCTF - Crypto babyrsa task_4</h2><p>题目如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">gen_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">*=</span> getPrime<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> gen_prime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token number">65537</span>    m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span><span class="token comment"># 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用在线网站可以将所给的n分解素数为以下15个：</p><pre class="line-numbers language-none"><code class="language-none">221799091923387253732370292207246387838727060739492794985117280430306929230722672970591037320714851936548641313831680819393990124340931785614278428893<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>公钥如上</p><p>n &#x3D; 以上公钥相乘</p><p>phi &#x3D; 17290065983330319066216184030777067976382697670733255200004943703459332462321021486252411405242719735544959857825124088104221030960082400051200</p><p>e &#x3D; 65537</p><p>d * e mod phi &#x3D; 1 即 由相关数学概念可知，d 是 e 的逆元，标记为 $e^{-1}$,</p><p>利用 扩展欧几里得算法 和 求解逆元算法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extended_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    gcd<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> gcd<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token keyword">def</span> <span class="token function">inverse_modulo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    gcd<span class="token punctuation">,</span> inverse<span class="token punctuation">,</span> _ <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token keyword">if</span> gcd <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"The inverse does not exist."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inverse <span class="token operator">%</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extended_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    gcd<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>    <span class="token keyword">return</span> gcd<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token keyword">def</span> <span class="token function">inverse_modulo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    gcd<span class="token punctuation">,</span> inverse<span class="token punctuation">,</span> _ <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token keyword">if</span> gcd <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"The inverse does not exist."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> inverse <span class="token operator">%</span> p<span class="token keyword">def</span> <span class="token function">fastExpMod</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>               <span class="token comment">#快速幂</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> e <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment"># ei = 1, then mul</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> m        e <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment"># b, b^2, b^4, b^8, ... , b^(2^n)</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> m    <span class="token keyword">return</span> resultn1 <span class="token operator">=</span> <span class="token number">2217990919</span>n2 <span class="token operator">=</span> <span class="token number">2338725373</span>n3 <span class="token operator">=</span> <span class="token number">2370292207</span>n4 <span class="token operator">=</span> <span class="token number">2463878387</span>n5 <span class="token operator">=</span> <span class="token number">2706073949</span>n6 <span class="token operator">=</span> <span class="token number">2794985117</span>n7 <span class="token operator">=</span> <span class="token number">2804303069</span>n8 <span class="token operator">=</span> <span class="token number">2923072267</span>n9 <span class="token operator">=</span> <span class="token number">2970591037</span>n10 <span class="token operator">=</span> <span class="token number">3207148519</span>n11 <span class="token operator">=</span> <span class="token number">3654864131</span>n12 <span class="token operator">=</span> <span class="token number">3831680819</span>n13 <span class="token operator">=</span> <span class="token number">3939901243</span>n14 <span class="token operator">=</span> <span class="token number">4093178561</span>n15 <span class="token operator">=</span> <span class="token number">4278428893</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n3<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n4<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n5<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n6<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n7<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n8<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n9<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n10<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n11<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n12<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n13<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n14<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n15<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span>d <span class="token operator">=</span> inverse_modulo<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"The inverse of </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string"> modulo </span><span class="token interpolation"><span class="token punctuation">&#123;</span>phi<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>inverse<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span>c <span class="token operator">=</span> <span class="token number">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span>m <span class="token operator">=</span> fastExpMod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag为：<code>flag&#123;us4_s1ge_t0_cal_phI&#125;</code></p><h2 id="BUUCTF-Crypto-small-d-task-5"><a href="#BUUCTF-Crypto-small-d-task-5" class="headerlink" title="BUUCTF - Crypto small d  task_5"></a>BUUCTF - Crypto small d  task_5</h2><p>原题目如下：</p><p><img src="image-20230928143400881.png" alt="image-20230928143400881"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>d <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>e <span class="token operator">=</span> inverse<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span><span class="token comment"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span><span class="token comment"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从题目可以看出，其名称为 Small d，并给出了一个人名**<a href="https://en.wikipedia.org/wiki/Wiener%27s_attack">Michael J. Wiener</a>**，该攻击针对RSA，当d很小时，攻击使用连分数法来暴露私钥d。</p><p>我们直接用rsactftool脚本跑</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;RsaCtfTool&#x2F;RsaCtfTool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">python3 RsaCtfTool.py -n 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433 -e 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825 --uncipher 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248 --attack wiener<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得出以下内容：</p><p><img src="image-20230928152305659.png" alt="image-20230928152305659"></p><p>所以 flag 为：<code>flag&#123;learn_some_continued_fraction_technique#dc16885c&#125;</code></p><h2 id="BUUCTF-Crypto-babyxor-task-3-简单的异或"><a href="#BUUCTF-Crypto-babyxor-task-3-简单的异或" class="headerlink" title="BUUCTF - Crypto babyxor  task_3 简单的异或"></a>BUUCTF - Crypto babyxor  task_3 简单的异或</h2><p>题目：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> secret <span class="token keyword">import</span> <span class="token operator">*</span>ciphertext <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    ciphertext<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用在线转换工具将十六进制转换为二进制，得到前5个字符的二进制为：</p><pre class="line-numbers language-none"><code class="language-none">11101001 11100011 11101110 11101000 11110100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以猜测 前五个字母应该是 flag{，利用ASCII转二进制可以知道为：</p><pre class="line-numbers language-none"><code class="language-none">01100110 01101100 01100001 01100111 01111011<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>异或：</p><pre class="line-numbers language-none"><code class="language-none">10001111 10001111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以知道异或密钥为 10001111。然后先利用16进制转2进制网站，将密文转换为2进制；再利用异或在线解密将密文转换为明文；最后用2进制转换为ASCII码，得到正确答案，flag： <code>flag&#123;x0r_15_symm3try_and_e4zy!!!!!!&#125;</code></p><h2 id="BUUCTF-Crypto-babyencoding-task-3-txt"><a href="#BUUCTF-Crypto-babyencoding-task-3-txt" class="headerlink" title="BUUCTF - Crypto babyencoding task_3.txt"></a>BUUCTF - Crypto babyencoding task_3.txt</h2><p>题目如下所示：</p><pre class="line-numbers language-none"><code class="language-none">part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ&#x3D;part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY&#x3D;part 3 of flag: &#x3D;8S4U,3DR8SDY,C&#96;S-F5F-C(S,S&lt;R-C&#96;Q9F8S87T&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一行就是Base64编码，解码得到：</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;dazzling_encoding#4e0ad4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二行使用Base64编码解码得到乱码：</p><pre class="line-numbers language-none"><code class="language-none">1?  ?P  ? ?Q1  0?P0?  ??1?? ?R1?? ?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试使用Base32工具解码得到：</p><pre class="line-numbers language-none"><code class="language-none">f0ca08d1e1d0f10c0c7afe422fea7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三行应该是 UUencode，解码后得到：</p><pre class="line-numbers language-none"><code class="language-none">c55192c992036ef623372601ff3a&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把答案拼起来试试：</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果正确。</p><h2 id="BUUCTF-Crypto-Affine-task-2-Caesar-with-multiplication"><a href="#BUUCTF-Crypto-Affine-task-2-Caesar-with-multiplication" class="headerlink" title="BUUCTF - Crypto Affine  task_2 Caesar with multiplication"></a>BUUCTF - Crypto Affine  task_2 Caesar with multiplication</h2><p>题目如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token punctuation">,</span> keymodulus <span class="token operator">=</span> <span class="token number">256</span>ciphertext <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    ciphertext<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>f <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulus<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该题目为 <code>仿射</code>，提示是 <code>凯撒和乘法</code></p><p>先将密文前五位16进制转为10进制：</p><pre class="line-numbers language-none"><code class="language-none">221 67 136 238 66<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据 modulus 为 256，判断密文应该是对应的 扩展的ASCII 码。前五位字符原先应该是 <code>flag&#123;</code>，其所对应的十进制数为：</p><pre class="line-numbers language-none"><code class="language-none">102 108 97 103 123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行暴力破解，我们知道 k0的逆元 和 k1 的值一定不会大于 256：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">modulus <span class="token operator">=</span> <span class="token number">256</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">136</span><span class="token punctuation">,</span><span class="token number">238</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span>   <span class="token comment">#密文</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> k0 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            y_<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>k0<span class="token operator">*</span><span class="token punctuation">(</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> k1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulus<span class="token punctuation">)</span>        <span class="token keyword">if</span> y_ <span class="token operator">==</span> y<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'k0为:'</span><span class="token punctuation">,</span>k0<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'k1为:'</span><span class="token punctuation">,</span> k1<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y_为'</span><span class="token punctuation">,</span>y_<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>破解结果为：</p><pre class="line-numbers language-none"><code class="language-none">k0的逆元 为: 241k1为: 23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用求逆元函数得到，k0为 17 （没有什么用了）</p><p>根据密文转化为10进制数带入上述式子，得到明文10进制数为：</p><pre class="line-numbers language-none"><code class="language-none">[102, 108, 97, 103, 123, 52, 102, 102, 49, 110, 101, 95, 99, 49, 112, 104, 101, 114, 95, 105, 53, 95, 118, 101, 114, 121, 95, 51, 97, 122, 121, 125]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再将其转化为ASCII码得到flag：<code>flag&#123;4ff1ne_c1pher_i5_very_3azy&#125;</code></p><h2 id="BUUCTF-Crypto-babyaes-task-1-了解下aes是什么"><a href="#BUUCTF-Crypto-babyaes-task-1-了解下aes是什么" class="headerlink" title="BUUCTF - Crypto babyaes  task_1 了解下aes是什么"></a>BUUCTF - Crypto babyaes  task_1 了解下aes是什么</h2><p>题目如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> os<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> data <span class="token operator">+</span> <span class="token string">b""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">b'\x00'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag_ <span class="token operator">=</span> pad<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>    iv <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> bytes_to_long<span class="token punctuation">(</span>iv<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span>    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    enc_flag <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>flag_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>enc_flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span><span class="token comment"># b'>]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该题目为AES加密，使用了一个密钥key和初始化向量iv，选择的CBC模式加密。</p><p>先分析一下题目中的几个关键函数和方法：</p><pre class="line-numbers language-none"><code class="language-none">urandom:语法  os.urandom（size）参数：size:字符串随机字节的大小返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。例 os.urandom(1)输出：b&#39;\x91&#39;二进制：10010001 （8bits）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">AES.new(key, mode, *args, **kwargs)param key(参数密钥):在对称密码中使用的秘密密钥。它必须为16、24或32个字节长（分别用于AES-128， AES-192或AES-256）。mode（模式）模式（支持的MODE_*常量之一）–用于加密或解密的链接模式。学习链接：https:&#x2F;&#x2F;pycryptodome.readthedocs.io&#x2F;en&#x2F;latest&#x2F;src&#x2F;cipher&#x2F;aes.htmlKeyword Arguments（关键字参数）：IV（字节，字节组，memoryview） - （只适用于MODE_CBC，MODE_CFB，MODE_OFB，和MODE_OPENPGP模式）。用于加密或解密的初始化向量。对于MODE_CBC，MODE_CFB和MODE_OFB它必须是16个字节。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解题思路：<br>解密 flag 我们需要获取到 key 和 iv 的值，由条件：<br>key&#x3D;os.urandom(16)*2<br>iv&#x3D;os.urandom(16)<br>可知：key是32bytes,256bits ；iv是16bytes ,128bits</p><p>key^iv ，那么只有 iv 与 key的低128位相异或，所以key的高128位是固定不变的。所以输出结果的高128bits,就是key的高128bits,进而可以得到key的所有值256bits。之后key的低128bits，与输出结果的低128bits 相异或，所得结果就是 iv的值了。key,iv得到后直接aes.decrypt()解密就ok了。<br>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> os<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span>xor <span class="token operator">=</span> <span class="token number">3657491768215750635844958060963805125333761387746954618540958489914964573229</span>enc_flag <span class="token operator">=</span> <span class="token string">b'>]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i'</span>out <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>xor<span class="token punctuation">)</span>key <span class="token operator">=</span> out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key为:'</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>iv <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>bytes_to_long<span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># print(iv)</span>iv <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'iv为:'</span><span class="token punctuation">,</span>iv<span class="token punctuation">)</span>aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span>iv<span class="token punctuation">)</span>flag <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc_flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后得到：<code>b&#39;firsT_cry_Aes\x00\x00\x01&#39;</code>，其中 <code>firsT_cry_Aes</code> 是我们需要的内容，其余部分只是填充使字符串长度达到16。所以最终的flag为 <code>flag&#123;firsT_cry_Aes&#125;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>目录遍历</title>
      <link href="/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/"/>
      <url>/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><p>打开题目可以看到如下页面，该题本质上就是遍历所有目录找取flag。目录数目不多，所以一个一个点击查找就可以找到。</p><p><img src="image-20230920084821330.png" alt="image-20230920084821330"></p><p>找到 <code>flag.txt</code> 文件</p><p><img src="image-20230920085047645.png" alt="image-20230920085047645"></p><p>打开得到 <code>flag</code> 为</p><pre class="line-numbers language-none"><code class="language-none">ctfhub&#123;bcd6fcf15f15f45dd0cf1a0c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>斯坦福编程范式CS107_2</title>
      <link href="/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/"/>
      <url>/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/</url>
      
        <content type="html"><![CDATA[<h2 id="斯坦福编程范式CS107-2"><a href="#斯坦福编程范式CS107-2" class="headerlink" title="斯坦福编程范式CS107_2"></a>斯坦福编程范式CS107_2</h2><table><thead><tr><th><strong>C&#x2F;C++</strong></th><th align="left"></th></tr></thead><tbody><tr><td>bool</td><td align="left"></td></tr><tr><td>char</td><td align="left">1  byte</td></tr><tr><td>short</td><td align="left">2  bytes</td></tr><tr><td>int</td><td align="left">2–4 bytes</td></tr><tr><td>long</td><td align="left">4 bytes</td></tr><tr><td>long long</td><td align="left">8  bytes</td></tr><tr><td>float</td><td align="left">4  bytes</td></tr><tr><td>double</td><td align="left">8  bytes</td></tr></tbody></table><h4 id="1-为什么二进制中不简单的将-1-置在最左侧表示负数（如，-3为-1011）"><a href="#1-为什么二进制中不简单的将-1-置在最左侧表示负数（如，-3为-1011）" class="headerlink" title="1.为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3为 1011）"></a>1.为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3为 1011）</h4><p>因为如果是这样的话，-3 + 3将等于：</p><pre class="line-numbers language-none"><code class="language-none">1011 + 0011 &#x3D; 1110 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显然结果是 -6 而不是 0。所以为了使正负数相加得到全0或全1，如：</p><pre class="line-numbers language-none"><code class="language-none">1100 + 0011 &#x3D; 1111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样得到全1后，我们只需要再 +1，就可以得到全0：</p><pre class="line-numbers language-none"><code class="language-none">1111 + 0001 &#x3D; (1)0000   这里的1越界了所以不算<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以实际上，我们采用 <strong>全部取反 并 +1</strong> 的方式用来表示负数： -3 （1101）.这种方法就叫做 <code>2补码</code></p><p>在 short 类型中，为了使 正数和负数 的数量一致，我们把最左边的那一比特空出，用于分割正数和负数，即正数最大为 $2^{15} -1 $：</p><pre class="line-numbers language-none"><code class="language-none">0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>负数最小是 $- 2^{15}$：</p><pre class="line-numbers language-none"><code class="language-none">1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-语言中变量间的相互赋值是如何实现的？"><a href="#2-语言中变量间的相互赋值是如何实现的？" class="headerlink" title="2.语言中变量间的相互赋值是如何实现的？"></a>2.语言中变量间的相互赋值是如何实现的？</h4><p>当我们运行如下程序的时候：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char ch &#x3D; &#39;A&#39;;short s &#x3D; ch;cout &lt;&lt; s &lt;&lt; endl;------65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内存中就是这样进行的：(每一个格子代表1byte)，内存直接将<code>ch</code>的内容复制道<code>s</code>中。</p><table><thead><tr><th align="left">ch</th><th align="center"></th><th align="center">65</th></tr></thead><tbody><tr><td align="left">s</td><td align="center">0</td><td align="center">65</td></tr></tbody></table><p>如果运行如下程序时：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">short s &#x3D; 67;char ch &#x3D; s;cout &lt;&lt; ch &lt;&lt; endl;------C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行如上赋值操作时，16bit不能够被直接压缩成为8bit的模式。因而C和C++中会简单的只关注低位上的内容，而把高位内容直接丢弃。</p><p>如果进行如下程序时：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">short s &#x3D; -1;int i &#x3D; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内存中所进行的操作是这样的：</p><table><thead><tr><th align="center">s</th><th align="center"></th><th align="center"></th><th align="center">1…1</th><th align="center">1…1</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">1…1</td><td align="center">1…1</td><td align="center">1…1</td><td align="center">1…1</td></tr></tbody></table><p>这种操作被称为 “符号扩展”。会将 符号位一位一位向上复制，就会导致int的前两字节内全变为1，使得实际的数值仍然为 <code>-1</code></p><h5 id="3-浮点数float"><a href="#3-浮点数float" class="headerlink" title="3.浮点数float"></a>3.浮点数float</h5><p>对于浮点数float，其将整数范围缩小，节省下来的bit位用来表示 2的负次幂，这样就可以表示小数了。这是技术上可以实现的一种方式，但<code>实际上并不是这样</code>。</p><p> 实际上对于浮点数这样 4 byte 大小的数，浮点数将其中的 1 位用来表示符号，将其中的 8 位用来表示整数，剩下的 23 位用来表示小数。如下：</p><pre class="line-numbers language-none"><code class="language-none">s exp(8bit)xxxxxxxx(23bit)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么任何一个数都可以用如下形式进行表示：<br>$$<br>(-1)^S;1.xxxxxxxxx;×;2^{exp-127}     ;;;;;;(255≥exp≥0)<br>$$<br>例如，对于7.0，我们可以表示为：<br>$$<br>7.0×2^0\<br>3.5 ×2^1\<br>1.75×2^2<br>$$<br>总归是可以表示到如上的标准形式。</p><h5 id="4-整数与浮点数之间的赋值"><a href="#4-整数与浮点数之间的赋值" class="headerlink" title="4.整数与浮点数之间的赋值"></a>4.整数与浮点数之间的赋值</h5><p>如果有以下程序：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 5;float f &#x3D; i;cout &lt;&lt; f &lt;&lt; endl;----------    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这其中变化是这样的：</p><p>$5$ 被解释为 $5.0×2^0$ 随后又被解释为 $2.5×2^1$ 接着又被解释为 $1.25×2^2$. 因此 exp &#x3D; 129，xxx&#x3D;0.25。</p><p>如果有以下程序：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int i &#x3D; 37;float f &#x3D; *(float*)&amp;i; &#x2F;&#x2F; 对i的地址求值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&amp;i 表示 i 的地址，i是int类型的数，因而 &amp;i 是 int * 类型的指针。</p><p>(float*)&amp;i 表示将 int * 类型 转变为了 float * 类型，bit位置不会发生改变，而因为 37 对应的 bit 位 都落在了 xxxxxx 的位置上，因而 exp &#x3D; 0，这就是一个奇小无比的数，而不是 37.0</p><p>如果有以下程序：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">float f &#x3D; 7.0;short s &#x3D; *(short *)&amp;f;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>float 是 4字节的数，指针指向 float 的最高位。当利用上述代码进行类型强制转换的时候，因为 short 只有2字节，因而 float 只有高位的两字节被直接复制过来，定义成了一个short类型的数。如下图所示：</p><p><img src="image-20230921091608188.png" alt="image-20230921091608188"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEB响应包源代码</title>
      <link href="/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFHub-响应包源代码"><a href="#CTFHub-响应包源代码" class="headerlink" title="CTFHub | 响应包源代码"></a>CTFHub | 响应包源代码</h1><p>题目网页显示的内容如下：</p><p><img src="test2.png" alt="test2"></p><p>打开源代码就可以找到答案：</p><p><img src="test1.png" alt="test1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>你好！</p><p>Hello！</p><p>Hallo！</p><p>こんにちわ‼</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
