<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>亚纳奇的Blog • Posts by &#34;知识&#34; tag</title>
        <link>http://Yanagi-Kon.github.io</link>
        <description>一个不知名的小菜鸡</description>
        <language>zh-CN</language>
        <pubDate>Mon, 16 Oct 2023 14:31:00 +0800</pubDate>
        <lastBuildDate>Mon, 16 Oct 2023 14:31:00 +0800</lastBuildDate>
        <category>测试</category>
        <category>知识</category>
        <category>BUUCTF</category>
        <category>SUSCTF</category>
        <item>
            <guid isPermalink="true">http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/</guid>
            <title>10.06 SUS培训</title>
            <link>http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/</link>
            <category>知识</category>
            <pubDate>Mon, 16 Oct 2023 14:31:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1006-sus培训&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1006-sus培训&#34;&gt;#&lt;/a&gt; 10.06 SUS 培训&lt;/h2&gt;
&lt;h3 id=&#34;基本知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本知识点&#34;&gt;#&lt;/a&gt; 基本知识点&lt;/h3&gt;
&lt;p&gt;1. 程序在 32 位中传递参数为 栈传递，在 64 位中通过寄存器传递&lt;/p&gt;
&lt;p&gt;2. 变量存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未初始化的全局变量 存放在 BSS 段&lt;/li&gt;
&lt;li&gt;初始化的全局变量存放在 Data 段&lt;/li&gt;
&lt;li&gt;函数存放在 Text 段&lt;/li&gt;
&lt;li&gt;局部变量存放在栈段&lt;/li&gt;
&lt;li&gt;主动申请的内存在堆部分&lt;/li&gt;
&lt;li&gt;read 函数等存放在 shared libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单栈溢出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单栈溢出&#34;&gt;#&lt;/a&gt; 简单栈溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006153909131.png&#34; alt=&#34;image-20231006153909131&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006154804670.png&#34; alt=&#34;image-20231006154804670&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ret2text&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2text&#34;&gt;#&lt;/a&gt; ret2text&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006155442449.png&#34; alt=&#34;image-20231006155442449&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print name&lt;/code&gt;  将  &lt;code&gt;0x100&lt;/code&gt;  的数据拷贝到 只有 15 个字节的 &lt;code&gt;buf&lt;/code&gt;  中，就会溢出。读入超过 15 字节的数据，就会将下面的内容覆盖，把返回地址的值覆盖为 &lt;code&gt;shell()&lt;/code&gt;  函数的地址，就可以跳转到 &lt;code&gt;shell&lt;/code&gt;  完成攻击。&lt;/p&gt;
&lt;p&gt;一般的，先使用  &lt;code&gt;checksec&lt;/code&gt;  查看保护机制：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006155901627.png&#34; alt=&#34;image-20231006155901627&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NX&lt;/code&gt;  有效防止 &lt;code&gt;shellcode注入&lt;/code&gt; 攻击。 &lt;code&gt;PIE&lt;/code&gt;  地址随机化的保护。&lt;/p&gt;
&lt;p&gt;攻击代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006160640430.png&#34; alt=&#34;image-20231006160640430&#34;&gt;&lt;/p&gt;
&lt;p&gt;至少 15 个字节将 buf 覆盖掉，再写 8 个字节将 ebp 覆盖掉，最后再覆盖返回地址，覆盖为后门函数的返回值。但是这样会导致栈没有对齐，从而报错。于是利用查看 ret 的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006161404605.png&#34; alt=&#34;image-20231006161404605&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 ret 填充到 8 结尾的内容中，这样 shell 会以 0 结尾开始运行从而对其 16 字节不报错。pwn 的解法很多，这只是本题其中一个解法。&lt;/p&gt;
&lt;h4 id=&#34;ret2shellcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2shellcode&#34;&gt;#&lt;/a&gt; ret2shellcode&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006161936187.png&#34; alt=&#34;image-20231006161936187&#34;&gt;&lt;/p&gt;
&lt;p&gt;本题目没有后门函数，需要自行编写 &lt;code&gt;shellcode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162147718.png&#34; alt=&#34;image-20231006162147718&#34;&gt;&lt;/p&gt;
&lt;p&gt;题目会将 buf 在栈上的地址告诉你，我们将 buf 的返回地址改为 buf 在栈上的开始地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162512175.png&#34; alt=&#34;image-20231006162512175&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162919424.png&#34; alt=&#34;image-20231006162919424&#34;&gt;&lt;/p&gt;
&lt;p&gt;shellcode 可以用系统自动生成的，也可以用自己写的，编译 shellcode 的能力还是很重要的。可以在 shellcodes databsase 网站中学习。&lt;/p&gt;
&lt;h4 id=&#34;ret2libc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2libc&#34;&gt;#&lt;/a&gt; ret2libc&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006163151506.png&#34; alt=&#34;image-20231006163151506&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题开启了 NX 并且没有后门函数。使用 ldd，查看动态库发现有 libc，于是该题从 libc 中开始找。libc 的地址是随机的，但是 write 函数的地址在 libc 中是相对的，知道了就可以获得 libc 的地址。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006164647386.png&#34; alt=&#34;image-20231006164647386&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;学习资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#学习资源&#34;&gt;#&lt;/a&gt; 学习资源&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006164824858.png&#34; alt=&#34;image-20231006164824858&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/</guid>
            <title>IDA 使用</title>
            <link>http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/</link>
            <category>知识</category>
            <pubDate>Thu, 05 Oct 2023 17:06:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;ida-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ida-使用&#34;&gt;#&lt;/a&gt; IDA 使用&lt;/h2&gt;
&lt;p&gt;建议去看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWVtNHkxUDdQTS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9N2Q5NDgxMDFhMGVkNDczNzcyZTU4ZWVhMzdjNjFmOTQ=&#34;&gt;视频&lt;/span&gt;，讲的很详细，很好。&lt;/p&gt;
&lt;p&gt;一般先找程序入口点，在  &lt;code&gt;Exports&lt;/code&gt;  里面：&lt;/p&gt;
&lt;p&gt;![image-20231005103252765](IDA 使用 /image-20231005103252765.png)&lt;/p&gt;
&lt;p&gt;双击该内容  &lt;code&gt;start&lt;/code&gt;  就可以直接定位到程序中的位置：&lt;/p&gt;
&lt;p&gt;![image-20231005103353127](IDA 使用 /image-20231005103353127.png)&lt;/p&gt;
&lt;p&gt;一般的，我们可以在  &lt;code&gt;option -&amp;gt; general&lt;/code&gt;  中将  &lt;code&gt;Stack Pointer&lt;/code&gt;  和  &lt;code&gt;Auto comments&lt;/code&gt;  打开，可以方便我们更好的查看源码的对应：&lt;/p&gt;
&lt;p&gt;![image-20231005103646708](IDA 使用 /image-20231005103646708.png)&lt;/p&gt;
&lt;p&gt;空格键可以切换视图效果：&lt;/p&gt;
&lt;p&gt;![image-20231005103807473](IDA 使用 /image-20231005103807473.png)&lt;/p&gt;
&lt;p&gt;切换过来后可以看到前面的地址以及段名称，如 &lt;code&gt;.text:00000000004010B0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对着你想要反编译的内容 按  &lt;code&gt;F5&lt;/code&gt; ，进行反编译：&lt;/p&gt;
&lt;p&gt;![image-20231005104011702](IDA 使用 /image-20231005104011702.png)&lt;/p&gt;
&lt;p&gt;可以在上面的页面中双击 main 进入到 main 函数中。&lt;/p&gt;
&lt;p&gt;右键  &lt;code&gt;Collapse declaration&lt;/code&gt;  可以折叠变量，方便查看源码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt;  键可以用于重命名函数的变量名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;  键可以转换为字符模式显示&lt;/p&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt;  以数字或 16 进制显示&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/</guid>
            <title>斯坦福编程范式CS107_2</title>
            <link>http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/</link>
            <category>知识</category>
            <pubDate>Tue, 19 Sep 2023 20:28:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;斯坦福编程范式cs107_2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#斯坦福编程范式cs107_2&#34;&gt;#&lt;/a&gt; 斯坦福编程范式 CS107_2&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;C/C++&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1  byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2  bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2–4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long long&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8  bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4  bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8  bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011&#34;&gt;#&lt;/a&gt; 1.	为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3 为 1011）&lt;/h4&gt;
&lt;p&gt;因为如果是这样的话，-3 + 3 将等于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1011 + 0011 = 1110 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然结果是 -6 而不是 0。所以为了使正负数相加得到全 0 或全 1，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1100 + 0011 = 1111
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样得到全 1 后，我们只需要再 +1，就可以得到全 0：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1111 + 0001 = (1)0000   这里的1越界了所以不算
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以实际上，我们采用 &lt;strong&gt;全部取反 并 +1&lt;/strong&gt; 的方式用来表示负数： -3 （1101）. 这种方法就叫做  &lt;code&gt;2补码&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 short 类型中，为了使 正数和负数 的数量一致，我们把最左边的那一比特空出，用于分割正数和负数，即正数最大为 $2^{15} -1 $：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;负数最小是 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;15&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;- 2^{15}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2语言中变量间的相互赋值是如何实现的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2语言中变量间的相互赋值是如何实现的&#34;&gt;#&lt;/a&gt; 2.	语言中变量间的相互赋值是如何实现的？&lt;/h4&gt;
&lt;p&gt;当我们运行如下程序的时候：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;char ch = &#39;A&#39;;
short s = ch;
cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; endl;
------
65
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在内存中就是这样进行的：(每一个格子代表 1byte)，内存直接将 &lt;code&gt;ch&lt;/code&gt;  的内容复制道 &lt;code&gt;s&lt;/code&gt;  中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;ch&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;65&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果运行如下程序时：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;short s = 67;
char ch = s;
cout &amp;lt;&amp;lt; ch &amp;lt;&amp;lt; endl;
------
C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进行如上赋值操作时，16bit 不能够被直接压缩成为 8bit 的模式。因而 C 和 C++ 中会简单的只关注低位上的内容，而把高位内容直接丢弃。&lt;/p&gt;
&lt;p&gt;如果进行如下程序时：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;short s = -1;
int i = s;	
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存中所进行的操作是这样的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;s&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1…1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1…1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1…1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1…1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1…1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1…1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这种操作被称为 “符号扩展”。会将 符号位一位一位向上复制，就会导致 int 的前两字节内全变为 1，使得实际的数值仍然为  &lt;code&gt;-1&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;3浮点数float&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3浮点数float&#34;&gt;#&lt;/a&gt; 3.	浮点数 float&lt;/h5&gt;
&lt;p&gt;对于浮点数 float，其将整数范围缩小，节省下来的 bit 位用来表示 2 的负次幂，这样就可以表示小数了。这是技术上可以实现的一种方式，但 &lt;code&gt;实际上并不是这样&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;实际上对于浮点数这样 4 byte 大小的数，浮点数将其中的 1 位用来表示符号，将其中的 8 位用来表示整数，剩下的 23 位用来表示小数。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s 			exp(8bit)			xxxxxxxx(23bit)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么任何一个数都可以用如下形式进行表示：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msup&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mn&gt;1.&lt;/mn&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mrow&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;127&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mtext&gt;  &lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;255&lt;/mn&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;≥&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(-1)^S\;1.xxxxxxxxx\;×\;2^{exp-127}     \;\;\;\;\;\;(255≥exp≥0)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1413309999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8913309999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1141079999999999em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.864108em;&#34;&gt;&lt;span style=&#34;top:-3.1130000000000004em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8304100000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;≥&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如，对于 7.0，我们可以表示为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;7.0&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mn&gt;3.5&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mn&gt;1.75&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;7.0×2^0\\
3.5 ×2^1\\
1.75×2^2
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;总归是可以表示到如上的标准形式。&lt;/p&gt;
&lt;h5 id=&#34;4整数与浮点数之间的赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4整数与浮点数之间的赋值&#34;&gt;#&lt;/a&gt; 4.	整数与浮点数之间的赋值&lt;/h5&gt;
&lt;p&gt;如果有以下程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int i = 5;
float f = i;
cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl;
----------
    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这其中变化是这样的：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 被解释为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;5.0&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;5.0×2^0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 随后又被解释为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2.5&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2.5×2^1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 接着又被解释为 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1.25&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1.25×2^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. 因此 exp = 129，xxx=0.25。&lt;/p&gt;
&lt;p&gt;如果有以下程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int i = 37;
float f = *(float*)&amp;amp;i; // 对i的地址求值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;i 表示 i 的地址，i 是 int 类型的数，因而 &amp;amp;i 是 int * 类型的指针。&lt;/p&gt;
&lt;p&gt;(float*)&amp;amp;i 表示将 int * 类型 转变为了 float * 类型，bit 位置不会发生改变，而因为 37 对应的 bit 位 都落在了 xxxxxx 的位置上，因而 exp = 0，这就是一个奇小无比的数，而不是 37.0&lt;/p&gt;
&lt;p&gt;如果有以下程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;float f = 7.0;
short s = *(short *)&amp;amp;f;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;float 是 4 字节的数，指针指向 float 的最高位。当利用上述代码进行类型强制转换的时候，因为 short 只有 2 字节，因而 float 只有高位的两字节被直接复制过来，定义成了一个 short 类型的数。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230921091608188.png&#34; alt=&#34;image-20230921091608188&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
