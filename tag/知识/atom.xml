<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://Yanagi-Kon.github.io</id>
    <title>亚纳奇的Blog • Posts by &#34;知识&#34; tag</title>
    <link href="http://Yanagi-Kon.github.io" />
    <updated>2023-10-16T06:31:00.000Z</updated>
    <category term="测试" />
    <category term="知识" />
    <category term="BUUCTF" />
    <category term="SUSCTF" />
    <category term="CTFHUB" />
    <category term="机器学习" />
    <category term="斯坦福编程范式CS107" />
    <category term="C++_Leetcode" />
    <category term="C++ Primer" />
    <category term="论文阅读" />
    <category term="test" />
    <entry>
        <id>http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/</id>
        <title>10.06 SUS培训</title>
        <link rel="alternate" href="http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/"/>
        <content type="html">&lt;h2 id=&#34;1006-sus培训&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1006-sus培训&#34;&gt;#&lt;/a&gt; 10.06 SUS 培训&lt;/h2&gt;
&lt;h3 id=&#34;基本知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本知识点&#34;&gt;#&lt;/a&gt; 基本知识点&lt;/h3&gt;
&lt;p&gt;1. 程序在 32 位中传递参数为 栈传递，在 64 位中通过寄存器传递&lt;/p&gt;
&lt;p&gt;2. 变量存储&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未初始化的全局变量 存放在 BSS 段&lt;/li&gt;
&lt;li&gt;初始化的全局变量存放在 Data 段&lt;/li&gt;
&lt;li&gt;函数存放在 Text 段&lt;/li&gt;
&lt;li&gt;局部变量存放在栈段&lt;/li&gt;
&lt;li&gt;主动申请的内存在堆部分&lt;/li&gt;
&lt;li&gt;read 函数等存放在 shared libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单栈溢出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单栈溢出&#34;&gt;#&lt;/a&gt; 简单栈溢出&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006153909131.png&#34; alt=&#34;image-20231006153909131&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006154804670.png&#34; alt=&#34;image-20231006154804670&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ret2text&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2text&#34;&gt;#&lt;/a&gt; ret2text&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006155442449.png&#34; alt=&#34;image-20231006155442449&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print name&lt;/code&gt;  将  &lt;code&gt;0x100&lt;/code&gt;  的数据拷贝到 只有 15 个字节的 &lt;code&gt;buf&lt;/code&gt;  中，就会溢出。读入超过 15 字节的数据，就会将下面的内容覆盖，把返回地址的值覆盖为 &lt;code&gt;shell()&lt;/code&gt;  函数的地址，就可以跳转到 &lt;code&gt;shell&lt;/code&gt;  完成攻击。&lt;/p&gt;
&lt;p&gt;一般的，先使用  &lt;code&gt;checksec&lt;/code&gt;  查看保护机制：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006155901627.png&#34; alt=&#34;image-20231006155901627&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NX&lt;/code&gt;  有效防止 &lt;code&gt;shellcode注入&lt;/code&gt; 攻击。 &lt;code&gt;PIE&lt;/code&gt;  地址随机化的保护。&lt;/p&gt;
&lt;p&gt;攻击代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006160640430.png&#34; alt=&#34;image-20231006160640430&#34;&gt;&lt;/p&gt;
&lt;p&gt;至少 15 个字节将 buf 覆盖掉，再写 8 个字节将 ebp 覆盖掉，最后再覆盖返回地址，覆盖为后门函数的返回值。但是这样会导致栈没有对齐，从而报错。于是利用查看 ret 的地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006161404605.png&#34; alt=&#34;image-20231006161404605&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 ret 填充到 8 结尾的内容中，这样 shell 会以 0 结尾开始运行从而对其 16 字节不报错。pwn 的解法很多，这只是本题其中一个解法。&lt;/p&gt;
&lt;h4 id=&#34;ret2shellcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2shellcode&#34;&gt;#&lt;/a&gt; ret2shellcode&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006161936187.png&#34; alt=&#34;image-20231006161936187&#34;&gt;&lt;/p&gt;
&lt;p&gt;本题目没有后门函数，需要自行编写 &lt;code&gt;shellcode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162147718.png&#34; alt=&#34;image-20231006162147718&#34;&gt;&lt;/p&gt;
&lt;p&gt;题目会将 buf 在栈上的地址告诉你，我们将 buf 的返回地址改为 buf 在栈上的开始地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162512175.png&#34; alt=&#34;image-20231006162512175&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006162919424.png&#34; alt=&#34;image-20231006162919424&#34;&gt;&lt;/p&gt;
&lt;p&gt;shellcode 可以用系统自动生成的，也可以用自己写的，编译 shellcode 的能力还是很重要的。可以在 shellcodes databsase 网站中学习。&lt;/p&gt;
&lt;h4 id=&#34;ret2libc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ret2libc&#34;&gt;#&lt;/a&gt; ret2libc&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006163151506.png&#34; alt=&#34;image-20231006163151506&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题开启了 NX 并且没有后门函数。使用 ldd，查看动态库发现有 libc，于是该题从 libc 中开始找。libc 的地址是随机的，但是 write 函数的地址在 libc 中是相对的，知道了就可以获得 libc 的地址。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006164647386.png&#34; alt=&#34;image-20231006164647386&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;学习资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#学习资源&#34;&gt;#&lt;/a&gt; 学习资源&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231006164824858.png&#34; alt=&#34;image-20231006164824858&#34;&gt;&lt;/p&gt;
</content>
        <category term="知识" />
        <updated>2023-10-16T06:31:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/</id>
        <title>IDA 使用</title>
        <link rel="alternate" href="http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h2 id=&#34;ida-使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ida-使用&#34;&gt;#&lt;/a&gt; IDA 使用&lt;/h2&gt;
&lt;p&gt;建议去看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWVtNHkxUDdQTS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9N2Q5NDgxMDFhMGVkNDczNzcyZTU4ZWVhMzdjNjFmOTQ=&#34;&gt;视频&lt;/span&gt;，讲的很详细，很好。&lt;/p&gt;
&lt;p&gt;一般先找程序入口点，在  &lt;code&gt;Exports&lt;/code&gt;  里面：&lt;/p&gt;
&lt;p&gt;![image-20231005103252765](IDA 使用 /image-20231005103252765.png)&lt;/p&gt;
&lt;p&gt;双击该内容  &lt;code&gt;start&lt;/code&gt;  就可以直接定位到程序中的位置：&lt;/p&gt;
&lt;p&gt;![image-20231005103353127](IDA 使用 /image-20231005103353127.png)&lt;/p&gt;
&lt;p&gt;一般的，我们可以在  &lt;code&gt;option -&amp;gt; general&lt;/code&gt;  中将  &lt;code&gt;Stack Pointer&lt;/code&gt;  和  &lt;code&gt;Auto comments&lt;/code&gt;  打开，可以方便我们更好的查看源码的对应：&lt;/p&gt;
&lt;p&gt;![image-20231005103646708](IDA 使用 /image-20231005103646708.png)&lt;/p&gt;
&lt;p&gt;空格键可以切换视图效果：&lt;/p&gt;
&lt;p&gt;![image-20231005103807473](IDA 使用 /image-20231005103807473.png)&lt;/p&gt;
&lt;p&gt;切换过来后可以看到前面的地址以及段名称，如 &lt;code&gt;.text:00000000004010B0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对着你想要反编译的内容 按  &lt;code&gt;F5&lt;/code&gt; ，进行反编译：&lt;/p&gt;
&lt;p&gt;![image-20231005104011702](IDA 使用 /image-20231005104011702.png)&lt;/p&gt;
&lt;p&gt;可以在上面的页面中双击 main 进入到 main 函数中。&lt;/p&gt;
&lt;p&gt;右键  &lt;code&gt;Collapse declaration&lt;/code&gt;  可以折叠变量，方便查看源码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt;  键可以用于重命名函数的变量名&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;  键可以转换为字符模式显示&lt;/p&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt;  以数字或 16 进制显示&lt;/p&gt;
</content>
        <category term="知识" />
        <updated>2023-10-05T09:06:00.000Z</updated>
    </entry>
</feed>
