{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog • All posts by \"知识\" tag",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/",
            "url": "http://yanagi-kon.github.io/2023/10/16/10.06%20SUS%E5%9F%B9%E8%AE%AD/",
            "title": "10.06 SUS培训",
            "date_published": "2023-10-16T06:31:00.000Z",
            "content_html": "<h2 id=\"1006-sus培训\"><a class=\"markdownIt-Anchor\" href=\"#1006-sus培训\">#</a> 10.06 SUS 培训</h2>\n<h3 id=\"基本知识点\"><a class=\"markdownIt-Anchor\" href=\"#基本知识点\">#</a> 基本知识点</h3>\n<p>1. 程序在 32 位中传递参数为 栈传递，在 64 位中通过寄存器传递</p>\n<p>2. 变量存储</p>\n<ul>\n<li>未初始化的全局变量 存放在 BSS 段</li>\n<li>初始化的全局变量存放在 Data 段</li>\n<li>函数存放在 Text 段</li>\n<li>局部变量存放在栈段</li>\n<li>主动申请的内存在堆部分</li>\n<li>read 函数等存放在 shared libraries</li>\n</ul>\n<h3 id=\"简单栈溢出\"><a class=\"markdownIt-Anchor\" href=\"#简单栈溢出\">#</a> 简单栈溢出</h3>\n<p><img data-src=\"image-20231006153909131.png\" alt=\"image-20231006153909131\"></p>\n<p><img data-src=\"image-20231006154804670.png\" alt=\"image-20231006154804670\"></p>\n<h4 id=\"ret2text\"><a class=\"markdownIt-Anchor\" href=\"#ret2text\">#</a> ret2text</h4>\n<p><img data-src=\"image-20231006155442449.png\" alt=\"image-20231006155442449\"></p>\n<p><code>print name</code>  将  <code>0x100</code>  的数据拷贝到 只有 15 个字节的 <code>buf</code>  中，就会溢出。读入超过 15 字节的数据，就会将下面的内容覆盖，把返回地址的值覆盖为 <code>shell()</code>  函数的地址，就可以跳转到 <code>shell</code>  完成攻击。</p>\n<p>一般的，先使用  <code>checksec</code>  查看保护机制：</p>\n<p><img data-src=\"image-20231006155901627.png\" alt=\"image-20231006155901627\"></p>\n<p><code>NX</code>  有效防止 <code>shellcode注入</code> 攻击。 <code>PIE</code>  地址随机化的保护。</p>\n<p>攻击代码如下：</p>\n<p><img data-src=\"image-20231006160640430.png\" alt=\"image-20231006160640430\"></p>\n<p>至少 15 个字节将 buf 覆盖掉，再写 8 个字节将 ebp 覆盖掉，最后再覆盖返回地址，覆盖为后门函数的返回值。但是这样会导致栈没有对齐，从而报错。于是利用查看 ret 的地址：</p>\n<p><img data-src=\"image-20231006161404605.png\" alt=\"image-20231006161404605\"></p>\n<p>将 ret 填充到 8 结尾的内容中，这样 shell 会以 0 结尾开始运行从而对其 16 字节不报错。pwn 的解法很多，这只是本题其中一个解法。</p>\n<h4 id=\"ret2shellcode\"><a class=\"markdownIt-Anchor\" href=\"#ret2shellcode\">#</a> ret2shellcode</h4>\n<p><img data-src=\"image-20231006161936187.png\" alt=\"image-20231006161936187\"></p>\n<p>本题目没有后门函数，需要自行编写 <code>shellcode</code></p>\n<p><img data-src=\"image-20231006162147718.png\" alt=\"image-20231006162147718\"></p>\n<p>题目会将 buf 在栈上的地址告诉你，我们将 buf 的返回地址改为 buf 在栈上的开始地址：</p>\n<p><img data-src=\"image-20231006162512175.png\" alt=\"image-20231006162512175\"></p>\n<p><img data-src=\"image-20231006162919424.png\" alt=\"image-20231006162919424\"></p>\n<p>shellcode 可以用系统自动生成的，也可以用自己写的，编译 shellcode 的能力还是很重要的。可以在 shellcodes databsase 网站中学习。</p>\n<h4 id=\"ret2libc\"><a class=\"markdownIt-Anchor\" href=\"#ret2libc\">#</a> ret2libc</h4>\n<p><img data-src=\"image-20231006163151506.png\" alt=\"image-20231006163151506\"></p>\n<p>该题开启了 NX 并且没有后门函数。使用 ldd，查看动态库发现有 libc，于是该题从 libc 中开始找。libc 的地址是随机的，但是 write 函数的地址在 libc 中是相对的，知道了就可以获得 libc 的地址。</p>\n<p><img data-src=\"image-20231006164647386.png\" alt=\"image-20231006164647386\"></p>\n<h3 id=\"学习资源\"><a class=\"markdownIt-Anchor\" href=\"#学习资源\">#</a> 学习资源</h3>\n<p><img data-src=\"image-20231006164824858.png\" alt=\"image-20231006164824858\"></p>\n",
            "tags": [
                "知识"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "url": "http://yanagi-kon.github.io/2023/10/05/IDA%20%E4%BD%BF%E7%94%A8/",
            "title": "IDA 使用",
            "date_published": "2023-10-05T09:06:00.000Z",
            "content_html": "<h2 id=\"ida-使用\"><a class=\"markdownIt-Anchor\" href=\"#ida-使用\">#</a> IDA 使用</h2>\n<p>建议去看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWVtNHkxUDdQTS8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9N2Q5NDgxMDFhMGVkNDczNzcyZTU4ZWVhMzdjNjFmOTQ=\">视频</span>，讲的很详细，很好。</p>\n<p>一般先找程序入口点，在  <code>Exports</code>  里面：</p>\n<p>![image-20231005103252765](IDA 使用 /image-20231005103252765.png)</p>\n<p>双击该内容  <code>start</code>  就可以直接定位到程序中的位置：</p>\n<p>![image-20231005103353127](IDA 使用 /image-20231005103353127.png)</p>\n<p>一般的，我们可以在  <code>option -&gt; general</code>  中将  <code>Stack Pointer</code>  和  <code>Auto comments</code>  打开，可以方便我们更好的查看源码的对应：</p>\n<p>![image-20231005103646708](IDA 使用 /image-20231005103646708.png)</p>\n<p>空格键可以切换视图效果：</p>\n<p>![image-20231005103807473](IDA 使用 /image-20231005103807473.png)</p>\n<p>切换过来后可以看到前面的地址以及段名称，如 <code>.text:00000000004010B0</code></p>\n<p>对着你想要反编译的内容 按  <code>F5</code> ，进行反编译：</p>\n<p>![image-20231005104011702](IDA 使用 /image-20231005104011702.png)</p>\n<p>可以在上面的页面中双击 main 进入到 main 函数中。</p>\n<p>右键  <code>Collapse declaration</code>  可以折叠变量，方便查看源码。</p>\n<p><code>N</code>  键可以用于重命名函数的变量名</p>\n<p><code>R</code>  键可以转换为字符模式显示</p>\n<p><code>H</code>  以数字或 16 进制显示</p>\n",
            "tags": [
                "知识"
            ]
        }
    ]
}