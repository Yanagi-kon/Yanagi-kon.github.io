{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog • All posts by \"斯坦福编程范式cs107\" tag",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_27/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_27/",
            "title": "斯坦福编程范式CS107_27",
            "date_published": "2024-01-03T08:03:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_27\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_27\">#</a> 斯坦福编程范式 CS107_27</h1>\n<h2 id=\"讲讲-haskell\"><a class=\"markdownIt-Anchor\" href=\"#讲讲-haskell\">#</a> 讲讲 Haskell</h2>\n<p>它和 Lisp 和 Scheme 来自同一家族，是一种函数性语言。Haskell 和 JAVA 一样安全，它很难使程序通过编译然后失败。它像 C 一样块，但是没有 C 那么块。像 python 一样有趣。</p>\n<p>用 Haskell 实现斐波那契函数</p>\n<figure class=\"highlight haskell\"><figcaption data-lang=\"haskell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hvariable\">fib</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token builtin\">zipWith</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token hvariable\">fib</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tail</span> <span class=\"token hvariable\">fib</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"haskell中的类型\"><a class=\"markdownIt-Anchor\" href=\"#haskell中的类型\">#</a> Haskell 中的类型</h3>\n<p>Haskell 中的函数也有类型。</p>\n<figure class=\"highlight haskell\"><figcaption data-lang=\"haskell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hvariable\">addOne</span> <span class=\"token hvariable\">num</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">num</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token hvariable\">addOne</span><span class=\"token operator\">::</span><span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token hvariable\">add</span> <span class=\"token hvariable\">val1</span> <span class=\"token hvariable\">val2</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">val1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">val2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token hvariable\">add</span><span class=\"token operator\">::</span><span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></pre></td></tr></table></figure><p>(不听了)</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_15/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_15/",
            "title": "斯坦福编程范式CS107_15",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_15\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_15\">#</a> 斯坦福编程范式 CS107_15</h1>\n<h2 id=\"接着上一次的卖票问题\"><a class=\"markdownIt-Anchor\" href=\"#接着上一次的卖票问题\">#</a> 接着上一次的卖票问题</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> numAgents <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> numTickets <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>agent <span class=\"token operator\">&lt;=</span> numAgents<span class=\"token punctuation\">;</span>agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">,</span>numTickets<span class=\"token operator\">/</span>numAgents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agentID<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> numTicketsToSell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>numTicketsToSell <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Agent %d sell a ticket \\n\"</span><span class=\"token punctuation\">,</span>agentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        numTicketsToSell<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Agent %d All done!\\n\"</span><span class=\"token punctuation\">,</span>agentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述的这个程序是顺序执行的，在售货员 2 号行动之前，售货员 1 号会先卖完他的 15 张票。但是在售票点中，我想要看到的是所有的售票员都在同时卖票，是竞争性的，而不是合作性的来卖一共 150 张票（哈哈哈哈）。我们想要 10 名售票员按照相同的步骤来销售这些票，并且他们看起来是同时在做这些事。</p>\n<p>我们可以使用一个线程包和库来解决上述问题。</p>\n<p>卖票的函数不需要任何改变，我们主要对主函数进行修改，使用一个不一样的 <code>for</code>  循环。如下所示。</p>\n<p><code>InitThreadPackage</code>  这里的 <code>false</code>  表示请不要打印任何东西，如果传入 <code>True</code> ，它就会打印出所有线程的信息。 <code>sprintf</code>  是输出到字符串缓冲区中而不是屏幕。这里的 <code>name</code>  指的是线程的名字， <code>SellTickets</code>  是传入的单一线程需要执行的函数的地址。 <code>TreadNew</code>  还需要知道执行函数的参数个数，在这里就是 2，以及传入参数。</p>\n<p>在这里 <code>SellTickets</code>  并不会执行，它所作的只是一个入口。 <code>RunAllThreads</code>  将所有线程开始执行，当所有线程执行完毕后，它会将运行结果传递给程序的最后一部分。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> numAgents <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> numTickets <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">InitThreadPackage</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> agent <span class=\"token operator\">&lt;=</span> numAgents<span class=\"token punctuation\">;</span> agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"Agent %d turned\"</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>SellTickets<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">,</span>numTickets<span class=\"token operator\">/</span>numAgents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">RunAllThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ThreadSleep</code>  进程休眠，单位是毫秒。下面添加的改动意味着，线程执行 <code>SellTickets</code>  时，会有百分之十的概率被强制暂停运行。这里加入这部分内容，引入了随机化，是为了模拟现实世界，每个人卖票的能力不同，运气好的能在这一轮中卖的更多。</p>\n<p>C 中的线程库采用的是一种简单的轮换策略，系统会为每个线程分配时间片，每个线程都是平等的。JAVA 中可以指定线程不同的等级，等级高的具有优先执行的权力。在这里 10 个线程共用一份代码。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agentID<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> numTicketsToSell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>numTicketsToSell <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Agent %d sell a ticket \\n\"</span><span class=\"token punctuation\">,</span>agentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        numTicketsToSell<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RandomChance</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">ThreadSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Agent %d All done!\\n\"</span><span class=\"token punctuation\">,</span>agentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更改为不固定每个人卖票的数量，只要总数不超过需要卖的数量即可。使用指针使卖票的人员能够知道主函数中还剩多少张票</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agentID<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numTicketsp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时主函数也要相应改变。这时假设还有 1 张票，售票员 1 一看 <code>1&gt;0</code> ，所以他打算卖了这张票，结果他执行了卖票操作，但是这个 <code>(*numTicketsp)--</code>  操作没有执行完，就突然被退出占用了；于是卖票员 2 来了，他一看，哦还有 1 张票，我把他卖了，于是他尝试去卖这张票，但是还是被立即暂停使用处理器了。同样的事发生在其余的售票员身上，每个人都试图卖掉这张票。当他们再重新获得处理器的使用权时，它们不会重新检查之前操作的执行过程，毕竟这不是概率编码。因此他们都试图减少这个共享全局变量，因此这个变量最终有可能变成 <code>-9</code> ！</p>\n<p>这是并发的一个小问题。如果他们不注意操作这些数据的方式，执行操作的过程中退出，并依据很快就会过时的数据进行判断，这样当他失去处理器的控制权的时候，全局数据的完整性就被破坏了。 <code>while(*numTicketsp &gt; 0)&#123; (*numTicketsp)--; </code>  这部分被称为临界区域。解决问题的方式就是当一个进程在处理这个临界区域内的操作时，其余进程不应该有权利进入这个临界区域进行处理，那么就需要有一些语句在临界区域前以便阻塞其他进程，即二进制的<strong>锁</strong>。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> numAgents <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> numTickets <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">InitThreadPackage</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> agent <span class=\"token operator\">&lt;=</span> numAgents<span class=\"token punctuation\">;</span> agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"Agent %d turned\"</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>SellTickets<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>numTickets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">RunAllThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"下面介绍信号量\"><a class=\"markdownIt-Anchor\" href=\"#下面介绍信号量\">#</a> 下面介绍信号量</h2>\n<p><code>SemaphoreNew</code>  信号量的第一个参数先不管，第二个参数是一个整数。在编程中，Semaphore 变量作为一个非负整数发挥作用，支持 <code>+1</code>  和 <code>-1</code>  原子操作功能的变量。 <code>SemaphoreWait(lock)</code>  会改变 <code>lock</code>  这个变量， <code>-1</code> 。 <code>SemaphoreSignal(lock)</code>  也会接管 Semaphore 变量并 <code>+1</code> 。如果执行 <code>SemaphoreWait</code>  的时候， <code>Semaphore</code>  变量已经是 0 了，因为不允许 <code>Semaphore</code>  是负数，那么线程它就会做一个阻塞的动作，暂停占用处理器资源，因为它现在处于等待状态，临界区有其他线程在操作，需要等一个 <code>signal</code>  操作， <code>lock</code>  从 0 变为 1，它才能再进入临界区。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> numAgents <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> numTickets <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Semaphore lock <span class=\"token operator\">=</span> <span class=\"token function\">SemaphoreNew</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">InitThreadPackage</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> agent <span class=\"token operator\">&lt;=</span> numAgents<span class=\"token punctuation\">;</span> agent<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"Agent %d turned\"</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>SellTickets<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>agent<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>numTickets<span class=\"token punctuation\">,</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">RunAllThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agentID<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">,</span>Semaphore lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numTicketsp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Agent %d sell a ticket \\n\"</span><span class=\"token punctuation\">,</span>agentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 进入临界区处理，发现票卖完了，退出循环了，再把 lock+1，表示退出临界区了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我把  <code>Semaphore lock = SemaphoreNew(???,1)</code>  写成了   <code>Semaphore lock = SemaphoreNew(???,0)</code> ，那么进程会一直阻塞下去。这就是死锁现象，10 个进程都在等某一个进程从临界区出来，但其实没人再临界区，也就不会有进程从临界区出来。如果写成了 <code>Semaphore lock = SemaphoreNew(???,2)</code> ，那这个对临界区的锁就形同虚设。（当然也有可能其他地方， <code>Semaphore</code>  变量初始可以不一定是 1）。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_21/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_21/",
            "title": "斯坦福编程范式CS107_21",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_21\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_21\">#</a> 斯坦福编程范式 CS107_21</h1>\n<h2 id=\"将之前c写的一个函数用scheme编程\"><a class=\"markdownIt-Anchor\" href=\"#将之前c写的一个函数用scheme编程\">#</a> 将之前 C++ 写的一个函数用 Scheme 编程</h2>\n<p>使用 scheme 实现如下内容：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">double-all</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">incr-all</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于这种功能，不需要迭代，只需要如下代码就可以实现：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> x <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">incr</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 scheme 中还有一个内置函数被称为 Map，它可以接收 2 个或多个参数，并且它的第一个参数可以是之前定义好的函数的名字，第二个参数是你要连接的列表。如下所示。map 是递归的对参数列表中的每一个元素进行相应的函数操作。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> double <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> incr <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> car <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">8</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">4</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> cdr <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">8</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 map 函数处理多元参数的函数。如 cons，那么我们需要提供两个列表，第一个列表中的元素都是 cons 的第一个参数，第二个列表中的元素都是 cons 的第二个参数。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> cons <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token number\">2</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> + <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>假设你传入的参数比如列表长度不一致，map 也不会生气，它会在最短的对齐结束后就结束运行。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> + <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"下面来实现这样的一个map函数\"><a class=\"markdownIt-Anchor\" href=\"#下面来实现这样的一个map函数\">#</a> 下面来实现这样的一个 map 函数</h2>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">my-unary-map</span> fn seq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token function\">my-unary-map</span> fn <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"eval函数和apply函数\"><a class=\"markdownIt-Anchor\" href=\"#eval函数和apply函数\">#</a> eval 函数和 apply 函数</h2>\n<h3 id=\"eval\"><a class=\"markdownIt-Anchor\" href=\"#eval\">#</a> eval</h3>\n<p>eval 函数是每次你写好 scheme 语句后，敲回车都会执行的函数。它的作用如下所示。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span>+ <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span>+ <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr></table></figure><p>eval 的应用场景一般是 apply 无法使用的时候，apply 后面无法跟 define、and、or 这一类特殊的函数。</p>\n<h3 id=\"apply\"><a class=\"markdownIt-Anchor\" href=\"#apply\">#</a> apply</h3>\n<p>apply 和 eval 的区别在于，apply 允许你指定用哪一个函数来处理后面的那些参数。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> + <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr></table></figure><p>让我们使用 apply 写一个计算所有数字平均值的函数。假设都是 double 类型的，那样就不需要去处理小数点之类的问题：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">average</span> num-list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> + num-list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token builtin\">length</span> num-listt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"使用map和apply来消除嵌套列表问题\"><a class=\"markdownIt-Anchor\" href=\"#使用map和apply来消除嵌套列表问题\">#</a> 使用 map 和 apply 来消除嵌套列表问题</h2>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果传入的参数不是一个列表，那么我们就把它单独放在一个列表中，便于后面我们使用 append 对所有列表进行拼接。后面的是一个递归使用，其中 map flatten seq 递归到最后应该是多个列表，我们再使用 apply 强行将 append 安排在这些列表的最前面，形成了 <code>append '(1 2) '(3 4 5) '(10)</code>  这样的结构，最终合成一个列表 <code>'(1 2 3 4 5 10)</code></p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span> seq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">not</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list?</span> seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> append</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> flatten seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"构建一个广义翻译的函数\"><a class=\"markdownIt-Anchor\" href=\"#构建一个广义翻译的函数\">#</a> 构建一个广义翻译的函数</h2>\n<p>作用：我们希望它能接收一个参数长度为 n 的一个列表，然后产生另一个 n 个点的列表，每个点都偏移了 delta 的量。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">translate</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">5</span> <span class=\"token number\">8</span> <span class=\"token number\">11</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">102</span> <span class=\"token number\">105</span> <span class=\"token number\">108</span> <span class=\"token number\">111</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>构造：通过 lambda 构造了一个匿名函数，在这个函数中，对 points 的每一个元素都 + delta 值。lambda 函数已经很熟悉了，可以参考知乎的文章。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">translate</span> points delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ponits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述函数等价于</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">translate</span> seq delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shift-by</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> shift-by seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>lambda 函数的简单例子和它的等价形式：在使用 lambda 函数后，我们就可以更清晰的明白 <code>sum</code>  实际上是可以直接替换成  <code>lambda(x y)(+ x y)</code>  的，而这也是 scheme 中其他函数在被使用时真正的使用过程。即简单的符号替换。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span> x y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>==================</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> sum</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Scheme 语言全是关于符号的，符号评估，函数评估。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_19/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_19/",
            "title": "斯坦福编程范式CS107_19",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_19\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_19\">#</a> 斯坦福编程范式 CS107_19</h1>\n<h2 id=\"介绍scheme\"><a class=\"markdownIt-Anchor\" href=\"#介绍scheme\">#</a> 介绍 Scheme</h2>\n<h3 id=\"程序范式\"><a class=\"markdownIt-Anchor\" href=\"#程序范式\">#</a> 程序范式</h3>\n<p>在 C 中我们大多数是采用如下方式对对象进行操作，对过程进行编程。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vector v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">VectorNew</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">VectorInsert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">VectorSort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 C++ 中则是面向某一个对象的。</p>\n<pre><code class=\"language-c++\">Vector&lt;int&gt; v;\nv.pushback(4);\nv.erase(v.begin());\n</code></pre>\n<h3 id=\"函数范式\"><a class=\"markdownIt-Anchor\" href=\"#函数范式\">#</a> 函数范式</h3>\n<p>函数听起来和程序差不多，但如果你了解程式 ( <code>procedure</code> ) 范式的纯粹定义，那它就是一块被调用的代码，我并不关心它的返回值。而函数范式则是面向返回值的。这里的典型语言就是  <code>Scheme</code> ，Scheme 等函数范式语言强调的是，你给一个数据集到主函数，主函数应该为你做一切，而那个返回值就是所有你所感兴趣的东西。</p>\n<p>比如一个将摄氏度转换为华氏度的函数，在 Scheme 中不管 temp 是什么，都会直接替换掉式子中的 temp 并进行算数。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> celsiums->fahrenheit<span class=\"token punctuation\">(</span><span class=\"token function\">temp</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">(</span><span class=\"token number\">+32</span><span class=\"token punctuation\">(</span><span class=\"token function\">*1.8</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果我使用 shell 来使用这个函数，传入 100，经过计算，他就会返回一个 212。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">celsiums->fahrenheit</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">212</span></pre></td></tr></table></figure><p>Scheme 中的函数 Car，CDR，CONS，分别表示取列表中的第一个，不取列表中的第一个，将元素和一个列表合并成新的列表。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是 CONS 只能是第一个元素是单个，第二个元素是列表，才能合成一个新的列表。我们可以使用 append 来实现。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">append</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">append</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>构造一个 sum-of 函数，包含一个递归关系：如果列表 <code>numlist</code>  是空的就返回 0</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">sum-of</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> sum-of <span class=\"token punctuation\">(</span><span class=\"token function\">numlist</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> numlist<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> numlist<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token function\">sum-of</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> numlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_24/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_24/",
            "title": "斯坦福编程范式CS107_24",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_24\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_24\">#</a> 斯坦福编程范式 CS107_24</h1>\n<h2 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h2>\n<p>Python 是典型的脚本语言 (Scripting language)， 它也是面向对象的、函数的 。Python 是动态的，C 和 C<ins> 不是，C 和 C</ins> 使用大量时间进行编译，在运行时只有非常少的类型信息。Scheme 和 Python 都保持运行时，存在的每一个数据段的类型信息，你实际上可以查询数据类型，只要你想。</p>\n<p>和 Scheme 相似</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span><span class=\"token string\">\"Hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"Hello\"</span></pre></td></tr></table></figure><p>Python 使用 list 的一些操作</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> seq<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> seq</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>它在处理一些句法的时候更加的优雅，相较于 C 或 JAVA。Python 中以方括号括起来的被称为列表，以圆括号括起来的被称为数组，数组不想列表那样可以随意改变，它是只读的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> seq<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TypeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'tuple'</span> <span class=\"token builtin\">object</span> does <span class=\"token keyword\">not</span> support item assignment</pre></td></tr></table></figure><h2 id=\"写函数\"><a class=\"markdownIt-Anchor\" href=\"#写函数\">#</a> 写函数</h2>\n<p>我们想要构造一个 gatherDivisors 函数，实现如下功能：传入的数被特定的数来除并得到正整数，比如 24 可以分别被 24，12，8，6，4，2，1 除，得到 1，2，3，4，6，8，12，24.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span>gatherDivisors<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>下面来实现这个函数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gatherDivisors</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    divisors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> div <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>number<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> number<span class=\"token operator\">%</span>div <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            divisors<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> divisors</pre></td></tr></table></figure><p>我们将这个函数写在 <span class=\"exturl\" data-url=\"aHR0cDovL2Rpdmlzb3JzLnB5\">divisors.py</span> 文件中，在控制台中，如果我们想要使用，就需要用到</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> divisors</pre></td></tr></table></figure><p>但是这个时候如果我们使用 <code>gatherDivisors(24)</code>  仍然会报错，因为导入这个包不代表着那里面所有预定义的东西突然连接到当前环境下，所以如果你需要调用 <code>gatherDivisors</code> ，有两种方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"第一种方法\"\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> divisors</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>divisors<span class=\"token punctuation\">.</span>gatherDivisors<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"第二种方法\"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> divisors <span class=\"token keyword\">import</span> gatherDivisors</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gatherDivisors<span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h2>\n<p>字典是 python 中一个重要的数据结构。字典是完全支持哈希表的。字典是 python 中很容易最有延展性的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span>student <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span>student<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Linda\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Linda'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span>student<span class=\"token punctuation\">[</span><span class=\"token string\">'gpa'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.98</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Linda'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'gpa'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3.98</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> student<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">'Linda'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> student<span class=\"token punctuation\">[</span><span class=\"token string\">'gpa'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4.5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> student</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Linda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gpa'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4.5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_22/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_22/",
            "title": "斯坦福编程范式CS107_22",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_22\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_22\">#</a> 斯坦福编程范式 CS107_22</h1>\n<p>今天讲一下 lambda 函数的思想和几个显著的例子。</p>\n<h2 id=\"第一个问题\"><a class=\"markdownIt-Anchor\" href=\"#第一个问题\">#</a> 第一个问题</h2>\n<p>几个谨慎的数学问题，使用 scheme 解决。</p>\n<h3 id=\"power-set\"><a class=\"markdownIt-Anchor\" href=\"#power-set\">#</a> power-set</h3>\n<p>power-set 是一个包含所有子集的集合。例如对于集合 <code>(1 2 3)</code> ，我要列出它的所有子集，我就必须一一列举。最终我要得到的是所有子集的集合，即  <code>power-set</code></p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们把上面的这个列表以以下方式进行排列：尝试找出相关的规律</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以看出，当以上述方式进行排列时，第二列的所有内容就是第一列的所有元素 cons 上一个 1。</p>\n<p>函数的实现过程如下所示。</p>\n<p>先看 lambda 函数， <code>lambda (subset)  (cons (car set) subset))</code> ，函数体部分为 <code>cons (car set) subset</code>  在上述例子中，即用 cons 将 1 加入到第一行的每个元素中，得到第二行的内容；对于 <code>append (ps (cdr set)</code>  即得到我们第一行的内容，并用 append 将其与第二行的内容进行连接形成最终的集合。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps</span> set<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">append</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">subset</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> set<span class=\"token punctuation\">)</span> subset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                   <span class=\"token punctuation\">(</span><span class=\"token function\">ps</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>整个流程大概如下：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> + <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> + <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> => <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这个例子中，我们调用了两次的 <code>ps (cdr set)</code>  ，能不能只调用一次就实现这个函数？</p>\n<h4 id=\"改进\"><a class=\"markdownIt-Anchor\" href=\"#改进\">#</a> 改进</h4>\n<p>在 Scheme 中有一种结构被称为 let 绑定，它和 lambda 很像，他对于调用内部函数很有用。</p>\n<p>使用 let 将 <code>ps-rest</code>  当作一个符号，只用调用一次  <code>ps(cdr set)</code> ，节省了大量的时间。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps</span> set<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps-rest</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">append</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps-rest</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">subset</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                      <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> set<span class=\"token punctuation\">)</span> subset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    ps-set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>let</code>  结构上本质是这样的</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span> expr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token function\">y</span> expr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token function\">z</span> expr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  fun<span class=\"token punctuation\">(</span><span class=\"token function\">x,y,z,....</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"permute\"><a class=\"markdownIt-Anchor\" href=\"#permute\">#</a> permute</h3>\n<p>我们希望 <code>permute</code>  能够输出数字的所有排列方式，如：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">permute</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">1</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从输出案例我们可以大致明白我们的函数要实现的方式。第一行全部是 1 打头的，第二行全部是 2 打头的… 以此类推。而头部之后的内容就是去掉头部元素后其余元素的全排列。去掉第一个元素的函数被构造为 <code>remove</code> 。</p>\n<p>我们使用 map 进行一种新的操作方式，实现让 1 通过 map 转换成所有以 1 打头排列出来的列表，以此类推。如下</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> =></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">1-perms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">2-perms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">3-perms</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面开始函数的实现。对于下面的函数我们先看它每一次递归的思想。我们将整个过程拆解成了，首元素 + 其余元素排列组合的形式，所以 <code>apply append</code>  是为了将首元素和后面部分进行拼接的过程。两个 lambda 是用来获取以 1 打头的所有排列，为了得到这样的结果，我们必须递归产生所所有不包含 1 的排列，即  <code>permute(remove items elem)</code> , 随后我们使用 <code>cons elem permutation</code>  将 1 重新加入到 不包含 1 的排列的首位。</p>\n<p>第一个 map 是把某些东西关联上，然后能产生单个元素，也就是 items。</p>\n<p>最终递归重点是空集合。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">permute</span> items<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> append</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">elem</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">permutation</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> elem permutation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                     <span class=\"token punctuation\">(</span><span class=\"token function\">permute</span> <span class=\"token punctuation\">(</span><span class=\"token function\">remove</span> items elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里为什么第一个 <code>map</code>  传入的是  <code>items</code> ，首先我们知道 <code>map</code>  的计算特点：如 <code>kawa</code> 4️⃣所示，由于 <code>cons</code>  函数的特点是一个元素和一个列表进行结合，所以第一个参数尽管是列表， <code>map</code>  还是将其一个元素一个元素的拿出来按次序和后面的列表进行 <code>cons</code>  操作。所以这里的 lambda 函数也是如此，每次从 <code>items</code>  中拿出一个变量进行操作，即实现以 1、2、3 开头的排列。</p>\n<p><img data-src=\"image-20231222170121465.png\" alt=\"image-20231222170121465\"></p>\n<p><img data-src=\"image-20231222165150323.png\" alt=\"image-20231222165150323\"></p>\n<h2 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h2>\n<p>当我们输入以下内容第一行和第二行是等价的。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>cons 作为 scheme 的一个符号，是依附到一段代码上的，并且解析器很熟悉，知道怎么分配一段内存给这里的东西，在分配好了之后，它还要知道在这儿放什么，在那儿放什么。比如 <code>cons 3 '()</code> ，它就知道 <code>3</code>  方在 <code>car</code>  领域， <code>'()</code>  放在 <code>cdr</code>  领域。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_23/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_23/",
            "title": "斯坦福编程范式CS107_23",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_23\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_23\">#</a> 斯坦福编程范式 CS107_23</h1>\n<h2 id=\"scheme内存模型\"><a class=\"markdownIt-Anchor\" href=\"#scheme内存模型\">#</a> Scheme 内存模型</h2>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于上述的数据，他的内存结构如下所示。</p>\n<p><img data-src=\"image-20231224184041271.png\" alt=\"image-20231224184041271\"></p>\n<p>当使用以下命令时，scheme 会创建一个全局符号表，这个东西交  <code>seq</code> ，它会与这个变量关联起来。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> seq <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231224184242274.png\" alt=\"image-20231224184242274\"></p>\n<p>当使用 <code>cons</code>  命令时，如下所示。cons 在合并两个列表的时候其实是构造了一个新列表，如下图所示。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231224203352575.png\" alt=\"image-20231224203352575\"></p>\n<p>因此，输出的结果是如下所示的。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面让我们用<strong>两种方式</strong>构建一个列表：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"第一种方法\"><a class=\"markdownIt-Anchor\" href=\"#第一种方法\">#</a> 第一种方法</h3>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这种方法和上面描述  <code>cons</code>  的使用大差不差，我们主要来介绍第二种方法。</p>\n<h3 id=\"第二种方法\"><a class=\"markdownIt-Anchor\" href=\"#第二种方法\">#</a> 第二种方法</h3>\n<p>使用如下内存存储方式：</p>\n<p><img data-src=\"image-20231224204718717.png\" alt=\"image-20231224204718717\"></p>\n<p>如果想要构造如上所示的列表，那么我们要用到一点技巧。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> x x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过上述代码我们构造了一个列表，并且将这个列表绑定到另一个上面，该变量在该定义中用到两次。最终使  <code>car</code>  和  <code>cdr</code>  域都指向同一个内容。</p>\n<h2 id=\"改造我们之前的只能处理一元的map\"><a class=\"markdownIt-Anchor\" href=\"#改造我们之前的只能处理一元的map\">#</a> 改造我们之前的只能处理一元的 map</h2>\n<p>先把之前的那个一元的 map 重写一遍：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unary-map</span> fn seq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token function\">unary-map</span> fn</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                       <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了使这个 <code>map</code>  能够容纳多个参数，我们需要使用 <code>...</code>  在 <code>scheme</code>  中。</p>\n<p>如下例子所示，这个函数 <code>bar</code>  在接受完参数 a、b、c 之后，剩下的所有参数都需要以列表的形式存放在参数 d 中再传入给函数。随后我们再用 <code>list</code>  将这些参数存放在一个列表中，我们看看随意调用会发生什么。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bar</span> a b c . d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> a b c d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个例子显示出点在 scheme 中的具体用法。</p>\n<p>下面我们来构造我们的一般性的 map 函数，它会需要用到我们之前的一元参数的 map 函数，所以我们在开头提前把它写了出来。</p>\n<h3 id=\"map的实现思想\"><a class=\"markdownIt-Anchor\" href=\"#map的实现思想\">#</a> map 的实现思想</h3>\n<p>我们最终的 map 要实现 scheme 中一模一样的功能：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> car <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> + <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">111</span> <span class=\"token number\">422</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> * <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>简单起见。我们先假设，first-list 这一列表，与 other-lists 里面的所有列表长度相同。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> fn first-list . other-lists<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> first-list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> fn <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> first-list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unary-map</span> car other-lists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token builtin\">apply</span> map</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                   <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> fn</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                         <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> first-list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                               <span class=\"token punctuation\">(</span><span class=\"token function\">unary-map</span> cdr other-lists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们来举一个例子来对上述复杂的代码进行测试。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> list <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">10</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">20</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token number\">30</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>第一次调用第一个接收第一块数据 <code>(1 10 100)</code>  将它绑定到 <code>first-list</code>  上；其他的 <code>((2 20 200) (3 30 300))</code>  都绑定到 <code>other-lists</code>  上； 使用 <code>unary-map list other-lists</code>  我们得到了 <code>(2 3)</code> ；随后是 <code>cons (car first-list) (unary-map list other-lists)</code>   得到了 <code>(1 2 3)</code> ；随后我们对上述结果使用 <code>apply fn</code>  即  <code>apply list</code>  最终得到了 <code>((1 2 3))</code> 。</p>\n<p>接下来递归的部分，对 <code>other-lists</code>  的 <code>cdr</code>  部分，即 <code>((20 200) (30 300))</code>  进行 map，之后我们使用 <code>cons (cdr first-list)</code>  把第一个列表中的 <code>cdr</code>  部分加在它们前面；得到 <code>((10 100) (20 200) (30 300))</code> ；然后再把 <code>fn</code>  放在这整个部分的最前面，得到 <code>(list (10 100) (20 200) (30 300))</code> ；最后再使用 <code>apply map</code>  对这整个部分进行递归计算，即 <code>(map list (10 100) (20 200) (30 300))</code> 。</p>\n<h2 id=\"scheme中的内存创建或释放\"><a class=\"markdownIt-Anchor\" href=\"#scheme中的内存创建或释放\">#</a> Scheme 中的内存创建或释放</h2>\n<p>假设我们执行如下所示的代码：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> x <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> y <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在执行第一行代码的时候，列表 <code>(1 2 3)</code>  被绑定到 x 上，内存结构如下：</p>\n<p><img data-src=\"image-20231225143632571.png\" alt=\"image-20231225143632571\"></p>\n<p>执行第二行代码的时候， <code>cdr x</code>  被绑定到 y 上，即内存结构如下所示：</p>\n<p><img data-src=\"image-20231225143722610.png\" alt=\"image-20231225143722610\"></p>\n<p>当我想将 x 的值换一下的时候：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> x <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>内存结构如下：</p>\n<p><img data-src=\"image-20231225144125955.png\" alt=\"image-20231225144125955\"></p>\n<p>y 的值不会改变，它仍然指向 <code>'(2 3)</code> ，这个时候 1 就成了没有使用的垃圾内存。</p>\n<p>系统会为这块无用内存保留一段时间，它可能在等待 IO，也可能是在等待网络连接等等，当它没有任务的时候，它就会前往垃圾收集站，去回收一些没用的内存。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_25/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_25/",
            "title": "斯坦福编程范式CS107_25",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_25\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_25\">#</a> 斯坦福编程范式 CS107_25</h1>\n<h2 id=\"使用python重写rsg\"><a class=\"markdownIt-Anchor\" href=\"#使用python重写rsg\">#</a> 使用 Python 重写 RSG</h2>\n<p>下面的 grammar 有两个 key，分别映射到一个列表上，其中一个是一个长度为 1 的列表，另一个是长度为 3 的列表。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>grammar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'&lt;struct>'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'This'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'&lt;object>'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'is here'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">'&lt;object>'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'computer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'assiginment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>假设上述的内容是一个全局变量。我想要定义这个函数。</p>\n<p><code>choice</code>  是一个 python 内置的随机函数，给入一个整数，它会返回介于 0 和那个整数之间的数字；给一个列表，它从列表中等概率地选择任何地元素。 <code>map</code>  用来进行递归。 <code>seed</code>  的作用是生成一个随机数，如果每一次的第一个随机数是相同的总是 0，那么你运行后得到的第二个随机数也是相同的，会得到同一个序列。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> symbol<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        definitions <span class=\"token operator\">=</span> grammar<span class=\"token punctuation\">[</span>symbol<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        expansion <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">(</span>definitions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>expand<span class=\"token punctuation\">,</span>expansion<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">,</span>write<span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>expand<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;start>'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"从内存的角度谈一下对象模型\"><a class=\"markdownIt-Anchor\" href=\"#从内存的角度谈一下对象模型\">#</a> 从内存的角度谈一下对象模型</h2>\n<p>下述例子中，x 和 y 使用的是同一块内存</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> y <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> x<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> x </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span> y</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>下面的这个例子，w 没有做任何深度拷贝，没有将 z 列表的所有权转移给那个被 w 拥有的列表，从下面的例子中可以看出来，虽然只是浅拷贝，在 python 的数据生命期中都被预留了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> w </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> z<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> z</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span> w</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>如果你想要使用复制，那么有两种方法。</p>\n<p>有一种模块叫做 copy，可以用来进行复制，生成一个新的内存空间。下面例子中的 z 是进行浅拷贝生成的，它拷贝的深度为 1。</p>\n<p>如果想要使用深拷贝，那么可以使用 deep copy</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> copy <span class=\"token keyword\">import</span> copy<span class=\"token punctuation\">,</span>deepcopy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> y <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> x <span class=\"token keyword\">is</span> y</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">></span> z <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">></span> z</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">></span> z <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">></span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">></span> p <span class=\"token operator\">=</span> deepcopy<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"python中的对象\"><a class=\"markdownIt-Anchor\" href=\"#python中的对象\">#</a> python 中的对象</h3>\n<p>python 中的对象和字典差不多而已，在 python 中，没有编译时间元素，不需要预定义类型，直需要将内容添加到字典中。</p>\n<p>一个关于类的例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">lexicea</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>filename <span class=\"token operator\">=</span> <span class=\"token string\">'words'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>C++ 中传入对象的地址是在 -1 的参数位置进行传入的，Python 不会那样做，它会很明确地传递有关的容器或对象的地址，包括构造方法，这就是所谓的 self，它不是必须的。self 是是从 objective C 中借来的关键字。因为对象是动态初始化，完全没有编译时元素，它需要这个空的对象。</p>\n<p>下面对这个类进行使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> lex <span class=\"token keyword\">import</span> lexicea</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> el <span class=\"token operator\">=</span> lexicea<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">#构建了类 el</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lexicea<span class=\"token punctuation\">.</span>__dict__\t<span class=\"token comment\">#运行这个会让你看到内部符号其实是以字典的形式进行存放的</span></pre></td></tr></table></figure><h3 id=\"一些易犯的错误\"><a class=\"markdownIt-Anchor\" href=\"#一些易犯的错误\">#</a> 一些易犯的错误</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> o <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> o<span class=\"token punctuation\">.</span>__dict__</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> o<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> o<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span> o<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">></span> o<span class=\"token punctuation\">.</span>__dict__</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面的三行代码和 5~7 行的代码是等效的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>o<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>o<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>o<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>o<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"helo\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>o<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span></pre></td></tr></table></figure><p>这里所体现出的特点是，支持的对象是可扩展的，收缩的容器。他们必须是以可扩展的方式，那些 C C<ins> 和 JAVA 中不需要有的方式，因为 C C</ins> JAVA 在任何代码执行之前，已经安排妥当了。Python 是一种完全动态的语言，一切都应该是能扩大和缩小，关于它的一切都应该是动态的，</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_26/",
            "url": "http://yanagi-kon.github.io/2024/01/03/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%20CS107_26/",
            "title": "斯坦福编程范式CS107_26",
            "date_published": "2024-01-03T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式-cs107_26\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式-cs107_26\">#</a> 斯坦福编程范式 CS107_26</h1>\n<h2 id=\"本课程的所有内容\"><a class=\"markdownIt-Anchor\" href=\"#本课程的所有内容\">#</a> 本课程的所有内容：</h2>\n<p>C\tAssembly\tC++\tConcurrent Programming\tScheme\tPython</p>\n<p>学习这些语言所体现出的范式，而不是语言本身，学习的内容还很浅。</p>\n<p>纯 C 没有类，并且更多的是面向整个编程的过程，它代表了过程范式，或者叫命令式范式。它是面向动词的，比如函数，函数就是有很强的动词特征。</p>\n<p>C++，对于一行代码，我们首先看到的是对象，因此这被称为面向对象的，而不是面向过程的。</p>\n<p>Assembly。我们通过汇编语言，来看如何把一个 C 或者 C<ins> 程序编译成一个.O 文件以及二进制文件。当从汇编语言的角度去看时，我们可以发现 C 和 C</ins> 就好像只是一个语言。</p>\n<p>Concurrent Programing。 并发编程，就是在一个程序中，让两个函数看起来是在同时进行运行。</p>\n<p>Scheme。纯函数式语言。</p>\n<p>Python。一个非常现代的，面向对象的，纯函数式语言。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/21/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_20/",
            "url": "http://yanagi-kon.github.io/2023/12/21/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_20/",
            "title": "斯坦福编程范式CS107_20",
            "date_published": "2023-12-21T06:03:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_20\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_20\">#</a> 斯坦福编程范式 CS107_20</h1>\n<h2 id=\"接着上节课的sum-list\"><a class=\"markdownIt-Anchor\" href=\"#接着上节课的sum-list\">#</a> 接着上节课的 sum-list</h2>\n<p>我们希望不利用系统提供的递归，自己设计一个计算求和的函数，如下：要求对于 <code>(sum-list '(1 2 3 4 5))</code>  输出 15</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> sum-list<span class=\"token punctuation\">(</span><span class=\"token function\">num-list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> num-list<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> num-list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token function\">sum-list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面我们设计一个斐波那契数函数使用递归。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> fib<span class=\"token punctuation\">(</span><span class=\"token function\">n</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">or</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> n <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> n</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> n <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>scheme 语言中，不会去提前查看有无语法或者编程错误，如下例子：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">zero?</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token string\">\"hello\"</span> <span class=\"token number\">4.5</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于这样的一个例子，if 判断当然是真的，那么就会输出 4，它不会去检查 if 没有通过后的那个错误的语句，对于 scheme，没有执行的语句的所有元素都认为是一个 token，只有当运行的时候，才回去检查 token。</p>\n<h2 id=\"flatten函数\"><a class=\"markdownIt-Anchor\" href=\"#flatten函数\">#</a> flatten 函数</h2>\n<p>对于如下输入，flatten 会输出如下内容。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>函数实现如下：这里我们使用了一个 cond，cond 类似一个 switch 语句，但是它是关于布尔测试的 swtich 语句。cond 首先判断输入是不是一个空列表，如果是就返回一个空列表；随后 cond 判断输入中有没有嵌套列表，如果嵌套了就去嵌套，即调用本身；如果没有嵌套就直接提取出这个元素。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> flatten<span class=\"token punctuation\">(</span><span class=\"token function\">sequence</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> sequence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> sequence<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 <span class=\"token punctuation\">(</span><span class=\"token builtin\">append</span> <span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">(</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> sequence<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                      <span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"判断列表是不是按顺序排\"><a class=\"markdownIt-Anchor\" href=\"#判断列表是不是按顺序排\">#</a> 判断列表是不是按顺序排</h2>\n<p>函数例子：</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">sorted?</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">4</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">#t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">sorted</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">4</span> <span class=\"token number\">7</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token boolean\">#f</span></pre></td></tr></table></figure><p>函数实现。首先如果列表中的元素个数小于 2 那肯定是顺序的，就一个或零个元素。如果按顺序对于列表的每两个元素，第一个元素的值小于第二个元素的值 (cadr 的意思是 car cdr，即第二个元素)，那么列表就是有序的。如果不符合，函数就运行不下去就会返回 false。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> sorted? <span class=\"token punctuation\">(</span><span class=\"token function\">num-list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">or</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">length</span> num-list<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      and <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> num-list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token builtin\">cadr</span> num-list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token function\">sorted?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> num-list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"函数的指针\"><a class=\"markdownIt-Anchor\" href=\"#函数的指针\">#</a> 函数的指针</h2>\n<p>对于下述代码，它的内存结构如下图所示。car 在被使用的时候总是会整顿成对应的代码。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"image-20231221152028111.png\" alt=\"image-20231221152028111\"></p>\n<p><img data-src=\"image-20231221152131114.png\" alt=\"image-20231221152131114\"></p>\n<h2 id=\"重写-sorted-函数\"><a class=\"markdownIt-Anchor\" href=\"#重写-sorted-函数\">#</a> 重写 sorted? 函数</h2>\n<p>重写 sorted? 函数以实现以下内容，comp 参数是一个内置的函数，比如 &gt; &lt; = 之类的。</p>\n<figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">sorted?</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> >=<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">#t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>><span class=\"token punctuation\">(</span><span class=\"token function\">sorted</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token string\">\"b\"</span> <span class=\"token string\">\"d\"</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> String&lt;?<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token boolean\">#f</span></pre></td></tr></table></figure><figure class=\"highlight scheme\"><figcaption data-lang=\"scheme\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> sorted? <span class=\"token punctuation\">(</span><span class=\"token function\">seq</span> comp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token builtin\">or</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">length</span> seq<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token builtin\">and</span> <span class=\"token punctuation\">(</span><span class=\"token function\">comp</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> seq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 <span class=\"token punctuation\">(</span><span class=\"token builtin\">cadr</span> seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token punctuation\">(</span><span class=\"token function\">sorted?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> seq<span class=\"token punctuation\">)</span> comp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下节课讲一些 scheme 的核心内容，以及映射、过滤之类的。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_18/",
            "url": "http://yanagi-kon.github.io/2023/12/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_18/",
            "title": "斯坦福编程范式CS107_18",
            "date_published": "2023-12-19T11:03:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_18\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_18\">#</a> 斯坦福编程范式 CS107_18</h1>\n<h2 id=\"上节课提到的冰淇淋商店模拟问题\"><a class=\"markdownIt-Anchor\" href=\"#上节课提到的冰淇淋商店模拟问题\">#</a> 上节课提到的冰淇淋商店模拟问题</h2>\n<p>我们有一个收银员；十个顾客，会随机买 1 到 4 个冰淇淋；制作冰淇淋的店员，10 到 40 个，每个店员一次只做一个甜筒； 只有一个经理，店员需要将冰淇淋交给经理检查，并且一次只有一个店员进去检查。所以一共有四种线程，一共大概可能 52 个线程。 我们需要一些方式使他们之间能够相互通讯。</p>\n<p>显然的店员进办公室需要一把锁，因为一次只能有一个店员进办公室。经理一直都在办公室中等待，直到检查的冰淇淋数量达到一天的要求，所以经理是一个循环。当顾客拿到他们订的冰淇淋后，他们就排队去收银员那里，并且这个队列应该是 FIFO 形式的，先进先出。</p>\n<h3 id=\"main函数\"><a class=\"markdownIt-Anchor\" href=\"#main函数\">#</a> main 函数</h3>\n<p>main 函数主要是产生我们需要的所有线程，当然也不是所有线程都在 main 函数中生成，比如，顾客负责生成店员的线程，即，只有顾客要求了店员才会去生产冰淇淋。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> totalCones <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 甜筒的数量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">InitThreadPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 初始化线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">SehpSemaphores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> numCones <span class=\"token operator\">=</span> <span class=\"token function\">RandomInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span>Customer<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>numCones<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顾客线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        totolCones <span class=\"token operator\">+=</span> numCones<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>Name2<span class=\"token punctuation\">,</span>Cashier<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 收银员线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>Name3<span class=\"token punctuation\">,</span>Manager<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>totalCones<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 经理线程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">RunAllThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开启所有的线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">SemaphoreFree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"经理\"><a class=\"markdownIt-Anchor\" href=\"#经理\">#</a> 经理</h3>\n<p>下面从经理开始讲起，因为经理较为简单。我们需要知道，经理检查完甜筒后，甜筒是否合格，这就涉及到一些通讯方式。</p>\n<p>下面通过使用一个<strong>全局的结构体</strong>进行检查这一个动作。bool 类型的 passed 表示甜筒是否通过；信号量 requested 表示经理的锁初始化为 0，经理要等待有一个人进来，否则他就一直处于阻塞状态。信号量 finished 表示店员的冰淇淋是否检查完毕，如果检查完了就唤醒店员。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inspection</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    bool passed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Semaphore <span class=\"token function\">requested</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Semaphore <span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面我们来完成经理函数， <code>numApproved</code>  是今天检查的甜筒总数， <code>numInspected</code>  是检查过的店员的数量。当检查的甜筒总数没有达到目标值时，就要一直等待店员提供冰淇淋进行检查，并且检查是否通过是一个随机的。如果通过检查了，就 <code>numApproved</code>  加 1，并且结束的时候通过信号量告知店员检查结束了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> totalConesNeeded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> numApproved <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> numInspected <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>numApproved<span class=\"token operator\">&lt;</span>totalNumNeeded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>requested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        numInspected<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        inspection<span class=\"token punctuation\">.</span>passed <span class=\"token operator\">=</span> <span class=\"token function\">RandomChance</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>passed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            numApproved<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"店员\"><a class=\"markdownIt-Anchor\" href=\"#店员\">#</a> 店员</h3>\n<p>被顾客告知需要做甜筒后，店员需要做甜筒并且让经理来检查，一旦通过检查，就将甜筒交给顾客，否则就继续做甜筒。于是我们来更新一下我们存放信号量的结构体。添加一个信号量 lock 并初始化为 1，使得至少初始能有一个店员进入经理办公室。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">inspection</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    bool passed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Semaphore <span class=\"token function\">requested</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Semaphore <span class=\"token function\">finished</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Semaphore <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>店员在不通过的时候一直做甜筒，做完就等待进入办公室，并在进入办公室的时候唤醒经理，并等待经理检查完毕。取得是否通过的结果后，店员释放锁。并最终通知顾客甜筒好了。</p>\n<p>** 问题：** 为什么需要 requested 那个锁？因为如果不这样的话，经理就会对进来的人持续给出评价，并且你也不确定哪一个评价是你这个甜筒的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Clerk</span><span class=\"token punctuation\">(</span>Semaphore semaToSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    bool passed <span class=\"token operator\">=</span> flase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>passed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">MakeCone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">SenaphoreSignal</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>requested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        passed <span class=\"token operator\">=</span> inspection<span class=\"token punctuation\">.</span>passed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>inspection<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>semaToSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"顾客\"><a class=\"markdownIt-Anchor\" href=\"#顾客\">#</a> 顾客</h3>\n<p>一开始顾客什么也不做，随后他需要找 n 个店员来做他这 n 个甜筒。信号量 <code>clerksDone</code>  是等待店员做好了甜筒通知你并把甜筒给你。接着是等待店员把所有的甜筒做完，并释放店员线程。之后进行排队。</p>\n<p>随后去去一个号码，并且不要和其他人同时去拿。再等待排到你的时候你会将收银员唤醒，并最终等待你的位置的账单被处理完。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Costomer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numCones<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">BrowX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Semaphore <span class=\"token function\">clerksDone</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> numCones<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span>Clerk<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>clerksDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>numCones<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>clerksDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">SemaphoreFree</span><span class=\"token punctuation\">(</span>clerksDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">WalkToCashier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> place <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>number<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>requested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">[</span>place<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"收银员\"><a class=\"markdownIt-Anchor\" href=\"#收银员\">#</a> 收银员</h3>\n<p>接下来看我们的其他结构体，这个结构体能够处理顾客和收银员之间的通讯的所有信号量。现在顾客必须去收银员那里，并必须排队等待轮到他的时候，所以他需要获得一个数字，也就是队列中的下一个可占用的位置。</p>\n<p>number 表示顾客当前所在队列的号，信号量 requested 表示收银员当前是否被需要，信号量 customers 是一个数组，当收银员处理完对应队列中某一个人的帐单后，就告知此人可以走了。并且由于 number 是共享资源，所以我们也需要对它加上一个锁。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">line</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Semaphore requested<span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Semaphore customers<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Semaphore lock<span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于 10 个顾客，收银员需要知道自己是否被需要了，</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Cashier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>requested<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">Checkout</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>customers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_17/",
            "url": "http://yanagi-kon.github.io/2023/12/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_17/",
            "title": "斯坦福编程范式CS107_17",
            "date_published": "2023-12-19T07:27:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_17\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_17\">#</a> 斯坦福编程范式 CS107_17</h1>\n<h2 id=\"接着上节课的哲学家问题进餐问题\"><a class=\"markdownIt-Anchor\" href=\"#接着上节课的哲学家问题进餐问题\">#</a> 接着上节课的哲学家问题进餐问题</h2>\n<pre><code class=\"language-C\">Semaphore forks[] = &#123;1,1,1,1,1&#125;;\n\nvoid philosopher(int id)&#123;\n    for(int i =0;i&lt;3:i++)&#123;\n        Think();\n        SemaphoreWait(forks[id]);\n        SemaphoreWait(forks[(id+1)%5]);\n        Eat();\n        SemaphoreSignal(forks[id]);\n        SemaphoreSignal(forks[(id+1)%5]);\n    &#125;\n    Think();\n&#125;\n</code></pre>\n<p>上节课我们知道上述情况下，可能会出现死锁状态，所有人都在等待另一个人放下筷子以便自己进行吃饭动作。那么我们知道一共有 5 个叉子，并且 5/2=2，所以也就是说最多只能有两个哲学家在同一时刻进行进餐。所以最简单的方法就是再加一个信号量，并且信号量为 2。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Semaphore forks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Semaphore  <span class=\"token function\">numAllowedToEat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">philosopher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token operator\">:</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">Think</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>numAllowedToEat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>forks<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>forks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>forks<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>forks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>numAllowedToEat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Think</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是与其写 2，不如写 4，写 4 是可以的，因为只要有一个人不被允许拿叉子，那么其他人总有 1 个可以拿齐叉子并进行吃饭，尽管可能会有另几个人暂时被阻塞了。</p>\n<p>填 2 和 4 的区别在于，如果填的是 2，那么会有多个线程过早的钝化掉，被阻塞在 numAllowedToEat 这里；而 4 就是尽可能多的线程进行运行。</p>\n<p><strong>问题</strong>：为什么要使用 Semaphore，不用一个 int 来解决？</p>\n<p><strong>答</strong>： 使用信号量 Semaphore 是将这个监督过程交由线程管理器管理了。如果采用比如说循环的形式不断的人工去检查一个整数是否大于 0 或小于 0，那么你就无法做任何有意义的事，除非跳出这个循环，可能在一段时间里，你为了确认这个锁是不是 0 而不断重复获取并释放该锁，这种现象被称为 “忙等待”。当你有许多处理器的时候，你可以将线程运行在其他处理器上，并采取 “忙等待” 的方式进行检查，如果只有一个处理器，这样就是无意义的，会浪费大量处理器的时间 。</p>\n<h2 id=\"例子一\"><a class=\"markdownIt-Anchor\" href=\"#例子一\">#</a> 例子一</h2>\n<p><strong>FTP 下载</strong>，一个 1990 年的技术。现在假设我们有一个函数，这个函数叫 <code>DownloadSingleFile</code> 。这里的返回值就是我们要下载文件的字节数量。</p>\n<p>现在我想要实现一个下载所有文件的函数 <code>DownloadAllFiles</code> ，这里的 n 意味着 n 个线程，每一个线程用于下载一个文件。每一个线程都有一个存储下载文件字节数的大小的变量，并且我想要把这个变量的地址存储，并对它上锁，防止多个线程同时对其值进行修改。</p>\n<p>为什么在 <code>ThreadNew</code>  中不直接调用 <code>DownloadSingleFile</code>  呢？因为传递到 <code>ThreadNew</code>  的函数，返回值类型为 <code>void</code> ，即使返回值不为 <code>void</code> ，也没有办法抓取到来自 <code>ThreadNew</code>  环境下的返回值。所以我们通过另一个函数 <code>DownloadHelper</code>  帮助我们获取下载文件的字节数，并通过累加将值加到 <code>totalBytes</code>  中。</p>\n<p>下面来构建 <code>DownloadHelper</code> ，记住 Semaphore 本身就是指针，不需要加取址符，直接传入 lock 即可。这里直接赋值 <code>bytesDownloaded</code>  的含义是多个线程可以 “同时” 都在进行下载操作，后面线程对唯一的下载总字节数进行操作时才需要对其上锁。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">DownloadSingleFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> server<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">DownloadAllFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> server<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> files<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> totalBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Semaphore lock <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>ThreadName<span class=\"token punctuation\">,</span>DownloadHelper<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>server<span class=\"token punctuation\">,</span>files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>totalBytes<span class=\"token punctuation\">,</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> totalBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DownloadHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> server<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>numBytesp<span class=\"token punctuation\">,</span>Semaphore lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> bytesDownloaded <span class=\"token operator\">=</span> <span class=\"token function\">DownloadSingleFile</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numBytes<span class=\"token punctuation\">)</span><span class=\"token operator\">+=</span>bytesDownloaded<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是这样编程有一点小问题，就是有可能我最后得到的返回值 <code>totalBytes</code>  是 0，为什么呢？因为从 for 循环的最后一跳到 return 假如很快，而在这个时间段内，所有线程中的写入操作还没有完成，那么这个时候就直接结束了 for 循环，导致最终得到的 <code>totalBytes</code>  不是一个准确的值。所以其实真正的工作量在这里，for 循环之前，我们需要阻塞住这个父进程，不能让他提前跳转到 <code>return</code>  语句。</p>\n<p>我们定义一个 <code>childrenDone</code>  信号量作为纽带。并让子线程结束后就 + 1。当然也可以初始化信号量为负值，但那是 JAVA 才有的内容，C 不行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">DownloadAllFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> server<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> files<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Semaphore childrenDone <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> totalBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Semaphore lock <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span>ThreadName<span class=\"token punctuation\">,</span>DownloadHelper<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>server<span class=\"token punctuation\">,</span>files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>totalBytes<span class=\"token punctuation\">,</span>lock<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               ChildrenDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>childrenDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> totalBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">void</span> <span class=\"token function\">DownloadHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> server<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> path<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>numBytesp<span class=\"token punctuation\">,</span>Semaphore lock<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    Semaphore ParentToSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> bytesDownloaded <span class=\"token operator\">=</span> <span class=\"token function\">DownloadSingleFile</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numBytes<span class=\"token punctuation\">)</span><span class=\"token operator\">+=</span>bytesDownloaded<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   \t<span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>ParentToSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>** 想法：** 如果 totalBytes 不使用 int 类型，而使用数组，那么进程在写入时就不会产生冲突，可以减少一个信号量。这是一个很好的想法，但如果 N 很大的时候，这个想法就不是很适用了，当 N 较小时这个方法很好。</p>\n<h2 id=\"为下一节课留的大例子\"><a class=\"markdownIt-Anchor\" href=\"#为下一节课留的大例子\">#</a> 为下一节课留的大例子</h2>\n<h3 id=\"ice-cream-store-simulation\"><a class=\"markdownIt-Anchor\" href=\"#ice-cream-store-simulation\">#</a> Ice Cream Store Simulation</h3>\n<p>在冰淇淋店，我们有 10 个顾客，我们还知道每个顾客定了几个冰淇淋 (1~4)，并且店里有一个收银员，每一个顾客都会走过去向他付钱，因此会产生小小的竞争。还有有个小经理决定做不做冰淇淋。10 到 40 个店员 ，店员可以同时做冰淇淋。顾客向店员订冰淇淋。店员还要和经理交互，并且一次只能一个人去见经理，经理会批准是否出售该冰淇淋。</p>\n<p>一共有四种不同的线程。我需要：</p>\n<p>经理一直呆在办公室中批准冰淇淋，直到批准售出的冰淇淋数量达标。</p>\n<p>每个店员，都能制作出好吃的冰淇淋并交给顾客。</p>\n<p>每个顾客，都能订到他们想要的冰淇淋，付完钱，离开商店。</p>\n<p>收银员，知道他要应对 10 个不同的顾客。</p>\n<p><img data-src=\"2023-12-01-%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_17/image-20231219170836381.png\" alt=\"image-20231219170836381\"></p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/14/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_16/",
            "url": "http://yanagi-kon.github.io/2023/12/14/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_16/",
            "title": "斯坦福编程范式CS107_16",
            "date_published": "2023-12-14T06:21:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_16\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_16\">#</a> 斯坦福编程范式 CS107_16</h1>\n<h2 id=\"接着上节课的多线程卖票例子\"><a class=\"markdownIt-Anchor\" href=\"#接着上节课的多线程卖票例子\">#</a> 接着上节课的多线程卖票例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SellTickets</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> agent<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">,</span>Semaphore lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> numTicketsp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>numTicketsp<span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有人会问，如果现在只剩 1 张票了，而在 <code>(*numTicketsp)--</code>  处线程突然中断了处理器的权限，这时候会不会出现一些意外的情况。如果有锁的话，实际上不会，现在来更详细的说说，线程处理时汇编指令和相关寄存器的状态。假设只有两个售票员即两个线程的情况，我们知道 <code>(*numTicketsp)--</code>  可以转换为好几行汇编指令，比如 <code>R1</code>  指向这个 <code>numTicket</code> ， <code>R2=R1</code> ，然后 <code>R2--</code>  现在突然中断了处理器的使用权，那么此时这些寄存器中的数值，所有寄存器的状态，都会被保存在该线程底部的小的堆栈结构中。当他再次获得处理器的控制权后，他会将自己之前保存的寄存器状态恢复到系统的寄存器，继续进行执行。</p>\n<h2 id=\"使用全局结构设计\"><a class=\"markdownIt-Anchor\" href=\"#使用全局结构设计\">#</a> 使用全局结构设计</h2>\n<p>我想要写一个程序，模拟写和读取的过程。我想用 Writer 线程从互联网上写入 40 个字符，用 Reader 线程接收写在互联网上的 40 个字符。在这种情况下，可能会出现 <code>Reader</code>  还没读去， <code>Writer</code>  就又写上新的内容，或者在 <code>Writer</code>  还没写入新的内容， <code>Reader</code>  就进行读取了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">ITP</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writer\"</span><span class=\"token punctuation\">,</span>Writer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reader\"</span><span class=\"token punctuation\">,</span>Reader<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">RunAllThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">PrepareRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    buffer<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">ProcessChar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>针对上述问题我们可以引入两个 <code>Semaphore</code>  信号量。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Semaphore <span class=\"token function\">emptyBuffers</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Semaphore <span class=\"token function\">fullBuffers</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">ITP</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writer\"</span><span class=\"token punctuation\">,</span>Writer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">ThreadNew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reader\"</span><span class=\"token punctuation\">,</span>Reader<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">RunAllThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token function\">PrepareRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>emptyBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    buffer<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>fullBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>fullBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>emptyBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">ProcessChar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个例子中的信号量起的不是一个二进制锁的作用，而是类似一个电话，告诉对方是否可以继续进行，这是一种二进制约定。</p>\n<p>如果我们把 <code>emptyBuffers</code>  的 8 变成 4，意味着 <code>Writer</code>  不可以超出 <code>Buffer</code>  携带互联网数据量的一半， <code>Writer</code>  和 <code>Reader</code>  的效率更低一些。</p>\n<h2 id=\"典型问题死锁问题\"><a class=\"markdownIt-Anchor\" href=\"#典型问题死锁问题\">#</a> 典型问题，死锁问题</h2>\n<p>五个哲学家吃饭问题，每个哲学家之间有一个叉子，他们只进行吃、思考、吃、思考两件事，吃饭需要两个叉子。</p>\n<p><img data-src=\"image-20231214154318705.png\" alt=\"image-20231214154318705\"></p>\n<p>现在来编程进行建模：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Semaphore forks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">philosopher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Think</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述的代码存在问题，那就是每个人都只拿了右手的 fork 时，无论如何也不会拿到另一个 fork，这样大家都在等一个人放下 fork，但那是不可能的，于是就陷入了死锁。 要想高效的解决上述问题，就需要一个添加一个允许吃饭的数量这一信号量。我们只需要阻止任意一个哲学家能够吃饭就可以解决这个问题。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Semaphore forks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Semaphore <span class=\"token function\">numAllowedToEat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">philosopher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Think</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>numAllowedToEat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">SemaphoreWait</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>fork<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">SemaphoreSignal</span><span class=\"token punctuation\">(</span>numAllowedToEat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/07/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_14/",
            "url": "http://yanagi-kon.github.io/2023/12/07/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_14/",
            "title": "斯坦福编程范式CS107_14",
            "date_published": "2023-12-07T06:49:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_14\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_14\">#</a> 斯坦福编程范式 CS107_14</h1>\n<h2 id=\"上节课的例子可能没有讲清\"><a class=\"markdownIt-Anchor\" href=\"#上节课的例子可能没有讲清\">#</a> 上节课的例子可能没有讲清</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行上述内容，无意间会影响到 saved PC，saved PC 的值刚好减去 4，减去 4 后便会指向 CALL <foo> 。当这个 foo 函数返回后，便会再次进入循环。</foo></p>\n<h2 id=\"再看一个例子\"><a class=\"markdownIt-Anchor\" href=\"#再看一个例子\">#</a> 再看一个例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">DeclareAndInitArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">PrintArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DeclareAndInitArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">InitArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码虽然是想讲内存内容进行初始化并进行输出，但是因为没有运用全局变量，全部是在函数内部的局部变量进行操作的，所以并不算正确，但是却能运行出正确的结果。因为在函数对内存空间进行操作返回后，内存中的内容不会被清除，所以再继续调用打印函数后，能输出这些内存地址中的内容。虽然运行结果正确，可以算作是一种讨巧的方法。相当于提前申请了一系列另类的参数，后续便可以直接进行调用。</p>\n<h2 id=\"printf函数参数在空间的分布特点\"><a class=\"markdownIt-Anchor\" href=\"#printf函数参数在空间的分布特点\">#</a> printf 函数（参数在空间的分布特点）</h2>\n<p>这里的 … 意思是可以添加任意数量，任意类型的参数。printf 的返回值是成功解析的占位符的个数。对于  <code>printf(&quot;Hello\\n&quot;)</code>  会返回 0，对于  <code>printf(&quot;%d+%d=%d&quot;,4,4,8)</code>  会返回 3。如果 printf 错误的话，就会返回 - 1。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> control<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>现在可以解释为什么函数压入参数是从右往左的，最右边是第零参数，第零个参数会在最下面，第一个参数会在它上面。</strong></p>\n<p>对于下述代码，编译器会计算参数个数，并计算出需要让栈指针减去多少个字节为参数提供空间。当 SP 指向了 saved PC 后，printf 函数不知道在 char * 之上还有多少参数。printf 解析器会对第一个字符串进行分析，每当碰到一个 % d，就会知道，哦！这上方有 4 个字节应该被解释成 int 类型的参数… 通过上述的过程对参数的个数和类型进行判断。这与我们压入参数到栈中的顺序是一致，从右到左，最后一个参数首先进栈。如下图所示，上方为栈底。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d+%d=%d\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231207153959547.png\" alt=\"image-20231207153959547\"></p>\n<h2 id=\"结构体的参数在空间中的特点\"><a class=\"markdownIt-Anchor\" href=\"#结构体的参数在空间中的特点\">#</a> 结构体的参数在空间中的特点</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">base</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">type_one</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//type_one 中所有元素的值都为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">type_two</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//type_two 中所有元素的值都为 2</span></pre></td></tr></table></figure><p>假设我有一个 指向 base 的指针，那么我可以根据 code 的值为 1 或者 2 来将这个指针转换为 type_one 类型或者 type_two 类型。对于 windows 中也有类似的结构体对应关系，比如网络，IPv4 和 IPv6 进行匹配不同的结构体。** 那么现在说明为什么结构体变量或类变量的第一个成员域必须是最低地址。** 这并不是必须的，但大多数编译器都是这么实现的。因为将第一个变量如果位于高地址即栈底的话，那么久无法根据第一个变量的值进行匹配结构体的类型，那么我们就无从知晓整个结构体变量的基地址的距离了。</p>\n<h2 id=\"稍微讲讲进程切换\"><a class=\"markdownIt-Anchor\" href=\"#稍微讲讲进程切换\">#</a> 稍微讲讲进程切换</h2>\n<p>怎么让两个程序<strong>看起来在同时运行</strong>。</p>\n<p>假设我们有这四个应用程序，它们都有 3 个段，栈、堆和代码段，这些段并不相同，这些都是虚拟内存，映射到不同真实内存中。将这四个进程定义为 1，2，3，4。它们都假定有足够大的空间来建立一个足够大的栈，足够大的堆来满足这个程序的需求。它们或许有相同地址的虚拟地址，但在物理地址上是不同的。</p>\n<p>操作系统中有内存管理器，用来建立表格，将虚拟内存映射到真实内存中。 任何对虚拟地址的操作会最终映射为对真实地址的操作，并且知道这部分真实地址是由某个线程所拥有的。</p>\n<p><img data-src=\"image-20231207160353067.png\" alt=\"image-20231207160353067\"></p>\n<p>让我们来只考虑 GCC 和 make 程序，它们两个互相插入并进行运行，以实现同步运行。对于更多的程序同时运行，只要处理器能很快的在线程之间进行切换。</p>\n<h3 id=\"是否有可能在一个单线程中同时运行两个函数\"><a class=\"markdownIt-Anchor\" href=\"#是否有可能在一个单线程中同时运行两个函数\">#</a> 是否有可能在一个单线程中同时运行两个函数</h3>\n<p>可以。如在 iTunes 中购买了 3 首歌并进行下载。它们看起来是 3 首同时下载，但实际上也是互相插入的进行运行，并下载。 假设是两首歌吧，那就是两个函数，两个函数都会有对应的汇编代码，这时程序的栈段会被分为更小的子段。 它们共享一个堆，共享一个 malloc 函数，都从相同的内存池中获得内存。在代码段，只有一个代码的拷贝，它是只读的。</p>\n<p>假设我们下面的程序模拟的是一个航班出售的 100 张票。sellTicket 的意思是代理卖了 15 张票，最后这个程序实际上卖了 150 张票。 下节课将把 sellTicket 改造成一个具有 10 个线程的函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span>  numAgents <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">sellTicket</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/12/01/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/",
            "url": "http://yanagi-kon.github.io/2023/12/01/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/",
            "title": "斯坦福编程范式CS107_13",
            "date_published": "2023-12-01T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_13\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_13\">#</a> 斯坦福编程范式 CS107_13</h1>\n<h2 id=\"使用gcc解释器的例子\"><a class=\"markdownIt-Anchor\" href=\"#使用gcc解释器的例子\">#</a> 使用 GCC 解释器的例子</h2>\n<p>main.c 文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">assert</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>assert<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>mem <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>mem <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">peintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yay! \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述 main 函数在 gcc 编译器后，生成 main.o 文件，然后进一步链接生成可执行文件。</p>\n<p>main.o 文件</p>\n<pre><code class=\"language-assembly\">SP = SP - 4\nCALL &lt;malloc&gt;\n...\nCALL &lt;printf&gt;\n...\nCALL &lt;free&gt;\nRV = 0\nSP = SP + 4\nRET\n</code></pre>\n<p>如果我们把主函数中 第二行的 #include 注释掉，那么大多数编译器就会不知道 printf 函数的意义从而报错。但 GCC 编译器不会，GCC 会根据函数的调用方式尝试去匹配它的原型。GCC 看到 printf 里面只有一个字符串作为参数，它会发出一个警告，说没有找到 printf 函数的原型，但是它不会停下来，继续生成 .o 文件。解释器会去标准库中去寻找这些代码，而 printf malloc free 这些函数正是在标准库中。</p>\n<p>如果把第三个 #assert 注释掉的话，编译器会猜测 assert 是一个函数，而不是一个宏定义，从而生成 .o 文件，而在链接阶段就会失败，因为 assert 不在标准库中，它不是一个函数。</p>\n<h2 id=\"另一个经典例子\"><a class=\"markdownIt-Anchor\" href=\"#另一个经典例子\">#</a> 另一个经典例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length = %d\\n\"</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们没有声明 strlen 的函数原型，gcc 编译器会忽略继续编码，并在链接阶段去标准库中去链接同名的函数，虽然同名的函数只有 1 个参数，但是链接过程不会去管参数个数，而只会去查看参数类型。因为 strlen 只有一个函数参数，strlen 从 65 下方开始进行处理，即 (char *)&amp;num，符合函数 strlen 函数的参数类型，因此可以继续进行链接运行，strlen 函数不会使用 65 变量。</p>\n<p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/image-20231130145427916.png\" alt=\"image-20231130145427916\"></p>\n<p>这样子写会在编译过程中产生警告，如果想要不产生这样的警告，我们可以手动定义一个原型。这种写法相较于写 #include 来说，include 是包涵所有的 .h 文件，是很大很大的，这对编译很不利，可以手动添加原型来实现要求，而不需要添加 include 文件。当然这样也有风险，如果写错的话，那么编译出来的东西并不是你想要的代码。</p>\n<p>那么这样的代码输出的 Length 是多少？答案是 0 或 1。如果是大端存储，那么 int 的 4 字节对应的 char 就是：0 0 0 ‘A’，那么 strlen 就认为这个字符串以 0 开头，那么它就是一个空的字符串，所以返回 0。如果是小端存储，那么 4 字节就是 ‘A’ 0 0 0，那么就是字符串长度就是 1。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length = %d\\n\"</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"经典例子相反的例子\"><a class=\"markdownIt-Anchor\" href=\"#经典例子相反的例子\">#</a> 经典例子相反的例子</h2>\n<p>一个原先要传递三个参数的函数，如果我声明原型并只传入一个参数会怎么样？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/image-20231130152133391.png\" alt=\"image-20231130152133391\"></p>\n<p>这样子调用很不合理，但实际上运行就是这样。并且很有可能在运行过程中崩溃，因为 v2 部分没有被初始化，是一个随意的 4 字节地址，不太可能是一个合法的栈指针或者堆指针等等，如果是的话，那就碰巧能跑起来。</p>\n<p>在 C++ 中因为更多的使用模版等内容，不太经常和指针打交道，更不容易崩溃。</p>\n<p>纯 C 语言的编译是  <code>CALL &lt;memcmp&gt;</code></p>\n<p>C ++ 中的语言编译会关注参数，使用不同的签名，对多个版本的 memcmp 进行消歧 ，我们定义的函数就是 <code>CALL &lt;memcmp_void_p&gt;</code> ，而标准库中的函数就是  <code>CALL &lt;memcmp_void_p_void_p_int&gt;</code> ，从这个角度来看 C++ 会更加安全。</p>\n<h2 id=\"举一些为什么程序会崩溃的小例子\"><a class=\"markdownIt-Anchor\" href=\"#举一些为什么程序会崩溃的小例子\">#</a> 举一些为什么程序会崩溃的小例子</h2>\n<h3 id=\"seg-fault段错误\"><a class=\"markdownIt-Anchor\" href=\"#seg-fault段错误\">#</a> seg fault (段错误)：</h3>\n<p>常出现在对错误的指针进行解引用。如  <code>*(NULL)</code></p>\n<h3 id=\"bus-errors总线错误\"><a class=\"markdownIt-Anchor\" href=\"#bus-errors总线错误\">#</a> bus errors（总线错误）：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> ____<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>内存地址从上到下分为四部分：Data 段、Stack 段、Heap 段、Code 段。栈和堆中内存要求首地址都是 4 字节对齐的。如果 vp 就是四个部分中的某部分，那我们有 50% 的可能性得到错误，如果没有报错的话，就说明 vp 是某两个字节的内存块。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述地址也是不合法的，因为 int 类型的地址必须是 4 的倍数。</p>\n<h3 id=\"缓冲区溢出\"><a class=\"markdownIt-Anchor\" href=\"#缓冲区溢出\">#</a> 缓冲区溢出</h3>\n<h4 id=\"一个数组越界例子\"><a class=\"markdownIt-Anchor\" href=\"#一个数组越界例子\">#</a> 一个数组越界例子</h4>\n<p>对于这段代码，i = 4 的时候，array [4] = 0 即将 i 地址的内容重新赋值为 0，因此程序会不断的进行循环。这种错误被称为缓冲区溢出。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/image-20231130155736250.png\" alt=\"image-20231130155736250\"></p>\n<h4 id=\"一个数组越界例子改为short数组\"><a class=\"markdownIt-Anchor\" href=\"#一个数组越界例子改为short数组\">#</a> 一个数组越界例子（改为 short 数组）</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">short</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样的代码在运行阶段可能不会陷入死循环。</p>\n<p>大端存储不会陷入死循环，只是会多进行一次赋值操作。</p>\n<p>小端存储就会陷入死循环，原因和前面的 int 数组的原因是一样的：</p>\n<p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/image-20231130160504339.png\" alt=\"image-20231130160504339\"></p>\n<h4 id=\"一个之前期中考试的例子\"><a class=\"markdownIt-Anchor\" href=\"#一个之前期中考试的例子\">#</a> 一个之前期中考试的例子</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>数组越界后，会擅自对 saved PC 的值减 4。</p>\n<p><img data-src=\"%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_13/image-20231130161109940.png\" alt=\"image-20231130161109940\"></p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/26/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_12/",
            "url": "http://yanagi-kon.github.io/2023/11/26/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_12/",
            "title": "斯坦福编程范式CS107_12",
            "date_published": "2023-11-26T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_12\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_12\">#</a> 斯坦福编程范式 CS107_12</h1>\n<h2 id=\"编译过程的三个阶段接着上节课\"><a class=\"markdownIt-Anchor\" href=\"#编译过程的三个阶段接着上节课\">#</a> 编译过程的三个阶段（接着上节课）</h2>\n<h3 id=\"预处理阶段\"><a class=\"markdownIt-Anchor\" href=\"#预处理阶段\">#</a> 预处理阶段</h3>\n<p>#define 对全局变量进行简单的替换。</p>\n<p>#define 对于宏定义的处理</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">MAX</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>#define 这种简单的替换在汇编语言中一般就两三行，但如果采用函数的形式，则会需要更多汇编语言，因为函数中的申请变量、返回等操作占用了大量的开销。</p>\n<p>这串代码在预处理阶段不会报错。在后续的编译中会报错。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>assert 的宏定义</strong>。是的，assert 在 C 语言中其实是一种宏定义。</p>\n<p>这条宏定义的意义就是，如果语句 cond 中的内容为真，就什么也不做，(void) 0 表示将 0 转换为 void 类型，不进行返回值，在汇编中这里不会产生汇编代码。如果为假，就输出正在编译的文件名，并退出程序。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">assert</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"正在编译的文件名\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>如果采用了 NO DEBUG 模式，就会将所有的 assert 部分替换为 空。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">NDEBUG</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">assert</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">assert</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"正在编译的文件名\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"预处理器的一些不足\"><a class=\"markdownIt-Anchor\" href=\"#预处理器的一些不足\">#</a> 预处理器的一些不足</h4>\n<p>对于下述式子，如果斐波那契 100 比较大，那么最终会运行两遍的求斐波那契 100 的函数，编译器不会进行中间值的保留，因为它认为你的式子就是这样写的，计算两次斐波那契数或者 factorial (4000)。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 对于上述宏定义进行展开后，将会是:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样的式子更加明确的表明，在实际程序中，可能会出现的冗余计算或错误。</p>\n<p>最终的结果如果是 m 比较大的话，m 会自增 2，n 则会自增 1。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>预处理器的这些不足会可能让你很难找出你代码的问题出在了哪里，尤其是对于一些工程量巨大的项目，除非你能保证你能一次就写出正确的 C++ 代码，那几乎是不太可能的。C 语言在它诞生的 60 年代时程序还都非常的小巧，所以能很容易的找到问题，现在就不太行了。</p>\n<h4 id=\"include\"><a class=\"markdownIt-Anchor\" href=\"#include\">#</a> #include</h4>\n<p>尖括号和双引号的区别。</p>\n<p>当使用尖括号来包括.h 文件时，对于预处理器这意味着这是个系统头文件，因此这个头文件应该是编译器提供的，因此可以通过默认路径找到这些文件；如果使用的是双引号，那么编译器会假设这是个用户编写的.h 文件，因此会默认从当前的工作目录查找该头文件。</p>\n<p>对于 #include 头文件，在预处理过程中会在目录中进行查找，并将查找到的头文件中的内容对这一行进行替换。#include 操作是递归的，意思就是如果你的头文件中还含有 #include 内容，那么系统就会继续查找下去，直到到达最底层。最终要交给编译器的文件是不会包括任何 include 或 define 符号的。</p>\n<p>预处理器对每一个已经处理过的头文件，都会加入 Hash 表中，以避免重复的替换某一个头文件。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"vector.h\"</span></span></pre></td></tr></table></figure><h3 id=\"编译阶段-和-链接阶段\"><a class=\"markdownIt-Anchor\" href=\"#编译阶段-和-链接阶段\">#</a> 编译阶段 和 链接阶段</h3>\n<p>基于 GCC 的。</p>\n<h4 id=\"mainc\"><a class=\"markdownIt-Anchor\" href=\"#mainc\">#</a> main.c</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span>\t<span class=\"token comment\">//printf</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>\t<span class=\"token comment\">//malloc,free</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>memory <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>memory <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yeah!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>预处理后，将上述代码传递给 GCC，根据 makefile 编译器会对其进行编译，编译生成 .o 文件。编译文件中显然的会有以下内容。</p>\n<pre><code class=\"language-assembly\">...\nCALL &lt;malloc&gt;\n...\nCALL &lt;fprintf&gt;\n...\nCALL &lt;printf&gt;\n...\nCALL &lt;free&gt;\n...\nRV = 0;\nRET;\n</code></pre>\n<p>为什么没有 assert 函数的调用呢？因为经过预处理阶段，#include &lt;assert.h&gt; 就已经对所有的 assert 函数进行替换了，就没有 assert 函数了，对应的会有 fprintf 函数。</p>\n<p>随后 GCC 会对 o 文件进行链接操作，并最终生成可执行文件 .out 文件。如果只是想让编译器进行编译后就停止，需要使用  <code>gcc -c</code>  命令。如果想设置生成的可执行文件的名称，就使用  <code>gcc -o</code> 。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/20/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_11/",
            "url": "http://yanagi-kon.github.io/2023/11/20/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_11/",
            "title": "斯坦福编程范式CS107_11",
            "date_published": "2023-11-20T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_11\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_11\">#</a> 斯坦福编程范式 CS107_11</h1>\n<h2 id=\"c的汇编\"><a class=\"markdownIt-Anchor\" href=\"#c的汇编\">#</a> C++ 的汇编</h2>\n<h3 id=\"构造一个foo函数\"><a class=\"markdownIt-Anchor\" href=\"#构造一个foo函数\">#</a> 构造一个 foo 函数</h3>\n<pre><code class=\"language-c++\">void foo()&#123;\n    int x;\n    int y;\n    x = 11;\n    y = 17;\n    swap(&amp;x,&amp;y);\n&#125;\n</code></pre>\n<p>汇编代码</p>\n<pre><code class=\"language-assembly\">SP = SP - 8;\nM[SP + 4] = 11;\nM[SP] = 17;\n\nR1 = SP;\t\t//&amp;y\nR2 = SP + 4;\t//&amp;x\nSP = SP - 8;\t//为参数申请空间 参数的地址是从右向左看是高地址到低地址\nM[SP] = R2;\nM[SP + 4] = R1;\nCALL&lt;swap&gt;\t\t//调用的同时会将PC值存储起来，以便调用完毕返回\nSP = SP + 8;\t//释放空间\n\nSP = SP + 8;\nRET;\n</code></pre>\n<h3 id=\"构造一个swap函数\"><a class=\"markdownIt-Anchor\" href=\"#构造一个swap函数\">#</a> 构造一个 swap 函数</h3>\n<pre><code class=\"language-c++\">void swap(int *ap,int *bp)&#123;\n    int temp = *ap;\n    *ap = *bp;\n    *bp = temp;\n&#125;\n</code></pre>\n<p>汇编代码</p>\n<pre><code class=\"language-assembly\">&lt;swap&gt;\nSP = SP - 4;\t//为temp申请空间\nR1 = M[SP + 8];\t//ap\nR2 = M[R1];\t\t//*ap 对ap解引用\nM[SP] = R2;\t\t//temp = *ap\n\nR1 = M[SP+12];\nR2 = M[R1];\nR3 = M[SP + 8];\nM[R3] = R2;\n\nR1 = M[SP];\nR2 = M[SP + 12];\nM[R2] = R1;\n\nSP = SP + 4;\nRET;\n</code></pre>\n<p><img data-src=\"image-20231120101907084.png\" alt=\"image-20231120101907084\"></p>\n<p>从这个例子中我们可以看出来，C++ 和 C 语言的汇编过程没有什么大的区别。</p>\n<h3 id=\"c语言实现swap函数\"><a class=\"markdownIt-Anchor\" href=\"#c语言实现swap函数\">#</a> C 语言实现 swap 函数</h3>\n<p>通过 <code>引用</code> 进行变量值的交换。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在这里 x 和 y 没有写 &amp; 符号，但是编译器会根据函数原型去寻找线索，然后理解这里应该传入的是一个引用类型，会自动去取这两个变量的地址。表面上看传递的是引用，实际上传递的是指针，会自动对所有引用的指针进行解引用操作。所以这里的 swap 函数的汇编代码，和上边 C++ 的汇编代码是完全一致的。</p>\n<h3 id=\"一个简单的引用类型的例子\"><a class=\"markdownIt-Anchor\" href=\"#一个简单的引用类型的例子\">#</a> 一个简单的引用类型的例子：</h3>\n<p>对于 <code>int &amp;z = y</code> ，虽然 y 没有加 &amp;，但是编译器会自动传入它的地址给 z。只不过编译器最终为 z 留出的空间是和 y 联系起来了。</p>\n<p>对于 <code>int *z = &amp;y</code> ，这时将图示中的阴影部分抹去就好了。</p>\n<p>这两种代码，从汇编的角度来看其实是一样的。但是在 C 和 C++ 的层面来看，一个需要显式的写上一个 *，而另一个则不必。那么如果引用就是指针的话，那么为什么还要使用实际的指针呢？引用确实很方便，尤其是它给人们一种假象将这个名字作为某个其他地方声明的变量的别名。但是使用引用的话，一旦赋值就不能将引用重新绑定给新的左值，就是说现在已经无法放弃 z 与 y 的绑定，而重新与 x 绑定了。你不能灵活的改变这个箭头以及这个箭头所指向的地址。但是指针是可以随意改变的。所以如果只是使用引用是没有办法很容易的构造出一个链表的。</p>\n<p>所以对于一个引用类型的变量，就把它当作是一个普通的变量进行操作就好，不用考虑指针，系统会自动进行解引用操作。</p>\n<p><img data-src=\"image-20231120103944491.png\" alt=\"image-20231120103944491\"></p>\n<p><img data-src=\"Snipaste_2023-11-20_10-55-36-17004492748102.png\" alt=\"Snipaste_2023-11-20_10-55-36\"></p>\n<h3 id=\"c和c的区别\"><a class=\"markdownIt-Anchor\" href=\"#c和c的区别\">#</a> C 和 C++ 的区别</h3>\n<p><code>很多人在使用C++的时候，他们还是在使用C加上一些引用和对象，只是他们偶尔使用对象和引用罢了。他们不使用继承，也不怎么使用模板，不适用C++中一些很好的方法。这样其实不是面向对象的方式。</code></p>\n<p>在 C<ins> 中，结构体也可以有方法。在 C</ins> 中唯一的区别对于结构体和类来说就是：对于类默认的访问修饰符是 private 的，而对于结构体来说默认的访问修饰符是 public。编译器对这两个语法结构差不多是等同对待的，它们的不同只是在最开始有一个转换语句，它会问 “这是一个 struct 还是一个 class 呢？”</p>\n<p>我们现在来考虑一个类，先不管构造函数和析构函数。</p>\n<pre><code class=\"language-c++\">class binky&#123;\n    public:\n\n    \n    private:\n    \tint winky;\n    \tchar *blinky;\n    \tchar slinky[8];\n&#125;;\n</code></pre>\n<p>这三个变量就是它唯一的数据域了。每当你声明一个这种 binky 类型的记录，只需要</p>\n<pre><code class=\"language-c++\">binky b;\n</code></pre>\n<p>就可以了。它其实是一块内存，里面紧挨着存放着 3 个成员域，这三个域打包存放在一个矩形区域，并且从上到下的顺序是：slinky、blinky、winky</p>\n<p><img data-src=\"image-20231120111355995.png\" alt=\"image-20231120111355995\"></p>\n<p>我们现在对类添加几个方法。为什么它们能够访问到 slinky 或者 winky 成员？</p>\n<pre><code class=\"language-c++\">class binky&#123;\n    public:\n    \tint dunky(int x, int y);\n   \t\tchar * minky(int *z)&#123;\n            int w = *z;\n            return slinky + dunky(winky,winky);\n        &#125;\n    \n    private:\n    \tint winky;\n    \tchar *blinky;\n    \tchar slinky[8];\n&#125;;\n</code></pre>\n<p>当我们调用 minky 函数的时候，参数其实并不是一个，而是两个，编译器会将某个 binky 类对象的地址传进去作为函数的 <code>第0个参数</code> 。因此此时的内存空间中，在 Saved PC 之上有两个参数，一个是  <code>this</code>  指针，另一个是 z</p>\n<pre><code class=\"language-c++\">int n = 17;\nbinky b;\nb.minky(&amp;n);\n//实际上： binky::minky(&amp;b,&amp;n);\n</code></pre>\n<p><img data-src=\"image-20231120112546950.png\" alt=\"image-20231120112546950\"></p>\n<p>随后进行函数内局部变量空间的申请。</p>\n<p><img data-src=\"image-20231120112815586.png\" alt=\"image-20231120112815586\"></p>\n<p>同理，在随后调用  dunky (winky,winky) 的时候，传入的参数是 3 个，而不是 2 个。</p>\n<h3 id=\"c类中的-static方法\"><a class=\"markdownIt-Anchor\" href=\"#c类中的-static方法\">#</a> C++ 类中的 static 方法</h3>\n<p>下面的求两个数的最大公约数的函数，它和普通的函数没有区别，它不需要使用 类 fraction 中的任何变量，因此它没有 this 指针，因此我们可以将它写成一个 static 。在 C++ 的一个类中将一个方法设置成 static 意味着调用它的时候，并不需要类的实例作为参数，你可以将它当作一个单独的函数来调用，而实际上它也确实是一个普通函数，只不过它的作用域是在类的定义中。但是 static 不能被继承。</p>\n<pre><code class=\"language-c++\">class fraction &#123;\n    public:\n    \tfraction(int n,int d = 1);\n    \n    \tvoid reduce();\n    \n    private:\n    \tstatic int gcd(int x,int y);\t\n&#125;\n</code></pre>\n<h3 id=\"编译与链接的工作原理\"><a class=\"markdownIt-Anchor\" href=\"#编译与链接的工作原理\">#</a> 编译与链接的工作原理</h3>\n<p>make 命令。使用 make 命令时，首先调用预处理器，预处理器一般用来处理 #define 和 #include 预处理指令，然后才是调用所谓的编译器，编译器负责将你的 <code>.C</code>  文件以及 <code>.cc</code>  生成对应的 <code>.o</code>  文件，这些文件在我们敲下 make 命令后就会在我们的目录下生成。之后进行链接操作，对 <code>.o</code>  文件进行链接，它会将一系列的 <code>.o</code>  文件按照顺序排序列起来，并且确保在执行过程中任何的调用函数都能够从该函数所在的 <code>.o</code>  文件中找到。之后生成可执行文件。</p>\n<h4 id=\"预处理器一部分\"><a class=\"markdownIt-Anchor\" href=\"#预处理器一部分\">#</a> 预处理器 (一部分)</h4>\n<p>在 C 语言中定义一个全局变量，一般使用 #define</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kWidth</span> <span class=\"token expression\"><span class=\"token number\">480</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">kHeight</span> <span class=\"token expression\"><span class=\"token number\">720</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Width is %d.\\n\"</span><span class=\"token punctuation\">,</span>kWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> area <span class=\"token operator\">=</span> kWidth <span class=\"token operator\">*</span> kHeight<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>预处理器读取到带有 # 的行时，预处理器内部会有某个 hashset，将 kWidth 作为 key，将 480 作为值进行链接。随后预处理器继续读程序，并将它所遇到的 kWidth 进行单纯的文字替换为 480，就好像你本来就写的是 480 一样。并且预处理器甚至不知道 480 是一个数，它只是认为是 4、8、0 字符拼接。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_7/",
            "url": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_7/",
            "title": "斯坦福编程范式CS107_7",
            "date_published": "2023-11-19T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_7\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_7\">#</a> 斯坦福编程范式 CS107_7</h1>\n<h2 id=\"使用栈来操纵字符串\"><a class=\"markdownIt-Anchor\" href=\"#使用栈来操纵字符串\">#</a> 使用栈来操纵字符串</h2>\n<p>接着上节课的栈的结构体</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 泛型中并不知道类型占用字节的大小，所以需要指定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> loglength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以下是 main 函数内容</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> friends<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Al\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Carl\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    stack stringStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stringStack<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>copy <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>friends<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 调用 strdup 会使用 malloc 函数，这和后面我们使用 free 函数是呼应的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stringStack<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stringStack<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stringStack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上述例子中，如何构造 StackDispose 使其能够完全的将栈中的特殊元素，诸如指针元素中指针所指的内容传递给 free 函数释放动态申请的内存较为难以实现，下面进行实现。</p>\n<h3 id=\"stackh\"><a class=\"markdownIt-Anchor\" href=\"#stackh\">#</a> stack.h</h3>\n<p>在结构体中新增加了一个 void 函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 泛型中并不知道类型占用字节的大小，所以需要指定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> loglength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>freefn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"stackc\"><a class=\"markdownIt-Anchor\" href=\"#stackc\">#</a> stack.c</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>freefn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>freefn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> loglength<span class=\"token punctuation\">,</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\ts<span class=\"token operator\">-></span><span class=\"token function\">freefn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>s-&gt;freefn != NULL</code>  表示栈中有复杂的结构，如 char* 或者套用了另一个结构体之类的，因而需要我们调用自己的函数手动进行清楚空间。</p>\n<h3 id=\"main\"><a class=\"markdownIt-Anchor\" href=\"#main\">#</a> main</h3>\n<p>还是假设栈是字符串栈。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stack stringStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stringStack<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>StringFree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StringFree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rotate函数\"><a class=\"markdownIt-Anchor\" href=\"#rotate函数\">#</a> rotate 函数</h2>\n<p>实现一个 rotate 函数，将一个数组的前几项内容整体全部复制并挪到数组的尾部，其余部分往前移动。</p>\n<p>调用 memcpy 函数时，地址是不能重叠的。memmove 函数与 memcpy 类似，只不过效率更低，对重叠元素进行处理，并进行数组移动。尽可能多用 memcpy 少用 memmove</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>middle<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> frontSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>middle <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> backSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>end <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>middle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>frontSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>front<span class=\"token punctuation\">,</span>frontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">,</span>backSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 这里只能用 memmove 不能用 memcpy</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>end<span class=\"token operator\">-</span>frontSize<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>frontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c语言中通用的快速排序\"><a class=\"markdownIt-Anchor\" href=\"#c语言中通用的快速排序\">#</a> C 语言中通用的快速排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Qsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cmpfn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c语言中的函数栈和堆栈\"><a class=\"markdownIt-Anchor\" href=\"#c语言中的函数栈和堆栈\">#</a> C 语言中的函数栈和堆栈</h2>\n<p>函数栈就不多说了，主函数高地址，每当调用新的函数时，就会入栈，从高地址到低地址，函数返回就会出栈。</p>\n<p>这里的堆栈指的不是一种优先队列数据结构，只是一块任意的字节。汇编代码一般都会在堆的低地址部分，由硬件进行管理；在汇编代码上方是由软件的堆内存管理器管理的，如 malloc、realloc、free 函数，是由软件管理的。</p>\n<p><img data-src=\"image-20231108204836201.png\" alt=\"image-20231108204836201\"></p>\n<p>堆内存是一个很大的线性的字节数组。当我们执行以下代码时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>malloc 函数会从堆的开始地址开始查找，找到第一块适合请求大小的空闲内存，并将这块内存标记为已占用，并返回内存的开始地址。继续执行下面的代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数发现开始的一段内存块已经被占用了，它会快速的到达这块内存块的尾部，从空闲位置进行内存分配，和上一步的步骤类似。如果再执行以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>free 函数会抹掉这段内存的被占用状态，释放内存。再执行如下命令：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数会查看第一段内存块，发现这是一段 40 字节大小的空内存块，由于小于 44 字节，所以会直接跳到下一段空闲的足够大的内存块。之后执行如下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这一次第一段的 40 字节内存块就足够大了，函数会将这块切下来并记录下是 20 字节大，然后再次返回这个指针。</p>\n<p>以上只是粗略的进行讲述堆栈的内存分配过程，实际上是有一个数据结构用来管理着整个堆栈，它使用了很多 void * 来进行内存管理，名字是空闲记录的链表，它始终记录着第一个空闲记录的地址，能够方便的找出哪一部分能够满足下一个 malloc 的需求</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_8/",
            "url": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_8/",
            "title": "斯坦福编程范式CS107_8",
            "date_published": "2023-11-19T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_8\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_8\">#</a> 斯坦福编程范式 CS107_8</h1>\n<h2 id=\"关于内存\"><a class=\"markdownIt-Anchor\" href=\"#关于内存\">#</a> 关于内存</h2>\n<p>当我们执行下述命令时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们都为以为返回的是 160 字节的内存，但实际上要比 160 多。在堆上，这段内存块开始的时候，会有一部分内存被用来记录这个内存块的大小。</p>\n<p><img data-src=\"image-20231113103637297.png\" alt=\"image-20231113103637297\"></p>\n<p>当我们执行如下命令时：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 当你觉得 100 个 int 类型的有点多，60 个就足够了，你尝试执行下面的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上是动态的申请空间。当执行 free 的时候，函数不会进行任何的完整性检查，malloc、free、reaclloc 都假设你是 C 或 C++ 语言编程高手。free 会机械的回退 4 或 8 字节，并将其中的内容理解为这一段要释放的内存的大小，并将这段长度的内存归还给堆。所以这样进行释放内存是不正确的。</p>\n<p>假设你以下述方式申请内存：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这是静态申请了数组空间，这种申请方式与堆内存无关，如果我们调用 free 函数，就会机械的向前回退 4 或 8 字节内存，并将其中的内容认为是要释放的内存的大小，并将这段长度的内存归还给堆。这样也不对，因为原先的内存不在堆中。</p>\n<h2 id=\"内存的分配\"><a class=\"markdownIt-Anchor\" href=\"#内存的分配\">#</a> 内存的分配</h2>\n<p>内存分配时有些实例会将堆进行分块，当一个内存申请小于 2 的 3 次方、5 次方、7 次方等，会被直接从堆的小、中、大块内存中进行分配，函数不会堆每次的内存分配精确的空间，而是通过规范大小的子内存段进行分配，这样可以更加快速的管理内存，并且内存段简洁且有组织。</p>\n<p><img data-src=\"image-20231113105637044.png\" alt=\"image-20231113105637044\"></p>\n<h2 id=\"堆中内存可用与不可用表示\"><a class=\"markdownIt-Anchor\" href=\"#堆中内存可用与不可用表示\">#</a> 堆中内存可用与不可用表示</h2>\n<p>当使用 malloc 或 realloc 时，函数希望能够快速的扫描堆中未使用的块。函数使用一个内存块的链表来记录可分配的区域，每次调用 malloc、realloc 内存管理器都会遍历这个链表，并找到某个足够大的内存块来满足请求。</p>\n<p><img data-src=\"image-20231113110446598.png\" alt=\"image-20231113110446598\"></p>\n<p>当使用 free 函数时，内存被释放并归还给堆时，这段内存块中的内容没有任何改变，没有清 0，只是其前四个字节指向下一段空闲内存开始地址，上一段空闲内存的指针指向这段内存的开始地址，现在系统认为这段内存就是空闲的。当然这样会导致内存中是分散的空闲内存，而没有整大段的空闲内存，有些实现会将空闲零碎的内存进行合并。</p>\n<p><img data-src=\"image-20231113111703122.png\" alt=\"image-20231113111703122\"></p>\n<p>假设一个堆有 200 字节，其中使用了 40 字节，还有 160 字节的空闲，但都是零碎的：</p>\n<p><img data-src=\"image-20231113112534202.png\" alt=\"image-20231113112534202\"></p>\n<p>如果用户动态申请 100 字节的空间，则无法提供，因为剩下的 160 字节内存都是零碎的。假如我们对堆内存进行整理，把已经占用的 40 字节都挪到一起，那么剩下的 160 字节就是一个整体了。但是这样做会出现一个问题：原先被占用的内存块的开始地址已经被分配给用户了，如果进行移动，则内存块的开始地址会变化，这和原先用户所获得的地址不一致。</p>\n<h2 id=\"堆内存的句柄管理\"><a class=\"markdownIt-Anchor\" href=\"#堆内存的句柄管理\">#</a> 堆内存的句柄管理</h2>\n<p>除去经典管理的部分，堆中的相当一部分的内存是通过句柄的方式进行管理的，其不再返回一个直接指向内存的地址，而是一个二级指针，即用户得到的是一个地址列表的某一个地址，地址列表中的地址指向句柄管理的内存。这个地址列表和堆内存都由管理器进行管理，这样在进行琐碎内存合并的时候，就可以进行重定向地址。当然这样也存在问题，在移动的内存的时候不可能对内存进行访问。</p>\n<p><img data-src=\"image-20231116151216582.png\" alt=\"image-20231116151216582\"></p>\n<p>所以在对某块内存进行使用时，就需要对系统发出 “不需要对这块内存进行压缩” 的命令，并在使用完这段内存的时候，再发出 “可以对这段内存进行压缩” 的命令。比较类似于并发。</p>\n<h2 id=\"栈段\"><a class=\"markdownIt-Anchor\" href=\"#栈段\">#</a> 栈段</h2>\n<p>栈的使用和函数的深度成比例。以下列函数为例</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">short</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">double</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">double</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述函数在被调用时都会对变量进行申请空间，A 申请的空间用六边形进行表示，B 申请的空间用三角形进行表示，C 申请的空间用圆进行表示。调用 A 的时候，栈会减去一个六边形空间用以存储 A 中的局部变量；随后 A 调用 B，栈会减去一个三角形空间大小用以存储 B 中的局部变量，B 只能访问这个三角形内存空间中的内容，而不知道它上方的内存都是些什么；随后 B 调用 C，因此栈会减去一个圆的空间大小以存储 C 中的局部变量。当 C 调用完毕后，栈指针会上升回到调用 C 之前的位置，C 内存空间的内容就是那个圆不会被清空，但是也已经无法被访问了；然后 B 调用完毕，指针回到 B 调用之前的位置。最后 A 调用 C，再指针向下移动一个圆的内存空间大小，覆盖了原先三角形的空间。</p>\n<p><img data-src=\"image-20231116154226894.png\" alt=\"image-20231116154226894\"></p>\n<h2 id=\"汇编代码和如何操作栈\"><a class=\"markdownIt-Anchor\" href=\"#汇编代码和如何操作栈\">#</a> 汇编代码和如何操作栈</h2>\n<p>使用 C 或者 C++ 模拟汇编语言的思路。</p>\n<p>在计算机中存在寄存器，寄存器和内存 RAM 相连，也和 ALU 逻辑运算器相连。寄存器通常是 4 字节大的，并且可以非常快速的进行访问。 <code>对任何变量进行加减乘除等运算时，都会将变量读取到寄存器中进行算数运算，不论变量是在栈中还是堆中，然后将结果写入其他寄存器中，然后将存储在寄存器中的内容写到属于它的内存中</code> 。</p>\n<p><img data-src=\"image-20231116161410592.png\" alt=\"image-20231116161410592\"></p>\n<p>如果将 ALU 直接和 RAM 进行相连，就会使时间大大增加。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_10/",
            "url": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_10/",
            "title": "斯坦福编程范式CS107_10",
            "date_published": "2023-11-19T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_10\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_10\">#</a> 斯坦福编程范式 CS107_10</h1>\n<h2 id=\"考虑完整的函数带有参数\"><a class=\"markdownIt-Anchor\" href=\"#考虑完整的函数带有参数\">#</a> 考虑完整的函数 (带有参数)</h2>\n<p>考虑申请一个如下的函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bar<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> snink<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>why<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数的传入变量和函数体内声明的局部变量在内存空间中是很近的。参数和局部变量的内存空间之间用了 4 字节进行分割，并且参数从右往左是从高地址到低地址的，所以 baz 的地址在 bar 之上。中间的四字节也十分重要，其中存储着调用函数的某些信息，它会告知我们是哪块代码调用了 <code>foo</code> 。</p>\n<p><img data-src=\"image-20231119164251173.png\" alt=\"image-20231119164251173\"></p>\n<p>考虑使用 main 函数进行案例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当运行 main 函数时，我们将会演示整个内存空间是如何变化的。首先是 main 函数本身，具有两个参数 argc 和 argv，并且有一个 saved PC 的四字节空间</p>\n<p><img data-src=\"image-20231119165116530.png\" alt=\"image-20231119165116530\"></p>\n<p>接着对 i 进行初始化，并赋值为 4 。</p>\n<p>此时汇编代码如下所示，SP 是一个特殊的寄存器，为 stack pointer 它总是指向栈的最低地址。</p>\n<pre><code class=\"language-assembly\">SP = SP - 4;\nM[SP] = 4;\n</code></pre>\n<p>接着开始调用 foo 函数，下面的汇编代码将 i 以及 i 的地址 作为参数传入预留给 foo 函数的参数空间中，并将控制权移交给  <code>foo</code> 。CALL 类似于一个跳转命令，它会跳转到 foo 函数的汇编代码中，并在其执行结束后再跳转回 main 中。</p>\n<p>SP 最后会加 8，这部分内容 (SP = SP + 8) 也会被存储到 saved PC 中，这部分操作实际上是在执行 CALL 函数后自动进行的。当 foo 函数执行完毕后，它能根据记录的信息跳回到调用之前的地址。</p>\n<pre><code class=\"language-assembly\">SP = SP - 8;\nR1 = M[SP + 8];\nR2 = SP + 8;\nM[SP] = R1;\nM[SP + 4] = R2;\nCALL &lt;foo&gt;;\nSP = SP + 8;\n</code></pre>\n<p><img data-src=\"image-20231119173920404.png\" alt=\"image-20231119173920404\"></p>\n<p>随后我们开始执行 foo 函数中的代码。假设 foo 函数如下：</p>\n<p><code>&lt;foo&gt;:</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bar<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> snink<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>why<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    why <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>snink <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">*</span>why <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>foo <strong>首先</strong>为变量分配空间</p>\n<p>汇编代码如下所示：</p>\n<pre><code class=\"language-assembly\">SP = SP - 8;\n</code></pre>\n<p><img data-src=\"image-20231119175325503.png\" alt=\"image-20231119175325503\"></p>\n<p><strong>随后</strong>执行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>why <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>snink <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也就是认为一个 short 类型的地址 why 被赋为从图中圈圈的地方开始的地址。</p>\n<p><img data-src=\"image-20231119175641263.png\" alt=\"image-20231119175641263\"></p>\n<p>汇编代码：</p>\n<pre><code class=\"language-assembly\">R1 = SP + 6;\nM[SP] = R1;\n</code></pre>\n<p><strong>接着</strong>执行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span>why <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>汇编代码：</p>\n<pre><code class=\"language-assembly\">R1 = M[SP];\nM[R1] = .2 50;\n</code></pre>\n<p>现在 foo 函数中的内容执行完毕，现在函数应该退出并且以某种方式返回到 main 函数中，即执行下面的汇编代码。SP + 8 意思是将申请的局部空间释放掉，SP 回到申请局部变量空间前的位置。执行 RET 的时候，会让 saved PC 中的内容取出来，并读入 PC 中以便跳回到 main 函数中，并让 SP + 4。</p>\n<pre><code class=\"language-assembly\">SP = SP + 8;\nRET;\n</code></pre>\n<p>现在在 main 函数中，走到了汇编代码的这个位置。接着执行 RV = 0 即 <code>return 0；</code></p>\n<pre><code class=\"language-assembly\">CALL &lt;foo&gt;;\n--&gt; SP = SP + 8;\nRV = 0;\n</code></pre>\n<h2 id=\"举一个一般活动过程的例子\"><a class=\"markdownIt-Anchor\" href=\"#举一个一般活动过程的例子\">#</a> 举一个一般活动过程的例子</h2>\n<p>第一部分是函数的参数，被函数的调用者，比如 main 函数初始化并预留空间；第二部分是 saved PC；第三部分是 函数的局部变量，是被调用的函数自己初始化并预留的空间。</p>\n<p><img data-src=\"image-20231119183230396.png\" alt=\"image-20231119183230396\"></p>\n<p>为什么要这样呢？为什么不直接由 main 函数预留这些空间？或者由被调用函数预留这些空间？因为谁申请的空间谁就要负责为这些空间进行赋值。所以参数部分只能由调用者进行初始化，局部变量只能由被调用的函数进行初始化。</p>\n<h2 id=\"举一个更有意义的函数的例子\"><a class=\"markdownIt-Anchor\" href=\"#举一个更有意义的函数的例子\">#</a> 举一个更有意义的函数的例子</h2>\n<p>函数 factorial 如下所示</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fa</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数的汇编代码如下所示</p>\n<pre><code class=\"language-assembly\">R1 = M[SP + 4];\nBNE R1,0,PC+12;\t\t//如果n不为0则进行跳转，否则按顺序执行\nRV = 1;\t\t\t\t//return 1\nRET;\t\t\t\t//返回到被调用前的位置\nR1 = M[SP+4];\nR1 = R1 - 1;\t\t// 先得到 n - 1 的值\nSP = SP - 4;\t\t// \nM[SP] = R1;\t\t\t// 将n - 1 存放到空间中，作为下一个调用函数的参数\nCALL&lt;fa&gt;;\nSP = SP + 4;\t\t// 调用的函数返回后，释放掉参数的空间\nR1 = M[SP + 4];\nRV = RV * R1;\t    // return n * RV\nRET;\n</code></pre>\n<p>这段例子在这节课的  <code>42 分钟</code> 开始有一个幻灯片例子，很清晰。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_9/",
            "url": "http://yanagi-kon.github.io/2023/11/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_9/",
            "title": "斯坦福编程范式CS107_9",
            "date_published": "2023-11-19T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_9\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_9\">#</a> 斯坦福编程范式 CS107_9</h1>\n<h2 id=\"c语言与汇编语言的对照\"><a class=\"markdownIt-Anchor\" href=\"#c语言与汇编语言的对照\">#</a> C 语言与汇编语言的对照</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述代码在汇编中的形式为：</p>\n<pre><code class=\"language-assembly\">M[R1+4] = 10;\t\t//store operation\nR2 = M[R1+4];\t\t//load operation\nR3 = R2 + 7;\t\t//ALU operation\nM[R1] = R3;\t\t\t//store operation\nR2 = M[R1];\nR2 = R2 + 1;\nM[R1] = R2;\n</code></pre>\n<p>大写的 M 代表整个 RAM，将整个 RAM 看作是一个非常大的字节数组，R1 存储的是基地址，4 是偏移量。意思是，从基地址开始的四个字节写入数据 10。R1 存储的是 j 的地址。</p>\n<p><img data-src=\"image-20231118153659076.png\" alt=\"image-20231118153659076\"></p>\n<p>有人可能会问，“为什么不直接使用 M [R1]++”。因为在汇编语言中不允许直接对地址中的值进行修够，必须先通过 load operation 将其装载到寄存器中，对寄存器进行操作，并再将结果写回内存，这会使汇编语言更加简单，指令简单则时钟频率更快。</p>\n<h3 id=\"下面举一个不是-4-字节变量的例子\"><a class=\"markdownIt-Anchor\" href=\"#下面举一个不是-4-字节变量的例子\">#</a> 下面举一个不是 4 字节变量的例子：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">short</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">short</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s2 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231118154657047.png\" alt=\"image-20231118154657047\"></p>\n<pre><code class=\"language-assembly\">M[R1+4] = 200;\t\n</code></pre>\n<p>对于 s1 = i 如果不可以直接用一下汇编语言实现</p>\n<pre><code class=\"language-assembly\">M[R1+2] = M[R1+4]; //这样翻译是错误的，因为汇编语言中，load 和 store 不能同时进行\n</code></pre>\n<p>也不可以用以下方法，因为 short 类型只有 2 字节，当被赋值 R2 这 4 个字节时，4 字节数据会被传输给 s1，s1 将会是 0（因为 R2 的高二位字节为 0），而 i 会变成一个非常大的数（因为 i 的高二位字节被分别赋值为了 0 和 200）。</p>\n<pre><code class=\"language-assembly\">R2 = M[R1+4];\t\nM[R1+2] = R2;\n</code></pre>\n<p>需要修改为：</p>\n<pre><code class=\"language-assembly\">R2 = M[R1+4];\t\nM[R1+2] = .2 R2; //移动两个字节，而不是4个\n</code></pre>\n<p>对于 s2 = s1 + 1; 汇编语言为：</p>\n<pre><code class=\"language-assembly\">R2 = .2 M[R1+2];\nR3 = R2 + 1;\nM[R1] = .2 R3;\n</code></pre>\n<h3 id=\"for循环是如何翻译的\"><a class=\"markdownIt-Anchor\" href=\"#for循环是如何翻译的\">#</a> for 循环是如何翻译的</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>首先是内存的申请，假设现在已经申请好了空间，那么执行 for 循环，第一步就是 i = 0</p>\n<pre><code class=\"language-assembly\">M[R1] = 0;\n</code></pre>\n<p>下面进行判断关系 i &lt; 4。这里的 BGT 是分支指令 branch greater or equal 的缩写，意思就是如果第一个参数大于等于第二个参数就进行跳转到第三个参数的地址上，否则继续按顺序执行。</p>\n<pre><code class=\"language-assembly\">R2 = M[R1];\nBGE  R2,4,PC+? \t//这里暂时不知道从基地址偏移多少个4字节(汇编指令的大小)\nR3 = M[R1];\t\t//R3就是i\nR4 = R3 * 4;\t//乘4因为int占4字节，R4是相较于数组基地址偏移后的地址\nR5 = R1 + 4;\t//R5是数组的基地址\nR6 = R5 + R4\t//R6是本轮循环要操作的数组元素的地址\nM[R6] = 0;\t\t//array[i] = 0;\n</code></pre>\n<p>接着进行 i ++</p>\n<pre><code class=\"language-assembly\">R2 = M[R1];\nR2 = R2 + 1;\nM[R1] = R2;\n</code></pre>\n<p>接着执行分支指令，跳回判断语句，这里是无条件跳转，即 JMP</p>\n<pre><code class=\"language-assembly\">JMP PC-40;\n</code></pre>\n<p>下面该写循环执行完，跳出循环后的 i – 了，并且现在我们可以把循环中的？给替换了，可以知道偏移应该是 10 条指令的大小，也就是 40。所以 <code>?=40</code> 。</p>\n<pre><code class=\"language-assembly\">R2 = M[R1];\nR2 = R2 - 1;\nM[R1] = R2;\n</code></pre>\n<p>对于 32 位操作系统，汇编代码指令一共有 32 位，为了能够表示 59 中汇编指令，需要 6 位进行表示，就是前六位是操作码。硬件会在一个时钟周期的前一部分，查看前 6 位机器码是什么，然后再决定如何解释剩下的 26 位。当然，这是使用定长编码对汇编指令进行编码，也可以使用非定长的编码方式。</p>\n<h2 id=\"指针和强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#指针和强制类型转换\">#</a> 指针和强制类型转换</h2>\n<p>下面以一个结构体为例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> denom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span> pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pi<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pi<span class=\"token punctuation\">.</span>denom <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于结构体，其内存如下图所示</p>\n<p><img data-src=\"image-20231118165258248.png\" alt=\"image-20231118165258248\"></p>\n<p>对于上述代码的汇编语言为：</p>\n<pre><code class=\"language-assembly\">M[R1] = 22;\nM[R1+4] = 7;\n</code></pre>\n<p>如果再进行以下操作：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">fraction</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">.</span>denom<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> denom <span class=\"token operator\">=</span> <span class=\"token number\">451</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这句代码的意思就是：</p>\n<p><img data-src=\"image-20231118165751885.png\" alt=\"image-20231118165751885\"></p>\n<p>那么这里的汇编代码是什么样的？如下：</p>\n<pre><code class=\"language-assembly\">M[R1+8] = 451;\n</code></pre>\n<p>pi 的地址是 M [R1]，pi.denom 的地址是 M [R1+4]，对其进行强制类型转换不会改变它的地址，-&gt;denom 的地址是 M [R1+4+4]。</p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/06/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_6/",
            "url": "http://yanagi-kon.github.io/2023/11/06/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_6/",
            "title": "斯坦福编程范式CS107_6",
            "date_published": "2023-11-06T00:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_6\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_6\">#</a> 斯坦福编程范式 CS107_6</h1>\n<h2 id=\"实现一个整型的栈下\"><a class=\"markdownIt-Anchor\" href=\"#实现一个整型的栈下\">#</a> 实现一个整型的栈（下）</h2>\n<p>在 C 语言中结构体中的所有内容都是隐式的 public ，无法像 C++ 那样，实现 private protect 之类的限定词进行限制，但是我们可以假装里面的内容是不可见的，并要求通过我们定义的函数对其中的内容进行操作。</p>\n<p>下面内容在  <code>stack.h</code>  文件中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> logicalLen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 已经使用的内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 申请的内存大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上节课实现的 New 以及我们接下来要实现的其他函数，他们都在  <code>stack.c</code>  文件中</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>logicallen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>allocLen <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 动态分配内存函数，返回这一大块内存地址的开始地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如果 assert 里面的内容为 false，assert 会终止程序，并告知终止位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是 Dispose 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有人可能会问，能否直接使用  <code>free(s)</code>  实现直接对栈进行释放内存？答案是不可以，因为除了在 New 函数中，其他任何地方对这个栈变量分配空间。 <code>free(s)</code>  这样操作的假设是 s 栈空间已经被分配好，并将它被 New 函数所指定的地址作为参数传递给 Dispose。</p>\n<p>下面是 Push 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">==</span> s<span class=\"token operator\">-></span>alloclength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//realloc 首先假设第一个参数指向了一个动态申请的内存块，随后将其调整成第二个参数大小，如果可以调整，则返回第一个\t\t// 参数原先的地址，否则就使用 alloc 另开一块地址，返回新的地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>logicalLen<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>valus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">++</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是 Pop 的实现</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>logicalLen <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    logicalLen<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>logicalLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现上述类型的通用模板\"><a class=\"markdownIt-Anchor\" href=\"#实现上述类型的通用模板\">#</a> 实现上述类型的通用模板</h2>\n<h3 id=\"stackh\"><a class=\"markdownIt-Anchor\" href=\"#stackh\">#</a> stack.h</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 泛型中并不知道类型占用字节的大小，所以需要指定</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> loglength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"stackc\"><a class=\"markdownIt-Anchor\" href=\"#stackc\">#</a> stack.c</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>elemSize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>elemSize <span class=\"token operator\">=</span> elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">==</span> s<span class=\"token operator\">-></span>alloclength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">StackGrow</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 这里添加了一个辅助函数用于进行内存空间拓展</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>target <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">+</span> s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">*</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 <code>static</code>  修饰 c 或者 c<ins> 的函数原型时，这意味着，这是一个私有函数，不应该在函数所在文件之外的地方对其引用，因此在大多数情况下，它和 C</ins> 中的 private 有着相同的含义。其他的函数诸如我们上面写的 New、Disopose、Push 等都是全局函数，可以被其他的 <code>.o</code>  文件所使用</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">StackGrow</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>alloclength <span class=\"token operator\">*</span> s<span class=\"token operator\">-></span>slemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>source <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>loglength <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>elemAddr<span class=\"token punctuation\">,</span>source<span class=\"token punctuation\">,</span>s<span class=\"token operator\">-></span>elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>loglength<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_3/",
            "title": "斯坦福编程范式CS107_3",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_3\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_3\">#</a> 斯坦福编程范式 CS107_3</h1>\n<h2 id=\"1大端存储小端存储\"><a class=\"markdownIt-Anchor\" href=\"#1大端存储小端存储\">#</a> 1. 大端存储，小端存储</h2>\n<p>端模式（Endian）的这个词出自 Jonathan Swift 书写的《格列佛游记》。这本书根据将鸡蛋敲开的方法不同将所有的人分为两类，** 从圆头开始将鸡蛋敲开的人被归为 Big Endian，从尖头开始将鸡蛋敲开的人被归为 Littile Endian（这句话最为形象）。** 小人国的内战就源于吃鸡蛋时是究竟从大头（Big-Endian）敲开还是从小头（Little-Endian）敲开。在计算机业 Big Endian 和 Little Endian 也几乎引起一场战争。在计算机业界，Endian 表示数据在存储器中的存放顺序。下文举例说明在计算机中大小端模式的区别。</p>\n<p>如果将一个 32 位的整数 0x12345678 存放到一个整型变量（int）中，这个整型变量采用大端或者小端模式在内存中的存储由下表所示。为简单起见，本文使用 OP0 表示一个 32 位数据的最高字节 MSB（Most Significant Byte），使用 OP3 表示一个 32 位数据最低字节 LSB（Least Significant Byte）。</p>\n<table>\n<thead>\n<tr>\n<th>地址偏移</th>\n<th>大端模式</th>\n<th>小端模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>12（OP0）</td>\n<td>78（OP3）</td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>34（OP1）</td>\n<td>56（OP2）</td>\n</tr>\n<tr>\n<td>0x02</td>\n<td>56（OP2）</td>\n<td>34（OP1）</td>\n</tr>\n<tr>\n<td>0x03</td>\n<td>78（OP3）</td>\n<td>12（OP0）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>小端： <code>较高的有效字节存放在较高的的存储器地址</code> ， <code>较低的有效字节</code> 存放在 <code>较低的存储器地址</code> 。</li>\n<li>大端： <code>较高的有效字节存放在较低的存储器地址</code> ， <code>较低的有效字节</code> 存放在 <code>较高的存储器地址</code> 。</li>\n</ul>\n<p>采用大小模式对数据进行存放的主要区别在于在存放的字节顺序，大端方式将 <code>高数据位</code> 存放在 <code>低地址</code> ，小端方式将 <code>高数据位</code> 存放在 <code>高地址</code> 。采用大端方式进行数据存放符合人类的正常思维，而采用小端方式进行数据存放利于计算机处理。到目前为止，采用大端或者小端进行数据存放，其孰优孰劣也没有定论。大端与小端模式的差别体现在一个处理器的寄存器，指令集，系统总线等各个层次中。</p>\n<p>用函数判断系统是 Big Endian 还是 Little Endian</p>\n<p>方法一：</p>\n<p>short 类型占用 2 字节， char 类型占用 1 字节</p>\n<pre><code class=\"language-C\">//如果字节序为big-endian，返回true;  \n//反之为   little-endian，返回false  \n\nbool IsBig_Endian()\n&#123;\n    unsigned short test = 0x1234;\n    if(*( (unsigned char*) &amp;test ) == 0x12)\n       return TRUE;\n   else\n       return FALSE;\n&#125;//IsBig_Endian()\n</code></pre>\n<p>方法二：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">checkCPUendian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回 1，为小端；反之，为大端；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>  a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    c<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>字节序的使用：</p>\n<p>大端模式处理器的字节序到网络字节序不需要转换，此时 ntohs (n)=n，ntohl =n；而小端模式处理器的字节序到网络字节必须要进行转换 (同理，有时候需要将大端字节顺序转换成小端字节顺序，也用这个函数，因为这个函数本来就是用来颠倒字节顺序的)，转换如下：</p>\n</li>\n</ul>\n<pre><code class=\"language-C\">#if defined(BIG_ENDIAN) &amp;&amp; !defined(LITTLE_ENDIAN)\n   #define htons(A)  (A)\n   #define htonl(A)  (A)\n   #define ntohs(A)  (A)\n   #define ntohl(A)  (A)\n\n#elif defined(LITTLE_ENDIAN) &amp;&amp; !defined(BIG_ENDIAN)\n   #define htons(A)  ((((uint16_t)(A) &amp; 0xff00) &gt;&gt; 8 ) | \\\\\n                      (((uint16_t)(A) &amp; 0x00ff) &lt;&lt; 8 ))\n   #define htonl(A)  ((((uint32_t)(A) &amp; 0xff000000) &gt;&gt; 24)  | \\\\\n                      (((uint32_t)(A) &amp; 0x00ff0000) &gt;&gt; 8 )  | \\\\\n                      (((uint32_t)(A) &amp; 0x0000ff00) &lt;&lt; 8 )  | \\\\\n                      (((uint32_t)(A) &amp; 0x000000ff) &lt;&lt; 24))\n   #define ntohs     htons\n   #define ntohl     htohl\n#else\n   #error Either BIG_ENDIAN or LITTLE_ENDIAN must be #defined, but not both.\n#endif\n</code></pre>\n<h2 id=\"2关于数组\"><a class=\"markdownIt-Anchor\" href=\"#2关于数组\">#</a> 2. 关于数组</h2>\n<h3 id=\"例子一\"><a class=\"markdownIt-Anchor\" href=\"#例子一\">#</a> 例子一</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>array 等价于 &amp;array [0]</p>\n<p>array + k 等价于 &amp;array [k]</p>\n<p>*array 等价于 array [0]</p>\n<p>*(array + k) 等价于 array [k]</p>\n<h3 id=\"例子二\"><a class=\"markdownIt-Anchor\" href=\"#例子二\">#</a> 例子二</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个时候打印出来的不是 128，而是 512 + 128，这个时候在 arr [3] 中的内容为：</p>\n<p>00000000 00000010 128 = 512 + 128 （这里在课上应该是采用的小端方法）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"3关于struct\"><a class=\"markdownIt-Anchor\" href=\"#3关于struct\">#</a> 3. 关于 Struct</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">char</span> suid<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> numUnits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>student pupils<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>numUnits <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adam\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//strdup 是内存复制的缩写，动态地分配足够的空间来存储字符串</span></pre></td></tr></table></figure><p><img data-src=\"image-20231102162141584.png\" alt=\"image-20231102162141584\"></p>\n<p>进行如下操作后，内存中的情况如下图所示</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> pupils<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231102162918438.png\" alt=\"image-20231102162918438\"></p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid<span class=\"token punctuation\">,</span><span class=\"token string\">\"40415xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231102163240269.png\" alt=\"image-20231102163240269\"></p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231102163922391.png\" alt=\"image-20231102163922391\"></p>\n<p>这样就会导致 student [0] 的 numUnits 会是一个非常大的数，但是 pupils [3].name 还是正常的 123456.</p>\n<p>继续进行如下操作</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pupils<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>suid<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4高级函数\"><a class=\"markdownIt-Anchor\" href=\"#4高级函数\">#</a> 4. 高级函数？</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span>ap <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>bp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">*</span>bp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">117</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_4/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_4/",
            "title": "斯坦福编程范式CS107_4",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_4\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_4\">#</a> 斯坦福编程范式 CS107_4</h1>\n<h2 id=\"使用c做出类似c中模板的效果\"><a class=\"markdownIt-Anchor\" href=\"#使用c做出类似c中模板的效果\">#</a> 使用 C 做出类似 C++ 中模板的效果</h2>\n<p>还是第三节中的交换函数，因为中间变量 temp 被声明为 int，所以系统就隐式默认这个在进行 4 字节的复制，所以我们不可能使用之前的函数进行 double 类型或者其他类型变量的交换。我们可以通过通用的指针类型 void * 来达到不提前限制类型的效果，它说明指向没有任何类型信息的某些东西。</p>\n<p>但如果你按照下述内容进行编码运行，就会出现问题</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">*</span>vp1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">*</span>vp2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先，void temp 会报错，因为不能将变量定义为 void 类型。其次，不能对 void * 进行解引用，因为机器不知道要取出来多少字节来作为操作的一部分。因此我们还需要第三个参数，大小 size。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span>vp1<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 和 strcpy 很像，但它不会检测 \\0，所以需要人为设置需要拷贝的字节大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>vp1<span class=\"token punctuation\">,</span>vp2<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>vp2<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在假设我们有以下变量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>husband <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>wife <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wilma\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231103184829084.png\" alt=\"image-20231103184829084\"></p>\n<p>如果我们想将 husband 和 wife 的名字调换一下，我们实际上只需要将其所指的指针调换即可，使 husband 指向 wilma，使 wife 指向 Fred。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>husband<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>wife<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 这里需要取地址，因为我们实际上交换的就是 h 和 w 所指向的内容，当我们想要交换两\t\t\t\t\t\t\t\t\t\t// 个 int 变量时，我们传入的时 int *，那么我们想要交换两个 char * 变量时，应该\t\t\t\t\t\t\t\t\t\t  // 传入的是 char **</span></pre></td></tr></table></figure><p>但是如果你忘记加 &amp;，程序仍然会编译并运行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>husband<span class=\"token punctuation\">,</span>wife<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样最终结果会直接改变两个字符串的值，分别为 wilm 和 Freda。</p>\n<h2 id=\"例子\"><a class=\"markdownIt-Anchor\" href=\"#例子\">#</a> 例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>key<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这一步在位的层面上比较是的 4 个字节是否相等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我们想让这个函数泛化，不只是查找一个 int 类型的 key，就需要多加一些参数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>base <span class=\"token operator\">+</span> i<span class=\"token operator\">*</span>elemSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将 void * 类型转换成 char * 类型，以便编译器能进行运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">,</span>elemSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">return</span> elemAddr<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在内存层面，一个字节一个字节进行比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述方法使用的是系统提供的比较函数，在下次课程中，将会使用下面的代码，在变量中加入了比较函数的指针 *cmpfn 来完成 memcmp 函数的功能。</p>\n<pre><code>void *lsearch(void *key, void *base,int n,int elemSize,int (*cmpfn)(void *,void *))&#123;\n\n&#125;\n</code></pre>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/",
            "url": "http://yanagi-kon.github.io/2023/11/05/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_5/",
            "title": "斯坦福编程范式CS107_5",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"斯坦福编程范式cs107_5\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_5\">#</a> 斯坦福编程范式 CS107_5</h1>\n<h2 id=\"接着上节课的例子\"><a class=\"markdownIt-Anchor\" href=\"#接着上节课的例子\">#</a> 接着上节课的例子</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> elemSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cmpfn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elemAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>base <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> elemSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">cmpfn</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>elemAddr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//cmpfn 函数就是比较传入的地址中的内容是否一样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> elemAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是一个使用上述函数的例子</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>found <span class=\"token operator\">=</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>number<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>IntCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//IntCmp 是用来比较的函数，之后再进行实现</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">IntCmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elem1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>elem2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ip1 <span class=\"token operator\">=</span> elem1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ip2 <span class=\"token operator\">=</span> elem2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ip1 <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>ip2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们再来举一个如果数组是字符串的例子</p>\n<p><img data-src=\"image-20231104095657611.png\" alt=\"image-20231104095657611\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> notes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"F#\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Gb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>favoriteNote <span class=\"token operator\">=</span> <span class=\"token string\">\"Eb\"</span><span class=\"token punctuation\">;</span>\\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>found <span class=\"token operator\">=</span> <span class=\"token function\">lsearch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>favoriteNote<span class=\"token punctuation\">,</span>notes<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>StrCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//&amp;favoriteNote 是一个 char **</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StrCmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp1<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp1<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 强制转换为 char ** 再对其解引用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>vp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//clib 中自带的一个字符一个字符的比较</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述例子中，为何不直接将 vp 强制转换为 char * 类型的呢？因为我们的 notes 数组实际上相当于 char**，于是我们知道实际上 vp 与我们的字符串 &quot;Ab&quot; 之类的有两跳的距离，对 vp 解一次引用我们能得到的是指向字符串的首地址，再解一次引用得到的是字符串的首字符。strcmp 函数需要的是字符串的首地址，所以我们对 vp 强制转换为 char**，再解一次引用即可。如果直接使用 (char*) vp1，系统就会误把存储着字符串的地址认为是字符串，所以不能够直接强制转换为 char*。</p>\n<p>favoriteNote 是一个 char * 类型的变量，&amp;favoriteNote 是一个 char ** 类型的变量，当然也可以传入 favoriteNote，但是这样就破坏了函数变量处理的对称性，因为在之后的处理中，我们的 vp 都是 char ** 进行处理的，而 favoriteNote 按 char * 进行处理。</p>\n<h2 id=\"实现一个栈stackh\"><a class=\"markdownIt-Anchor\" href=\"#实现一个栈stackh\">#</a> 实现一个栈 Stack.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>elems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> logicalLen<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 已经使用的内存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> alloclength<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 申请的内存大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackDispose</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackPush</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">StackPop</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述的结构是 12 字节的，并且都是隐式的 public，但是我们要将其当作黑盒来处理，使用外在的函数对结构进行操作。</p>\n<p>当执行下面代码时，c 会为你保留一部分内存空间，但不会像 java 那样将内存空间清 0。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stack s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image-20231104105236562.png\" alt=\"image-20231104105236562\"></p>\n<p>假设，当我们使用 StackNew (&amp;s); 时，系统会预申请一个能存入 4 个 int 的大小空间，这时进行任何操作都是非常迅速的，因为空间已经提前申请好了；当存入的数超过 4 个时，系统会再申请一个翻倍的空间，并把原先空间中的内容搬过来，原先空间删除。</p>\n<p>下面实现一部分内容：</p>\n<p><code>s</code>  是一个局部变量，它假设的是它指向的是一个 12 字节的内存空间，并且内容未知。</p>\n<p><img data-src=\"image-20231104110715544.png\" alt=\"image-20231104110715544\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">StackNew</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token operator\">-></span>logicallen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    s<span class=\"token operator\">-></span>allocLen <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s<span class=\"token operator\">-></span>elems <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 动态分配内存函数，返回这一大块内存地址的开始地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>elems <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如果 assert 里面的内容为 false，assert 会终止程序，并告知终止位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        },
        {
            "id": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "url": "http://yanagi-kon.github.io/2023/09/19/%E6%96%AF%E5%9D%A6%E7%A6%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8FCS107_2/",
            "title": "斯坦福编程范式CS107_2",
            "date_published": "2023-09-19T12:28:00.000Z",
            "content_html": "<h2 id=\"斯坦福编程范式cs107_2\"><a class=\"markdownIt-Anchor\" href=\"#斯坦福编程范式cs107_2\">#</a> 斯坦福编程范式 CS107_2</h2>\n<table>\n<thead>\n<tr>\n<th><strong>C/C++</strong></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bool</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td>char</td>\n<td style=\"text-align:left\">1  byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td style=\"text-align:left\">2  bytes</td>\n</tr>\n<tr>\n<td>int</td>\n<td style=\"text-align:left\">2–4 bytes</td>\n</tr>\n<tr>\n<td>long</td>\n<td style=\"text-align:left\">4 bytes</td>\n</tr>\n<tr>\n<td>long long</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n<tr>\n<td>float</td>\n<td style=\"text-align:left\">4  bytes</td>\n</tr>\n<tr>\n<td>double</td>\n<td style=\"text-align:left\">8  bytes</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\"><a class=\"markdownIt-Anchor\" href=\"#1为什么二进制中不简单的将-1-置在最左侧表示负数如-3为-1011\">#</a> 1.\t为什么二进制中不简单的将 1 置在最左侧表示负数（如，-3 为 1011）</h4>\n<p>因为如果是这样的话，-3 + 3 将等于：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1011</span> <span class=\"token operator\">+</span> <span class=\"token number\">0011</span> <span class=\"token operator\">=</span> <span class=\"token number\">1110</span></pre></td></tr></table></figure><p>显然结果是 -6 而不是 0。所以为了使正负数相加得到全 0 或全 1，如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1100</span> <span class=\"token operator\">+</span> <span class=\"token number\">0011</span> <span class=\"token operator\">=</span> <span class=\"token number\">1111</span></pre></td></tr></table></figure><p>这样得到全 1 后，我们只需要再 +1，就可以得到全 0：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1111</span> <span class=\"token operator\">+</span> <span class=\"token number\">0001</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token number\">0000</span>   这里的<span class=\"token number\">1</span>越界了所以不算</pre></td></tr></table></figure><p>所以实际上，我们采用 <strong>全部取反 并 +1</strong> 的方式用来表示负数： -3 （1101）. 这种方法就叫做  <code>2补码</code></p>\n<p>在 short 类型中，为了使 正数和负数 的数量一致，我们把最左边的那一比特空出，用于分割正数和负数，即正数最大为 $2^{15} -1 $：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>负数最小是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">- 2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><h4 id=\"2语言中变量间的相互赋值是如何实现的\"><a class=\"markdownIt-Anchor\" href=\"#2语言中变量间的相互赋值是如何实现的\">#</a> 2.\t语言中变量间的相互赋值是如何实现的？</h4>\n<p>当我们运行如下程序的时候：</p>\n<pre><code class=\"language-c++\">char ch = 'A';\nshort s = ch;\ncout &lt;&lt; s &lt;&lt; endl;\n------\n65\n</code></pre>\n<p>在内存中就是这样进行的：(每一个格子代表 1byte)，内存直接将 <code>ch</code>  的内容复制道 <code>s</code>  中。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ch</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">65</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">65</td>\n</tr>\n</tbody>\n</table>\n<p>如果运行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = 67;\nchar ch = s;\ncout &lt;&lt; ch &lt;&lt; endl;\n------\nC\n</code></pre>\n<p>进行如上赋值操作时，16bit 不能够被直接压缩成为 8bit 的模式。因而 C 和 C++ 中会简单的只关注低位上的内容，而把高位内容直接丢弃。</p>\n<p>如果进行如下程序时：</p>\n<pre><code class=\"language-c++\">short s = -1;\nint i = s;\t\n</code></pre>\n<p>内存中所进行的操作是这样的：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">s</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">1…1</th>\n<th style=\"text-align:center\">1…1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n<td style=\"text-align:center\">1…1</td>\n</tr>\n</tbody>\n</table>\n<p>这种操作被称为 “符号扩展”。会将 符号位一位一位向上复制，就会导致 int 的前两字节内全变为 1，使得实际的数值仍然为  <code>-1</code></p>\n<h5 id=\"3浮点数float\"><a class=\"markdownIt-Anchor\" href=\"#3浮点数float\">#</a> 3.\t浮点数 float</h5>\n<p>对于浮点数 float，其将整数范围缩小，节省下来的 bit 位用来表示 2 的负次幂，这样就可以表示小数了。这是技术上可以实现的一种方式，但 <code>实际上并不是这样</code> 。</p>\n<p>实际上对于浮点数这样 4 byte 大小的数，浮点数将其中的 1 位用来表示符号，将其中的 8 位用来表示整数，剩下的 23 位用来表示小数。如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s \t\t\t<span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span>bit<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token function\">xxxxxxxx</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span>bit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那么任何一个数都可以用如下形式进行表示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>S</mi></msup><mtext>  </mtext><mn>1.</mn><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mi>x</mi><mtext>  </mtext><mo>×</mo><mtext>  </mtext><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mn>127</mn></mrow></msup><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mo stretchy=\"false\">(</mo><mn>255</mn><mo>≥</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>≥</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)^S\\;1.xxxxxxxxx\\;×\\;2^{exp-127}     \\;\\;\\;\\;\\;\\;(255≥exp≥0)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1413309999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>例如，对于 7.0，我们可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>7.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup><mspace linebreak=\"newline\"></mspace><mn>3.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup><mspace linebreak=\"newline\"></mspace><mn>1.75</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">7.0×2^0\\\\\n3.5 ×2^1\\\\\n1.75×2^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>总归是可以表示到如上的标准形式。</p>\n<h5 id=\"4整数与浮点数之间的赋值\"><a class=\"markdownIt-Anchor\" href=\"#4整数与浮点数之间的赋值\">#</a> 4.\t整数与浮点数之间的赋值</h5>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 5;\nfloat f = i;\ncout &lt;&lt; f &lt;&lt; endl;\n----------\n    \n</code></pre>\n<p>这其中变化是这样的：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> 被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.0</mn><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">5.0×2^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> 随后又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.5</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">2.5×2^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 接着又被解释为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.25</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">1.25×2^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. 因此 exp = 129，xxx=0.25。</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">int i = 37;\nfloat f = *(float*)&amp;i; // 对i的地址求值\n</code></pre>\n<p>&amp;i 表示 i 的地址，i 是 int 类型的数，因而 &amp;i 是 int * 类型的指针。</p>\n<p>(float*)&amp;i 表示将 int * 类型 转变为了 float * 类型，bit 位置不会发生改变，而因为 37 对应的 bit 位 都落在了 xxxxxx 的位置上，因而 exp = 0，这就是一个奇小无比的数，而不是 37.0</p>\n<p>如果有以下程序：</p>\n<pre><code class=\"language-c++\">float f = 7.0;\nshort s = *(short *)&amp;f;\n</code></pre>\n<p>float 是 4 字节的数，指针指向 float 的最高位。当利用上述代码进行类型强制转换的时候，因为 short 只有 2 字节，因而 float 只有高位的两字节被直接复制过来，定义成了一个 short 类型的数。如下图所示：</p>\n<p><img data-src=\"image-20230921091608188.png\" alt=\"image-20230921091608188\"></p>\n",
            "tags": [
                "斯坦福编程范式CS107"
            ]
        }
    ]
}