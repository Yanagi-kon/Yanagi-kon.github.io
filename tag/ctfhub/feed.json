{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog • All posts by \"ctfhub\" tag",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2023/10/30/WEB%20%E5%AD%A6%E4%B9%A0%202023.10.23/",
            "url": "http://yanagi-kon.github.io/2023/10/30/WEB%20%E5%AD%A6%E4%B9%A0%202023.10.23/",
            "title": "WEB 学习 2023.10.23",
            "date_published": "2023-10-30T04:24:13.000Z",
            "content_html": "<h1 id=\"web-学习-20231023\"><a class=\"markdownIt-Anchor\" href=\"#web-学习-20231023\">#</a> WEB 学习 2023.10.23</h1>\n<h1 id=\"信息泄露\"><a class=\"markdownIt-Anchor\" href=\"#信息泄露\">#</a> 信息泄露</h1>\n<h2 id=\"备份文件下载\"><a class=\"markdownIt-Anchor\" href=\"#备份文件下载\">#</a> 备份文件下载</h2>\n<h3 id=\"phpinfo\"><a class=\"markdownIt-Anchor\" href=\"#phpinfo\">#</a> PHPINFO</h3>\n<p>打开环境直接浏览器搜索 ctf 即可找到对应的 flag：</p>\n<p><img data-src=\"image-20231023102957376.png\" alt=\"image-20231023102957376\"></p>\n<p><code>ctfhub&#123;5deb0c24242cf420fed9cfa1&#125;</code></p>\n<h3 id=\"网站源码\"><a class=\"markdownIt-Anchor\" href=\"#网站源码\">#</a> 网站源码</h3>\n<p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<h4 id=\"0x01-提示\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示\">#</a> 0x01 提示</h4>\n<p><strong>常见的网站源码备份文件后缀</strong></p>\n<hr>\n<ul>\n<li>tar</li>\n<li>tar.gz</li>\n<li>zip</li>\n<li>rar</li>\n</ul>\n<p><strong>常见的网站源码备份文件名</strong></p>\n<hr>\n<ul>\n<li>web</li>\n<li>website</li>\n<li>backup</li>\n<li>back</li>\n<li>www</li>\n<li>wwwroot</li>\n<li>temp</li>\n</ul>\n<h4 id=\"0x02-使用-dirsearch-查找\"><a class=\"markdownIt-Anchor\" href=\"#0x02-使用-dirsearch-查找\">#</a> 0x02 使用 dirsearch 查找</h4>\n<p>使用以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dirsearch <span class=\"token parameter variable\">-u</span> http://challenge-c3d0a76d9273c7c1.sandbox.ctfhub.com:10800/</pre></td></tr></table></figure><p>可得：</p>\n<p><img data-src=\"image-20231023103710014.png\" alt=\"image-20231023103710014\"></p>\n<p>直接下载文件 www.zip 并进行解压：</p>\n<p><img data-src=\"image-20231023104034805.png\" alt=\"image-20231023104034805\"></p>\n<h4 id=\"0x03-二次隐藏\"><a class=\"markdownIt-Anchor\" href=\"#0x03-二次隐藏\">#</a> 0x03 二次隐藏</h4>\n<p>得到一个名为  <code>flag_33496031.txt</code>  的文件，打开之后并没有 flag，重新在网站中查找相关信息：</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token scheme\">http<span class=\"token scheme-delimiter\">:</span></span><span class=\"token authority\"><span class=\"token authority-delimiter\">//</span><span class=\"token host\">challenge-c3d0a76d9273c7c1.sandbox.ctfhub.com</span><span class=\"token port-segment\"><span class=\"token port-delimiter\">:</span><span class=\"token port\">10800</span></span></span><span class=\"token path\"><span class=\"token path-separator\">/</span>flag_33496031.txt</span></pre></td></tr></table></figure><p><img data-src=\"image-20231023104442099.png\" alt=\"image-20231023104442099\"></p>\n<p>得到 flag： <code>ctfhub&#123;77f725d5968d87ba19a72640&#125;</code></p>\n<h3 id=\"bak文件\"><a class=\"markdownIt-Anchor\" href=\"#bak文件\">#</a> bak 文件</h3>\n<h4 id=\"0x01-提示-2\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-2\">#</a> 0x01 提示</h4>\n<p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p>\n<h4 id=\"0x02-题目\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023105433198.png\" alt=\"image-20231023105433198\"></p>\n<h4 id=\"0x03-使用-dirsearch-进行查找\"><a class=\"markdownIt-Anchor\" href=\"#0x03-使用-dirsearch-进行查找\">#</a> 0x03 使用 dirsearch 进行查找：</h4>\n<p><img data-src=\"image-20231023105420938.png\" alt=\"image-20231023105420938\"></p>\n<p>找到了一个 bak 文件，进行下载，使用记事本打开，即可获得 flag</p>\n<p><img data-src=\"image-20231023105614392.png\" alt=\"image-20231023105614392\"></p>\n<p><code>ctfhub&#123;93f00169cf75b69bd006441b&#125;</code></p>\n<h3 id=\"vim缓存\"><a class=\"markdownIt-Anchor\" href=\"#vim缓存\">#</a> vim 缓存</h3>\n<h4 id=\"0x01-提示-3\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-3\">#</a> 0x01 提示</h4>\n<p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当 vim 异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p>\n<h4 id=\"0x02-题目-2\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-2\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023105952658.png\" alt=\"image-20231023105952658\"></p>\n<h4 id=\"0x03-方法一-使用-dirsearch-延时查找\"><a class=\"markdownIt-Anchor\" href=\"#0x03-方法一-使用-dirsearch-延时查找\">#</a> 0x03 方法一 ：使用 dirsearch 延时查找</h4>\n<pre><code>dirsearch -u http://challenge-f8ac603be2129fb8.sandbox.ctfhub.com:10800 -s 1    # 延时1秒\n</code></pre>\n<p><img data-src=\"image-20231023111535783.png\" alt=\"image-20231023111535783\"></p>\n<h4 id=\"0x04-方法二了解相关文件名\"><a class=\"markdownIt-Anchor\" href=\"#0x04-方法二了解相关文件名\">#</a> 0x04 方法二：了解相关文件名</h4>\n<p>vim 在运行过程中会产生 swp 文件，如果程序异常退出 swp 文件可能被保留，第二次异常就变成 swo，第三次变成 swn。按照上题的思路，在原题 url 中加入  <code>.index.php.swp</code> ，文件名的最前面要有一个 “.”。</p>\n<p>下载文件  <code>.index.php.swp</code> ，打开进行查找：</p>\n<p><img data-src=\"image-20231023110947994.png\" alt=\"image-20231023110947994\"></p>\n<p>flag 为 ： <code>ctfhub&#123;70e0afb290e77337cb06d325&#125;</code></p>\n<h3 id=\"ds_store\"><a class=\"markdownIt-Anchor\" href=\"#ds_store\">#</a> .DS_Store</h3>\n<h4 id=\"0x01-提示-4\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-4\">#</a> 0x01 提示</h4>\n<p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store 可以知道这个目录里面所有文件的清单。</p>\n<h4 id=\"0x02-题目-3\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-3\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023112241272.png\" alt=\"image-20231023112241272\"></p>\n<h4 id=\"0x03-解\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解\">#</a> 0x03 解</h4>\n<p>直接访问：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/.DS_Store</pre></td></tr></table></figure><p>或者使用 dirsearch 可以得知，网站可访问  <code>.DS_Store</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dirsearch <span class=\"token parameter variable\">-u</span> http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/ <span class=\"token parameter variable\">-s</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><img data-src=\"image-20231023112400093.png\" alt=\"image-20231023112400093\"></p>\n<p>下载该文件，并使用记事本打开：</p>\n<p><img data-src=\"image-20231023112455877.png\" alt=\"image-20231023112455877\"></p>\n<p>得到  <code>6453df75efb4542d8ba3dc7d4ab53fc2.txt</code>  就是我们需要二次访问的文件地址</p>\n<p>访问得到 flag</p>\n<pre><code>http://challenge-24627cb979c9f911.sandbox.ctfhub.com:10800/6453df75efb4542d8ba3dc7d4ab53fc2.txt\n</code></pre>\n<p><img data-src=\"image-20231023112201977.png\" alt=\"image-20231023112201977\"></p>\n<p><code>ctfhub&#123;83d1b8a015ecfa71c468b5e3&#125;</code></p>\n<h2 id=\"git泄露\"><a class=\"markdownIt-Anchor\" href=\"#git泄露\">#</a> Git 泄露</h2>\n<h3 id=\"log\"><a class=\"markdownIt-Anchor\" href=\"#log\">#</a> Log</h3>\n<h4 id=\"0x01-提示-5\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-5\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-4\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-4\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023145909878.png\" alt=\"image-20231023145909878\"></p>\n<h4 id=\"0x03-解答\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答\">#</a> 0x03 解答</h4>\n<p>根据提示使用 GitHack 工具对网站的 .git 文件进行处理</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2 GitHack.py http://challenge-87d743a3ff8b665c.sandbox.ctfhub.com:10800/.git</pre></td></tr></table></figure><p><img data-src=\"image-20231023150501551.png\" alt=\"image-20231023150501551\"></p>\n<p><img data-src=\"image-20231023150549583.png\" alt=\"image-20231023150549583\"></p>\n<p>之后我们 cd 进入到克隆的文件夹中，使用 git log 查看 git 的历史记录：</p>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git log</pre></td></tr></table></figure><p><img data-src=\"image-20231023151232167.png\" alt=\"image-20231023151232167\"></p>\n<p>可以看到，最近的一次操作是将 flag 移除了，为了得到 flag 我们需要回退到 add flag 那个分支上。</p>\n<pre><code>git reset --hard HEAD^\n</code></pre>\n<p><img data-src=\"image-20231023151533695.png\" alt=\"image-20231023151533695\"></p>\n<hr>\n<p>也可以使用</p>\n<pre><code>git diff HEAD^\n</code></pre>\n<p>通过比较两个版本的不同，也可以得到正确答案。</p>\n<hr>\n<p>此时就可以查看到 flag 文件了</p>\n<p><img data-src=\"image-20231023151607766.png\" alt=\"image-20231023151607766\"></p>\n<p><code>ctfhub&#123;003a15e85e08f988da3d91b7&#125;</code></p>\n<h3 id=\"stash\"><a class=\"markdownIt-Anchor\" href=\"#stash\">#</a> Stash</h3>\n<h4 id=\"0x01-提示-6\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-6\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-5\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-5\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023153203629.png\" alt=\"image-20231023153203629\"></p>\n<h4 id=\"0x03-解答-2\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-2\">#</a> 0x03 解答</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdG9jeS9wL2dpdC1zdGFzaC1yZWZlcmVuY2UuaHRtbA==\">git stash 用法</span></p>\n<p><code>git stash</code> （git 储藏）会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。</p>\n<pre><code>git stash list\t\t//查看现有stash\ngit stash pop\t\t//恢复之前缓存的工作目录\n</code></pre>\n<p>首先使用 GitHack 得到 git 文件夹</p>\n<pre><code>python2 GitHack.py http://challenge-fb9e5bf47ae06169.sandbox.ctfhub.com:10800/.git\n</code></pre>\n<p>进入文件夹，使用 git stash list 查看现有的 stash</p>\n<p><img data-src=\"image-20231023154642571.png\" alt=\"image-20231023154642571\"></p>\n<p>再使用 git stash pop 恢复之前缓存的工作目录</p>\n<p><img data-src=\"image-20231023154822527.png\" alt=\"image-20231023154822527\"></p>\n<p>得到我们需要的 flag 所在的文件，获取即可</p>\n<p><img data-src=\"image-20231023154849548.png\" alt=\"image-20231023154849548\"></p>\n<p><code>ctfhub&#123;5bf4e75c6fa8396319a1a39a&#125;</code></p>\n<h3 id=\"index\"><a class=\"markdownIt-Anchor\" href=\"#index\">#</a> Index</h3>\n<h4 id=\"0x01-提示-7\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-7\">#</a> 0x01 提示</h4>\n<p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当，可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p>\n<h4 id=\"0x02-题目-6\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-6\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023155043808.png\" alt=\"image-20231023155043808\"></p>\n<h4 id=\"0x03-解答-3\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-3\">#</a> 0x03 解答</h4>\n<p>本题感觉没什么特别的，使用 GitHack 直接对 git 文件进行提取，在文件夹中直接查看 log 就可以得知当前状态就是含有 flag 的状态，直接获取 flag 文件即可</p>\n<p><img data-src=\"image-20231023155719415.png\" alt=\"image-20231023155719415\"></p>\n<p><code>ctfhub&#123;8197e9362ebfd50e1be1e9bf&#125;</code></p>\n<h2 id=\"svn泄露\"><a class=\"markdownIt-Anchor\" href=\"#svn泄露\">#</a> SVN 泄露</h2>\n<h4 id=\"0x01-提示-8\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-8\">#</a> 0x01 提示</h4>\n<p>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当，可能会将.svn 文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p>\n<h4 id=\"0x02-题目-7\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-7\">#</a> 0x02 题目</h4>\n<p><img data-src=\"image-20231023160418343.png\" alt=\"image-20231023160418343\"></p>\n<h4 id=\"0x03-解答-4\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-4\">#</a> 0x03 解答</h4>\n<p>首先使用 dirsearch 进行一下内容查看</p>\n<pre><code>dirsearch -u http://challenge-a61e31b7c2e824c9.sandbox.ctfhub.com:10800/ -s 1\n</code></pre>\n<p>发现了 svn 文件</p>\n<p><img data-src=\"image-20231023160624976.png\" alt=\"image-20231023160624976\"></p>\n<p>我们在 kali 中，使用  <code>dvcs-ripper</code>  中的 <code>rip-svn.pl</code>  脚本进行 clone：</p>\n<pre><code>perl rip-svn.pl -u http://challenge-5849ad3280c96ef4.sandbox.ctfhub.com:10800/.svn\n</code></pre>\n<p><img data-src=\"image-20231023172757585.png\" alt=\"image-20231023172757585\"></p>\n<p>使用  <code>ls -al</code>  查看新增加的文件</p>\n<p><img data-src=\"image-20231023172917893.png\" alt=\"image-20231023172917893\"></p>\n<p>前往 .svn 文件夹内</p>\n<p><img data-src=\"image-20231023173024409.png\" alt=\"image-20231023173024409\"></p>\n<p>可以发现 wc.db 文件在其中，使用如下命令，查找有关 flag 的内容</p>\n<pre><code>cat wc.db | grep -a flag\n</code></pre>\n<p>发现 flag 但是如果直接访问会发现不存在</p>\n<p><img data-src=\"image-20231023173557538.png\" alt=\"image-20231023173557538\"></p>\n<p><img data-src=\"image-20231023173133950.png\" alt=\"image-20231023173133950\"></p>\n<p>转而寻找  <code>.svn/pristine/</code>  中的文件</p>\n<p><img data-src=\"image-20231023173251159.png\" alt=\"image-20231023173251159\"></p>\n<p>可以发现有两个字典  <code>bf</code>  和  <code>64</code></p>\n<p>使用  <code>cat bf/bf45c36a4dfb73378247a6311eac4f80f48fcb92.svn-base</code>  得到：</p>\n<p><img data-src=\"image-20231023173328598.png\" alt=\"image-20231023173328598\"></p>\n<p>我们在数据库中可以找到对应关系：</p>\n<p><img data-src=\"image-20231023173355946.png\" alt=\"image-20231023173355946\"></p>\n<p><img data-src=\"image-20231023173404918.png\" alt=\"image-20231023173404918\"></p>\n<p>可以发现，第一个开头是 bf 的，对应的正是 index.html，那么我们只要使用 下方 64 开头的进行字典对应，就可以获得 flag：</p>\n<p><img data-src=\"image-20231023173521812.png\" alt=\"image-20231023173521812\"></p>\n<p><code>ctfhub&#123;9120bf8882d07e7ccafa434f&#125;</code></p>\n<h4 id=\"0x04-备注\"><a class=\"markdownIt-Anchor\" href=\"#0x04-备注\">#</a> 0x04 备注</h4>\n<p>可以直接使用  <code>tree .svn</code>  查看其中的关系</p>\n<p><img data-src=\"image-20231023173816807.png\" alt=\"image-20231023173816807\"></p>\n<h2 id=\"hg泄露\"><a class=\"markdownIt-Anchor\" href=\"#hg泄露\">#</a> HG 泄露</h2>\n<h3 id=\"0x01-提示-9\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-9\">#</a> 0x01 提示</h3>\n<p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当，可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p>\n<h3 id=\"0x02-题目-8\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-8\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231028093921547.png\" alt=\"image-20231028093921547\"></p>\n<h3 id=\"0x03-解答-5\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-5\">#</a> 0x03 解答</h3>\n<p>首先使用 dirsearch 进行文件检索</p>\n<pre><code>dirsearch -u http://challenge-1bc16caa950039f9.sandbox.ctfhub.com:10800/ -s 0.5\n</code></pre>\n<p><img data-src=\"image-20231028094148045.png\" alt=\"image-20231028094148045\"></p>\n<p>发现了  <code>.hg</code>  文件，尝试访问  <code>dirstate</code>  文件，下载下来，打开后发现：</p>\n<p><img data-src=\"image-20231028094534632.png\" alt=\"image-20231028094534632\"></p>\n<p><code>flag_2785532634.txt</code>  文件，对其进行访问就可以拿到 flag 了：</p>\n<p><img data-src=\"image-20231028094609448.png\" alt=\"image-20231028094609448\"></p>\n<p><code>ctfhub&#123;ec974c7b92f1ba4fceb75f44&#125;</code></p>\n<h1 id=\"密码口令\"><a class=\"markdownIt-Anchor\" href=\"#密码口令\">#</a> 密码口令</h1>\n<h2 id=\"弱口令\"><a class=\"markdownIt-Anchor\" href=\"#弱口令\">#</a> 弱口令</h2>\n<h3 id=\"0x01-提示-10\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-10\">#</a> 0x01 提示</h3>\n<p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p>\n<h3 id=\"0x02-题目-9\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-9\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231028100334921.png\" alt=\"image-20231028100334921\"></p>\n<h3 id=\"0x03-burp-suite-intruder的4种攻击类型\"><a class=\"markdownIt-Anchor\" href=\"#0x03-burp-suite-intruder的4种攻击类型\">#</a> 0x03 Burp Suite Intruder 的 4 种攻击类型</h3>\n<h4 id=\"sniper狙击手模式\"><a class=\"markdownIt-Anchor\" href=\"#sniper狙击手模式\">#</a> ** Sniper（狙击手模式）**</h4>\n<p>狙击手模式使用一组 payload 集合，它一次只使用一个 payload 位置，假设你标记了两个位置 “A” 和 “B”，payload 值为 “1” 和 “2”，那么它攻击会形成以下组合（除原始数据外）：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>no replace</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>no replace</td>\n</tr>\n<tr>\n<td>3</td>\n<td>no replace</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>no replace</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"battering-ram攻城锤模式\"><a class=\"markdownIt-Anchor\" href=\"#battering-ram攻城锤模式\">#</a> <strong>Battering ram（攻城锤模式）</strong></h4>\n<p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个 payload 集合，不同的地方在于每次攻击都是替换所有 payload 标记位置，而狙击手模式每次只能替换一个 payload 标记位置。</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"pitchfork草叉模式\"><a class=\"markdownIt-Anchor\" href=\"#pitchfork草叉模式\">#</a> <strong>Pitchfork（草叉模式）</strong></h4>\n<p>草叉模式允许使用多组 payload 组合，在每个标记位置上遍历所有 payload 组合，假设有两个位置 “A” 和 “B”，payload 组合 1 的值为 “1” 和 “2”，payload 组合 2 的值为 “3” 和 “4”，则攻击模式如下：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"cluster-bomb集束炸弹模式\"><a class=\"markdownIt-Anchor\" href=\"#cluster-bomb集束炸弹模式\">#</a> <strong>Cluster bomb（集束炸弹模式）</strong></h4>\n<p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对 payload 组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除 baseline 请求外，会有四次请求：</p>\n<table>\n<thead>\n<tr>\n<th>attack NO.</th>\n<th>location A</th>\n<th>location B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"0x04-解题\"><a class=\"markdownIt-Anchor\" href=\"#0x04-解题\">#</a> 0x04 解题</h3>\n<p>解决本题需要使用 Burp 的暴力破解功能，首先随意输入一些内容，进行登录，在 Burp 中可以看到 request 请求：</p>\n<p><img data-src=\"image-20231028100709112.png\" alt=\"image-20231028100709112\"></p>\n<p>右键  <code>send to intruder</code>  / 快捷键 <code>CTRL+I</code>  发送到 intruder 中</p>\n<p>在 Intruder 中在密码部分设置为 payload 添加 符号，作为注入点</p>\n<p><img data-src=\"image-20231029151352738.png\" alt=\"image-20231029151352738\"></p>\n<p>选择密码本进行攻击，多尝试几个密码本就可以找到密码，可以看到，正确登录后的返回长度 2658 和其他长度不一样</p>\n<p><img data-src=\"image-20231029151325266.png\" alt=\"image-20231029151325266\"></p>\n<p>双击查看 response：</p>\n<p><img data-src=\"image-20231029151619413.png\" alt=\"image-20231029151619413\"></p>\n<p>得到 flag： <code>ctfhub&#123;4fbf4b5cf53ff19625acad4f&#125;</code></p>\n<h2 id=\"默认口令\"><a class=\"markdownIt-Anchor\" href=\"#默认口令\">#</a> 默认口令</h2>\n<h3 id=\"0x01-提示-11\"><a class=\"markdownIt-Anchor\" href=\"#0x01-提示-11\">#</a> 0x01 提示</h3>\n<h3 id=\"0x02-题目-10\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目-10\">#</a> 0x02 题目</h3>\n<p><img data-src=\"image-20231029153534085.png\" alt=\"image-20231029153534085\"></p>\n<h3 id=\"0x03-解答-6\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解答-6\">#</a> 0x03 解答</h3>\n<p>题目提示默认口令说明此题的账户密码是网关默认密码，最后通过以前收集到的常用默认弱口令发现账户密码，获得此题 flag 。</p>\n<p>浏览器搜索 <code>eyou网关默认密码</code> ，检索可用信息发现使用说明手册，可能含有默认密码</p>\n<p><img data-src=\"image-20231029154402660.png\" alt=\"image-20231029154402660\"></p>\n<p>输入默认用户和密码即可进入，取得 flag</p>\n<p><img data-src=\"image-20231029154627031.png\" alt=\"image-20231029154627031\"></p>\n<p><code>ctfhub&#123;9a144963febd150940d7e538&#125;</code></p>\n",
            "tags": [
                "CTFHUB"
            ]
        }
    ]
}