{
    "version": "https://jsonfeed.org/version/1",
    "title": "亚纳奇的Blog • All posts by \"c++_leetcode\" tag",
    "description": "一个不知名的小菜鸡",
    "home_page_url": "http://Yanagi-Kon.github.io",
    "items": [
        {
            "id": "http://yanagi-kon.github.io/2023/11/05/C++%20%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://yanagi-kon.github.io/2023/11/05/C++%20%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "C++ 常见的数据结构",
            "date_published": "2023-11-05T12:28:00.000Z",
            "content_html": "<h1 id=\"c-常见的数据结构\"><a class=\"markdownIt-Anchor\" href=\"#c-常见的数据结构\">#</a> C++ 常见的数据结构</h1>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组是将相同类型的元素存储于连续内存空间的数据结构，其长度不可变。</p>\n<p>如下图所示，构建此数组需要在初始化时给定长度，并对数组每个索引元素赋值，代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化一个长度为 5 的数组 array\nint array[5];\n// 元素赋值\narray[0] = 2;\narray[1] = 3;\narray[2] = 1;\narray[3] = 0;\narray[4] = 2;\n</code></pre>\n<p>或者可以使用直接赋值的初始化方式，代码如下：</p>\n<pre><code class=\"language-c++\">int array[] = &#123;2, 3, 1, 0, 2&#125;;\n</code></pre>\n<p>「可变数组」是经常使用的数据结构，其基于数组和扩容机制实现，相比普通数组更加灵活。常用操作有：访问元素、添加元素、删除元素。</p>\n<pre><code class=\"language-c++\">// 初始化可变数组\nvector&lt;int&gt; array;\n\n// 向尾部添加元素\narray.push_back(2);\narray.push_back(3);\narray.push_back(1);\narray.push_back(0);\narray.push_back(2);\n</code></pre>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值  <code>val</code> 」，「后继节点引用  <code>next</code> 」 。</p>\n<pre><code class=\"language-c++\">struct ListNode &#123;\n    int val;        // 节点值\n    ListNode *next; // 后继节点引用\n    ListNode(int x) : val(x), next(NULL) &#123;&#125;\n&#125;;\n</code></pre>\n<p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p>\n<pre><code class=\"language-c++\">// 实例化节点\nListNode *n1 = new ListNode(4); // 节点 head\nListNode *n2 = new ListNode(5);\nListNode *n3 = new ListNode(1);\n\n// 构建引用指向\nn1-&gt;next = n2;\nn2-&gt;next = n3;\n</code></pre>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<p>栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p>\n<pre><code class=\"language-c++\">stack&lt;int&gt; stk;\n</code></pre>\n<p>如下图所示，通过常用操作「入栈  <code>push()</code> 」,「出栈  <code>pop()</code> 」，展示了栈的先入后出特性。</p>\n<pre><code class=\"language-c++\">stk.push(1); // 元素 1 入栈\nstk.push(2); // 元素 2 入栈\nstk.pop();   // 出栈 -&gt; 元素 2\nstk.pop();   // 出栈 -&gt; 元素 1\n</code></pre>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p>队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p>\n<pre><code class=\"language-c++\">queue&lt;int&gt; que;\n</code></pre>\n<p>如下图所示，通过常用操作「入队  <code>push()</code> 」,「出队  <code>pop()</code> 」，展示了队列的先入先出特性。</p>\n<pre><code class=\"language-c++\">que.push(1); // 元素 1 入队\nque.push(2); // 元素 2 入队\nque.pop();   // 出队 -&gt; 元素 1\nque.pop();   // 出队 -&gt; 元素 2\n</code></pre>\n<h2 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\">#</a> 树</h2>\n<p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。以二叉树为例，每个节点包含三个成员变量：「值 val」、「左子节点 left」、「右子节点 right」 。</p>\n<pre><code class=\"language-c++\">struct TreeNode &#123;\n    int val;         // 节点值\n    TreeNode *left;  // 左子节点\n    TreeNode *right; // 右子节点\n    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n&#125;;\n</code></pre>\n<p>如下图所示，建立此二叉树需要实例化每个节点，并构建各节点的引用指向。</p>\n<pre><code class=\"language-c++\">// 初始化节点\nTreeNode *n1 = new TreeNode(3); // 根节点 root\nTreeNode *n2 = new TreeNode(4);\nTreeNode *n3 = new TreeNode(5);\nTreeNode *n4 = new TreeNode(1);\nTreeNode *n5 = new TreeNode(2);\n\n// 构建引用指向\nn1-&gt;left = n2;\nn1-&gt;right = n3;\nn2-&gt;left = n4;\nn2-&gt;right = n5;\n</code></pre>\n<h2 id=\"图\"><a class=\"markdownIt-Anchor\" href=\"#图\">#</a> 图</h2>\n<p>图是一种非线性数据结构，由「节点（顶点）vertex」和「边 edge」组成，每条边连接一对顶点。根据边的方向有无，图可分为「有向图」和「无向图」。本文 以无向图为例 开展介绍。</p>\n<p>如下图所示，此无向图的 顶点 和 边 集合分别为：</p>\n<ul>\n<li 5 1, 2, 3, 4,>\n<p>顶点集合： vertices =</p>\n</li>\n<li>\n<p>边集合： edges = {(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 5), (4, 5)</p>\n</li>\n</ul>\n<p>![Picture7.png](C++ 常见的数据结构 / 1599579136-Fxseew-Picture7.png)</p>\n<p>表示图的方法通常有两种：</p>\n<ol>\n<li>\n<p><strong>邻接矩阵：</strong> 使用数组  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">vertices</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储顶点，邻接矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储边；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 代表节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[i+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 和节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[j+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>  之间是否有边。</p>\n<pre><code class=\"language-c++\">int vertices[5] = &#123;1, 2, 3, 4, 5&#125;;\nint edges[5][5] = &#123;&#123;0, 1, 1, 1, 1&#125;,\n                      &#123;1, 0, 0, 1, 0&#125;,\n                      &#123;1, 0, 0, 0, 1&#125;,\n                      &#123;1, 1, 0, 0, 1&#125;,\n                      &#123;1, 0, 1, 1, 0&#125;&#125;;\n</code></pre>\n</li>\n<li>\n<p><strong>邻接表：</strong> 使用数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">vertices</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储顶点，邻接表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 存储边。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">edges</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span></span></span></span> 为一个二维容器，第一维 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 代表顶点索引，第二维 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 存储此顶点对应的边集和；例如 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>d</mi><mi>g</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">edges[0] = [1,2,3,4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span></span></span></span> 代表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">vertices[0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 的边集合为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mtext>。</mtext></mrow><annotation encoding=\"application/x-tex\">[1,2,3,4]。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">。</span></span></span></span></p>\n<pre><code class=\"language-c++\">int vertices[5] = &#123;1, 2, 3, 4, 5&#125;;\nvector&lt;vector&lt;int&gt;&gt; edges;\n\nvector&lt;int&gt; edge_1 = &#123;1, 2, 3, 4&#125;;\nvector&lt;int&gt; edge_2 = &#123;0, 3&#125;;\nvector&lt;int&gt; edge_3 = &#123;0, 4&#125;;\nvector&lt;int&gt; edge_4 = &#123;0, 1, 4&#125;;\nvector&lt;int&gt; edge_5 = &#123;0, 2, 3&#125;;\nedges.push_back(edge_1);\nedges.push_back(edge_2);\nedges.push_back(edge_3);\nedges.push_back(edge_4);\nedges.push_back(edge_5);\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p><strong>邻接矩阵 VS 邻接表 ：</strong></p>\n<p>邻接矩阵的大小只与节点数量有关，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> ，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 为节点数量。因此，当边数量明显少于节点数量时，使用邻接矩阵存储图会造成较大的内存浪费。<br>\n因此，邻接表 适合存储稀疏图（顶点较多、边较少）； 邻接矩阵 适合存储稠密图（顶点较少、边较多）。</p>\n</blockquote>\n<h2 id=\"散列表\"><a class=\"markdownIt-Anchor\" href=\"#散列表\">#</a> 散列表</h2>\n<p>散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键  <code>key</code> 」映射至对应的「值  <code>value</code> 」，以实现高效的元素查找。</p>\n<blockquote>\n<p>设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。<br>\n现需求从「姓名」查找「学号」。</p>\n</blockquote>\n<p>则可通过建立姓名为  <code>key</code>  ，学号为  <code>value</code>  的散列表实现此需求，代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化散列表\nunordered_map&lt;string, int&gt; dic;\n\n// 添加 key -&gt; value 键值对\ndic[&quot;小力&quot;] = 10001;\ndic[&quot;小特&quot;] = 10002;\ndic[&quot;小扣&quot;] = 10003;\n\n// 从姓名查找学号\ndic.find(&quot;小力&quot;)-&gt;second; // -&gt; 10001\ndic.find(&quot;小特&quot;)-&gt;second; // -&gt; 10002\ndic.find(&quot;小扣&quot;)-&gt;second; // -&gt; 10003\n</code></pre>\n<p>![Picture8.png](C++ 常见的数据结构 / 1599811794-ruXMOV-Picture8.png)</p>\n<h3 id=\"hash-函数设计示例\"><a class=\"markdownIt-Anchor\" href=\"#hash-函数设计示例\">#</a> Hash 函数设计示例 ：</h3>\n<blockquote>\n<p>假设需求：从「学号」查找「姓名」。</p>\n</blockquote>\n<p>将三人的姓名存储至以下数组中，则各姓名在数组中的索引分别为 0, 1, 2 。</p>\n<pre><code class=\"language-c++\">string names[] = &#123; &quot;小力&quot;, &quot;小特&quot;, &quot;小扣&quot; &#125;;\n</code></pre>\n<p>此时，我们构造一个简单的 Hash 函数（ %% 为取余符号 ），公式和封装函数如下所示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mn>10000</mn></mrow><annotation encoding=\"application/x-tex\">hash(key)=(key-1)\\%10000\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span></p>\n<pre><code class=\"language-c++\">int hash(int id)&#123;\n\tint index = (id - 1) % 10000;\n    return index; &#125;\n</code></pre>\n<p>则我们构建了以学号为  <code>key</code>  、姓名对应的数组索引为  <code>value</code>  的散列表。利用此 Hash 函数，则可在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 时间复杂度下通过学号查找到对应姓名，即：</p>\n<pre><code class=\"language-c++\">names[hash(10001)] // 小力\nnames[hash(10002)] // 小特\nnames[hash(10003)] // 小扣\n</code></pre>\n<p>![Picture8-1.png](C++ 常见的数据结构 / 1599811794-NfbpfW-Picture8-1.png)</p>\n<p>以上设计只适用于此示例，实际的 Hash 函数需保证低碰撞率、 高鲁棒性等，以适用于各类数据和场景。</p>\n<h2 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h2>\n<p>堆是一种基于「完全二叉树」的数据结构，可使用数组实现。以堆为原理的排序算法称为「堆排序」，基于堆实现的数据结构为「优先队列」。堆分为「大顶堆」和「小顶堆」，大（小）顶堆：任意节点的值不大于（小于）其父节点的值。</p>\n<blockquote>\n<p><strong>完全二叉树定义：</strong> 设二叉树深度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> ，若二叉树除第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 层外的其它各层（第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 层）的节点达到最大个数，且处于第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 层的节点都连续集中在最左边，则称此二叉树为完全二叉树。</p>\n</blockquote>\n<p>如下图所示，为包含  <code>1, 4, 2, 6, 8</code>  元素的小顶堆。将堆（完全二叉树）中的结点按层编号，即可映射到右边的数组存储形式。</p>\n<p>![Picture9.png](C++ 常见的数据结构 / 1599584901-xoiGEQ-Picture9.png)</p>\n<p>通过使用「优先队列」的「压入  <code>push()</code> 」和「弹出  <code>pop()</code> 」操作，即可完成堆排序，实现代码如下：</p>\n<pre><code class=\"language-c++\">// 初始化小顶堆\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; heap;\n\n// 元素入堆\nheap.push(1);\nheap.push(4);\nheap.push(2);\nheap.push(6);\nheap.push(8);\n\n// 元素出堆（从小到大）\nheap.pop(); // -&gt; 1\nheap.pop(); // -&gt; 2\nheap.pop(); // -&gt; 4\nheap.pop(); // -&gt; 6\nheap.pop(); // -&gt; 8\n</code></pre>\n",
            "tags": [
                "C++_Leetcode"
            ]
        }
    ]
}